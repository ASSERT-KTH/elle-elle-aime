import time
import os
import json
from core.chatgpt.request_chatgpt import ask_chatgpt
from core.chatgpt.verify_chatgpt_defects4j import verify_single_sample
from core.chatgpt.chat import request_chatgpt_pr
from core.chatgpt.config.defs4j_config import ObjectView
from core.tools.prompt import chatgpt_prompt_generation
from core.tools.extract_code import extract_code


def delete_dir(dir_path):
    """Delete a directory."""
    if os.path.exists(dir_path):
        os.system("rm -rf " + dir_path)


def ask_chatgpt_for_defect4j(args, defects4j_config, fixa_config):
    """Ask ChatGPT for a single bug."""
    # fix a single bug
    # checkout whether bug_id is string
    if isinstance(args.bug_id, int):
        args.bug_id = str(args.bug_id)
    buggy_dir = os.path.join(args.working_directory, "%s_%s_%s" %
                           (args.benchmark, args.project, args.bug_id)) + "_buggy"
    fixed_dir = os.path.join(args.working_directory, "%s_%s_%s" %
                           (args.benchmark, args.project, args.bug_id)) + "_fixed"

    if args.only_request:
        ask_chatgpt(args, defects4j_config, fixa_config)
    elif args.only_verify:
        # load all the patches generated by chatgpt from test folder
        dir_path = os.path.join(args.working_directory, args.benchmark, args.project, args.bug_id)
        with open(os.path.join(dir_path, "defects4j_config.json"), "r") as f:
            defects4j_config = json.load(f)
        defects4j_config = ObjectView(defects4j_config)
        response_dict = defects4j_config["respond_code_chunk"]
        for res_id in range(1, args.num_requests+1):
            defects4j_config["respond_code_chunk"] = response_dict[str(res_id)]
            try:
                print(f"Verify chatgpt reponse with id: {res_id}...")
                verify_single_sample(args, defects4j_config, res_id)
            except Exception as e:
                print("Error when verifying chatgpt response with id: ", args.bug_id, e)
                time.sleep(3)
        
        defects4j_config["respond_code_chunk"] = response_dict
        # Rewrite the defects4j_config.json file
        with open(os.path.join(dir_path, "defects4j_config.json"), "w") as f:
            json.dump(defects4j_config, f, indent=4)
        delete_dir(buggy_dir)
        delete_dir(fixed_dir)
    else:
        defects4j_config = ask_chatgpt(args, defects4j_config, fixa_config)
        try:
            if defects4j_config.respond_type == "UNRESPONDED":
                defects4j_config.respond_type = None
                delete_dir(buggy_dir)
                delete_dir(fixed_dir)
                return
            elif defects4j_config.respond_type == None:
                return
        except Exception as e:
            print("Error when asking chatgpt response with id: ", args.bug_id, e)
            time.sleep(3)
        # verify the patch
        dir_path = os.path.join(args.working_directory, args.benchmark, args.project, args.bug_id)
        response_dict = defects4j_config["respond_code_chunk"]
        for res_id in range(1, args.num_requests+1):
            defects4j_config["respond_code_chunk"] = response_dict[str(res_id)]
            try:
                print(f"Verify chatgpt reponse with id: {res_id}...")
                verify_single_sample(args, defects4j_config, res_id)
            except Exception as e:
                print("Error when verifying chatgpt response with id: ", args.bug_id, e)
        defects4j_config["respond_code_chunk"] = response_dict
        # Rewrite the defects4j_config.json file
        with open(os.path.join(dir_path, "defects4j_config.json"), "w") as f:
            json.dump(defects4j_config, f, indent=4)
        delete_dir(buggy_dir)
        delete_dir(fixed_dir)
        defects4j_config.respond_type = None


def ask_chatgpt_for_refactory(args, result_dict, buggy_code_path):
    """Ask ChatGPT for a single bug."""
    request_params = {
        'model': args.model,
        'temperature': args.temperature,
        'max_tokens': args.max_tokens,
        'top_p': args.top_p,
        'frequency_penalty': args.frequency_penalty,
        'presence_penalty': args.presence_penalty,
    }
    # fix a single bug
    with open(buggy_code_path, "r") as f:
        buggy_code = f.read()
    prompt, prompt_size, bug_size = chatgpt_prompt_generation(args, buggy_code)
    result_dict.prompt = prompt
    result_dict.prompt_size = prompt_size
    result_dict.bug_size = bug_size
    # breakpoint()
    for num in range(args.num_requests):
        response = request_chatgpt_pr(prompt, request_params, args)
        respond_text = response['choices'][0]['message']['content']
        fixed_code = extract_code(respond_text)
        result_dict.response.append(respond_text)
        result_dict.patches.append(fixed_code)
    return result_dict

    
