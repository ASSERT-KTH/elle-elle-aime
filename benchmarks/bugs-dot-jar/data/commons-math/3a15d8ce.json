{
  "files": 1, 
  "nb_test": 2167, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.commons.math.linear.AbstractRealVectorTest"
  ], 
  "patch": "diff --git a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\nindex 023648de1..e17254367 100644\n--- a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n@@ -18,6 +18,7 @@\n package org.apache.commons.math.linear;\n \n import java.util.Iterator;\n+import java.util.NoSuchElementException;\n \n import org.apache.commons.math.FunctionEvaluationException;\n import org.apache.commons.math.MathRuntimeException;\n@@ -875,34 +876,23 @@ public void setValue(double newValue) {\n         /** Dimension of the vector. */\n         private final int dim;\n \n-        /** Temporary entry (reused on each call to {@link #next()}. */\n-        private EntryImpl tmp = new EntryImpl();\n-\n-        /** Current entry. */\n+        /** last entry returned by {@link #next()} */\n         private EntryImpl current;\n \n-        /** Next entry. */\n+        /** Next entry for {@link #next()} to return. */\n         private EntryImpl next;\n \n         /** Simple constructor. */\n         protected SparseEntryIterator() {\n             dim = getDimension();\n             current = new EntryImpl();\n-            if (current.getValue() == 0) {\n-                advance(current);\n-            }\n-            if(current.getIndex() >= 0){\n-                // There is at least one non-zero entry\n             next = new EntryImpl();\n-                next.setIndex(current.getIndex());\n+            if(next.getValue() == 0){\n             \tadvance(next);\n-            } else {\n-                // The vector consists of only zero entries, so deny having a next\n-                current = null;\n             }\n         }\n \n-        /** Advance an entry up to the next non null one.\n+        /** Advance an entry up to the next nonzero one.\n          * @param e entry to advance\n          */\n         protected void advance(EntryImpl e) {\n@@ -919,22 +909,18 @@ protected void advance(EntryImpl e) {\n \n         /** {@inheritDoc} */\n         public boolean hasNext() {\n-            return current != null;\n+            return next.getIndex() >= 0;\n         }\n \n         /** {@inheritDoc} */\n         public Entry next() {\n-            tmp.setIndex(current.getIndex());\n-            if (next != null) {\n-                current.setIndex(next.getIndex());\n-                advance(next);\n-                if (next.getIndex() < 0) {\n-                    next = null;\n-                }\n-            } else {\n-                current = null;\n+        \tint index = next.getIndex();\n+        \tif(index < 0){\n+        \t\tthrow new NoSuchElementException();\n         \t}\n-            return tmp;\n+        \tcurrent.setIndex(index);\n+        \tadvance(next);\n+        \treturn current;\n         }\n \n         /** {@inheritDoc} */\n", 
  "project": "commons-math", 
  "linesAdd": 12, 
  "jira_id": "367", 
  "nb_skipped": 0, 
  "commit": "3a15d8ce", 
  "nb_failure": 0, 
  "linesRem": 26
}