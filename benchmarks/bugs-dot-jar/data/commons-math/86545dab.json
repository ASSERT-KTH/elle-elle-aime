{
  "files": 2, 
  "nb_test": 5196, 
  "nb_error": 2, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.commons.math3.fraction.BigFractionTest", 
    "org.apache.commons.math3.fraction.FractionTest"
  ], 
  "patch": "diff --git a/src/main/java/org/apache/commons/math3/fraction/BigFraction.java b/src/main/java/org/apache/commons/math3/fraction/BigFraction.java\nindex 5b0a6b4ce..4ca33eb04 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/BigFraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/BigFraction.java\n@@ -301,6 +301,11 @@ private BigFraction(final double value, final double epsilon,\n             p2 = (a1 * p1) + p0;\n             q2 = (a1 * q1) + q0;\n             if ((p2 > overflow) || (q2 > overflow)) {\n+                // in maxDenominator mode, if the last fraction was very close to the actual value\n+                // q2 may overflow in the next iteration; in this case return the last one.\n+                if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) {\n+                    break;\n+                }\n                 throw new FractionConversionException(value, p2, q2);\n             }\n \ndiff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex 08d3b9556..002dae934 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -83,6 +83,9 @@\n     /** Serializable version identifier */\n     private static final long serialVersionUID = 3698073679419233275L;\n \n+    /** The default epsilon used for convergence. */\n+    private static final double DEFAULT_EPSILON = 1e-5;\n+\n     /** The denominator. */\n     private final int denominator;\n \n@@ -96,7 +99,7 @@\n      *         converge.\n      */\n     public Fraction(double value) throws FractionConversionException {\n-        this(value, 1.0e-5, 100);\n+        this(value, DEFAULT_EPSILON, 100);\n     }\n \n     /**\n@@ -182,8 +185,7 @@ private Fraction(double value, double epsilon, int maxDenominator, int maxIterat\n             throw new FractionConversionException(value, a0, 1l);\n         }\n \n-        // check for (almost) integer arguments, which should not go\n-        // to iterations.\n+        // check for (almost) integer arguments, which should not go to iterations.\n         if (FastMath.abs(a0 - value) < epsilon) {\n             this.numerator = (int) a0;\n             this.denominator = 1;\n@@ -206,7 +208,13 @@ private Fraction(double value, double epsilon, int maxDenominator, int maxIterat\n             long a1 = (long)FastMath.floor(r1);\n             p2 = (a1 * p1) + p0;\n             q2 = (a1 * q1) + q0;\n+\n             if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {\n+                // in maxDenominator mode, if the last fraction was very close to the actual value\n+                // q2 may overflow in the next iteration; in this case return the last one.\n+                if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) {\n+                    break;\n+                }\n                 throw new FractionConversionException(value, p2, q2);\n             }\n \n", 
  "project": "commons-math", 
  "linesAdd": 16, 
  "jira_id": "996", 
  "nb_skipped": 4, 
  "commit": "86545dab", 
  "nb_failure": 0, 
  "linesRem": 3
}