{
  "files": 2, 
  "nb_test": 5808, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.commons.math4.optim.linear.SimplexSolverTest"
  ], 
  "patch": "diff --git a/src/main/java/org/apache/commons/math4/optim/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math4/optim/linear/SimplexSolver.java\nindex d4b4259f7..743fe9bc3 100644\n--- a/src/main/java/org/apache/commons/math4/optim/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math4/optim/linear/SimplexSolver.java\n@@ -19,6 +19,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.commons.math4.exception.DimensionMismatchException;\n import org.apache.commons.math4.exception.TooManyIterationsException;\n import org.apache.commons.math4.optim.OptimizationData;\n import org.apache.commons.math4.optim.PointValuePair;\n@@ -146,6 +147,8 @@ public SimplexSolver(final double epsilon, final int maxUlps, final double cutOf\n      *\n      * @return {@inheritDoc}\n      * @throws TooManyIterationsException if the maximal number of iterations is exceeded.\n+     * @throws DimensionMismatchException if the dimension of the constraints does not match the\n+     *   dimension of the objective function\n      */\n     @Override\n     public PointValuePair optimize(OptimizationData... optData)\ndiff --git a/src/main/java/org/apache/commons/math4/optim/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math4/optim/linear/SimplexTableau.java\nindex e869a7489..f0a842f16 100644\n--- a/src/main/java/org/apache/commons/math4/optim/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math4/optim/linear/SimplexTableau.java\n@@ -28,6 +28,7 @@\n import java.util.Set;\n import java.util.TreeSet;\n \n+import org.apache.commons.math4.exception.DimensionMismatchException;\n import org.apache.commons.math4.linear.Array2DRowRealMatrix;\n import org.apache.commons.math4.linear.MatrixUtils;\n import org.apache.commons.math4.linear.RealVector;\n@@ -112,6 +113,8 @@\n      * or {@link GoalType#MINIMIZE}.\n      * @param restrictToNonNegative Whether to restrict the variables to non-negative values.\n      * @param epsilon Amount of error to accept when checking for optimality.\n+     * @throws DimensionMismatchException if the dimension of the constraints does not match the\n+     *   dimension of the objective function\n      */\n     SimplexTableau(final LinearObjectiveFunction f,\n                    final Collection<LinearConstraint> constraints,\n@@ -129,13 +132,16 @@\n      * @param restrictToNonNegative whether to restrict the variables to non-negative values\n      * @param epsilon amount of error to accept when checking for optimality\n      * @param maxUlps amount of error to accept in floating point comparisons\n+     * @throws DimensionMismatchException if the dimension of the constraints does not match the\n+     *   dimension of the objective function\n      */\n     SimplexTableau(final LinearObjectiveFunction f,\n                    final Collection<LinearConstraint> constraints,\n                    final GoalType goalType,\n                    final boolean restrictToNonNegative,\n                    final double epsilon,\n-                   final int maxUlps) {\n+                   final int maxUlps) throws DimensionMismatchException {\n+        checkDimensions(f, constraints);\n         this.f                      = f;\n         this.constraints            = normalizeConstraints(constraints);\n         this.restrictToNonNegative  = restrictToNonNegative;\n@@ -153,6 +159,23 @@\n         initializeColumnLabels();\n     }\n \n+    /**\n+     * Checks that the dimensions of the objective function and the constraints match.\n+     * @param f the objective function\n+     * @param constraints the set of constraints\n+     * @throws DimensionMismatchException if the constraint dimensions do not match with the\n+     *   dimension of the objective function\n+     */\n+    private void checkDimensions(final LinearObjectiveFunction f,\n+                                 final Collection<LinearConstraint> constraints) {\n+        final int dimension = f.getCoefficients().getDimension();\n+        for (final LinearConstraint constraint : constraints) {\n+            final int constraintDimension = constraint.getCoefficients().getDimension();\n+            if (constraintDimension != dimension) {\n+                throw new DimensionMismatchException(constraintDimension, dimension);\n+            }\n+        }\n+    }\n     /**\n      * Initialize the labels for the columns.\n      */\n", 
  "project": "commons-math", 
  "linesAdd": 27, 
  "jira_id": "1230", 
  "nb_skipped": 3, 
  "commit": "96eb80ef", 
  "nb_failure": 1, 
  "linesRem": 1
}