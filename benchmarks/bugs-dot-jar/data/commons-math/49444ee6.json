{
  "files": 1, 
  "nb_test": 4795, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.commons.math3.stat.correlation.CovarianceTest"
  ], 
  "patch": "diff --git a/src/main/java/org/apache/commons/math3/stat/correlation/Covariance.java b/src/main/java/org/apache/commons/math3/stat/correlation/Covariance.java\nindex ba62463c5..ace3205c0 100644\n--- a/src/main/java/org/apache/commons/math3/stat/correlation/Covariance.java\n+++ b/src/main/java/org/apache/commons/math3/stat/correlation/Covariance.java\n@@ -17,6 +17,7 @@\n package org.apache.commons.math3.stat.correlation;\n \n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n+import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.linear.RealMatrix;\n import org.apache.commons.math3.linear.BlockRealMatrix;\n@@ -70,16 +71,18 @@ public Covariance() {\n      * <p>The <code>biasCorrected</code> parameter determines whether or not\n      * covariance estimates are bias-corrected.</p>\n      *\n-     * <p>The input array must be rectangular with at least two columns\n+     * <p>The input array must be rectangular with at least one column\n      * and two rows.</p>\n      *\n      * @param data rectangular array with columns representing covariates\n      * @param biasCorrected true means covariances are bias-corrected\n      * @throws MathIllegalArgumentException if the input data array is not\n-     * rectangular with at least two rows and two columns.\n+     * rectangular with at least two rows and one column.\n+     * @throws NotStrictlyPositiveException if the input data array is not\n+     * rectangular with at least one row and one column.\n      */\n     public Covariance(double[][] data, boolean biasCorrected)\n-    throws MathIllegalArgumentException {\n+    throws MathIllegalArgumentException, NotStrictlyPositiveException {\n         this(new BlockRealMatrix(data), biasCorrected);\n     }\n \n@@ -87,14 +90,17 @@ public Covariance(double[][] data, boolean biasCorrected)\n      * Create a Covariance matrix from a rectangular array\n      * whose columns represent covariates.\n      *\n-     * <p>The input array must be rectangular with at least two columns\n+     * <p>The input array must be rectangular with at least one column\n      * and two rows</p>\n      *\n      * @param data rectangular array with columns representing covariates\n      * @throws MathIllegalArgumentException if the input data array is not\n-     * rectangular with at least two rows and two columns.\n+     * rectangular with at least two rows and one column.\n+     * @throws NotStrictlyPositiveException if the input data array is not\n+     * rectangular with at least one row and one column.\n      */\n-    public Covariance(double[][] data) throws MathIllegalArgumentException {\n+    public Covariance(double[][] data)\n+    throws MathIllegalArgumentException, NotStrictlyPositiveException {\n         this(data, true);\n     }\n \n@@ -105,12 +111,12 @@ public Covariance(double[][] data) throws MathIllegalArgumentException {\n      * <p>The <code>biasCorrected</code> parameter determines whether or not\n      * covariance estimates are bias-corrected.</p>\n      *\n-     * <p>The matrix must have at least two columns and two rows</p>\n+     * <p>The matrix must have at least one column and two rows</p>\n      *\n      * @param matrix matrix with columns representing covariates\n      * @param biasCorrected true means covariances are bias-corrected\n      * @throws MathIllegalArgumentException if the input matrix does not have\n-     * at least two rows and two columns\n+     * at least two rows and one column\n      */\n     public Covariance(RealMatrix matrix, boolean biasCorrected)\n     throws MathIllegalArgumentException {\n@@ -123,11 +129,11 @@ public Covariance(RealMatrix matrix, boolean biasCorrected)\n      * Create a covariance matrix from a matrix whose columns\n      * represent covariates.\n      *\n-     * <p>The matrix must have at least two columns and two rows</p>\n+     * <p>The matrix must have at least one column and two rows</p>\n      *\n      * @param matrix matrix with columns representing covariates\n      * @throws MathIllegalArgumentException if the input matrix does not have\n-     * at least two rows and two columns\n+     * at least two rows and one column\n      */\n     public Covariance(RealMatrix matrix) throws MathIllegalArgumentException {\n         this(matrix, true);\n@@ -154,7 +160,7 @@ public int getN() {\n     /**\n      * Compute a covariance matrix from a matrix whose columns represent\n      * covariates.\n-     * @param matrix input matrix (must have at least two columns and two rows)\n+     * @param matrix input matrix (must have at least one column and two rows)\n      * @param biasCorrected determines whether or not covariance estimates are bias-corrected\n      * @return covariance matrix\n      * @throws MathIllegalArgumentException if the matrix does not contain sufficient data\n@@ -178,7 +184,7 @@ protected RealMatrix computeCovarianceMatrix(RealMatrix matrix, boolean biasCorr\n     /**\n      * Create a covariance matrix from a matrix whose columns represent\n      * covariates. Covariances are computed using the bias-corrected formula.\n-     * @param matrix input matrix (must have at least two columns and two rows)\n+     * @param matrix input matrix (must have at least one column and two rows)\n      * @return covariance matrix\n      * @throws MathIllegalArgumentException if matrix does not contain sufficient data\n      * @see #Covariance\n@@ -191,26 +197,31 @@ protected RealMatrix computeCovarianceMatrix(RealMatrix matrix)\n     /**\n      * Compute a covariance matrix from a rectangular array whose columns represent\n      * covariates.\n-     * @param data input array (must have at least two columns and two rows)\n+     * @param data input array (must have at least one column and two rows)\n      * @param biasCorrected determines whether or not covariance estimates are bias-corrected\n      * @return covariance matrix\n      * @throws MathIllegalArgumentException if the data array does not contain sufficient\n      * data\n+     * @throws NotStrictlyPositiveException if the input data array is not\n+     * rectangular with at least one row and one column.\n      */\n     protected RealMatrix computeCovarianceMatrix(double[][] data, boolean biasCorrected)\n-    throws MathIllegalArgumentException {\n+    throws MathIllegalArgumentException, NotStrictlyPositiveException {\n         return computeCovarianceMatrix(new BlockRealMatrix(data), biasCorrected);\n     }\n \n     /**\n      * Create a covariance matrix from a rectangular array whose columns represent\n      * covariates. Covariances are computed using the bias-corrected formula.\n-     * @param data input array (must have at least two columns and two rows)\n+     * @param data input array (must have at least one column and two rows)\n      * @return covariance matrix\n      * @throws MathIllegalArgumentException if the data array does not contain sufficient data\n+     * @throws NotStrictlyPositiveException if the input data array is not\n+     * rectangular with at least one row and one column.\n      * @see #Covariance\n      */\n-    protected RealMatrix computeCovarianceMatrix(double[][] data) throws MathIllegalArgumentException {\n+    protected RealMatrix computeCovarianceMatrix(double[][] data)\n+    throws MathIllegalArgumentException, NotStrictlyPositiveException {\n         return computeCovarianceMatrix(data, true);\n     }\n \n@@ -268,7 +279,7 @@ public double covariance(final double[] xArray, final double[] yArray)\n \n     /**\n      * Throws MathIllegalArgumentException if the matrix does not have at least\n-     * two columns and two rows.\n+     * one column and two rows.\n      * @param matrix matrix to check\n      * @throws MathIllegalArgumentException if the matrix does not contain sufficient data\n      * to compute covariance\n@@ -276,7 +287,7 @@ public double covariance(final double[] xArray, final double[] yArray)\n     private void checkSufficientData(final RealMatrix matrix) throws MathIllegalArgumentException {\n         int nRows = matrix.getRowDimension();\n         int nCols = matrix.getColumnDimension();\n-        if (nRows < 2 || nCols < 2) {\n+        if (nRows < 2 || nCols < 1) {\n             throw new MathIllegalArgumentException(\n                     LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS,\n                     nRows, nCols);\n", 
  "project": "commons-math", 
  "linesAdd": 29, 
  "jira_id": "939", 
  "nb_skipped": 4, 
  "commit": "49444ee6", 
  "nb_failure": 0, 
  "linesRem": 18
}