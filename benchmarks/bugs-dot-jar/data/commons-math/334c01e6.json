{
  "files": 1, 
  "nb_test": 2891, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest"
  ], 
  "patch": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex fde7172e3..b3a23a1d4 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -169,25 +169,37 @@ protected final double doSolve() {\n \n             // Update the bounds with the new approximation.\n             if (f1 * fx < 0) {\n-                // We had [x0..x1]. We update it to [x1, x]. Note that the\n-                // value of x1 has switched to the other bound, thus inverting\n+                // The value of x1 has switched to the other bound, thus inverting\n                 // the interval.\n                 x0 = x1;\n                 f0 = f1;\n-                x1 = x;\n-                f1 = fx;\n                 inverted = !inverted;\n             } else {\n-                // We had [x0..x1]. We update it to [x0, x].\n-                if (method == Method.ILLINOIS) {\n+                switch (method) {\n+                case ILLINOIS:\n                     f0 *= 0.5;\n-                }\n-                if (method == Method.PEGASUS) {\n+                    break;\n+                case PEGASUS:\n                     f0 *= f1 / (f1 + fx);\n+                    break;\n+                case REGULA_FALSI:\n+                    if (x == x1) {\n+                        final double delta = FastMath.max(rtol * FastMath.abs(x1),\n+                                                          atol);\n+                        // Update formula cannot make any progress: Update the\n+                        // search interval.\n+                        x0 = 0.5 * (x0 + x1 - delta);\n+                        f0 = computeObjectiveValue(x0);\n                     }\n+                    break;\n+                default:\n+                    // Should never happen.\n+                    throw new MathInternalError();\n+                }\n+            }\n+            // Update from [x0, x1] to [x0, x].\n             x1 = x;\n             f1 = fx;\n-            }\n \n             // If the function value of the last approximation is too small,\n             // given the function value accuracy, then we can't get closer to\n", 
  "project": "commons-math", 
  "linesAdd": 21, 
  "jira_id": "631", 
  "nb_skipped": 1, 
  "commit": "334c01e6", 
  "nb_failure": 0, 
  "linesRem": 9
}