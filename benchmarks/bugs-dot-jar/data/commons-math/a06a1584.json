{
  "files": 1, 
  "nb_test": 5852, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.commons.math4.geometry.euclidean.threed.PolyhedronsSetTest"
  ], 
  "patch": "diff --git a/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java b/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java\nindex 9c46ae303..2f3bfa9a2 100644\n--- a/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java\n+++ b/src/main/java/org/apache/commons/math4/geometry/euclidean/threed/PolyhedronsSet.java\n@@ -240,9 +240,9 @@ private void addContribution(final SubHyperplane<Euclidean3D> facet, final boole\n     /** Get the first sub-hyperplane crossed by a semi-infinite line.\n      * @param point start point of the part of the line considered\n      * @param line line to consider (contains point)\n-     * @return the first sub-hyperplaned crossed by the line after the\n+     * @return the first sub-hyperplane crossed by the line after the\n      * given point, or null if the line does not intersect any\n-     * sub-hyperplaned\n+     * sub-hyperplane\n      */\n     public SubHyperplane<Euclidean3D> firstIntersection(final Vector3D point, final Line line) {\n         return recurseFirstIntersection(getTree(true), point, line);\n@@ -252,9 +252,9 @@ private void addContribution(final SubHyperplane<Euclidean3D> facet, final boole\n      * @param node current node\n      * @param point start point of the part of the line considered\n      * @param line line to consider (contains point)\n-     * @return the first sub-hyperplaned crossed by the line after the\n+     * @return the first sub-hyperplane crossed by the line after the\n      * given point, or null if the line does not intersect any\n-     * sub-hyperplaned\n+     * sub-hyperplane\n      */\n     private SubHyperplane<Euclidean3D> recurseFirstIntersection(final BSPTree<Euclidean3D> node,\n                                                                 final Vector3D point,\n@@ -270,7 +270,7 @@ private void addContribution(final SubHyperplane<Euclidean3D> facet, final boole\n \n         // establish search order\n         final double offset = plane.getOffset((Point<Euclidean3D>) point);\n-        final boolean in    = FastMath.abs(offset) < 1.0e-10;\n+        final boolean in    = FastMath.abs(offset) < getTolerance();\n         final BSPTree<Euclidean3D> near;\n         final BSPTree<Euclidean3D> far;\n         if (offset < 0) {\n@@ -298,7 +298,7 @@ private void addContribution(final SubHyperplane<Euclidean3D> facet, final boole\n         if (!in) {\n             // search in the cut hyperplane\n             final Vector3D hit3D = plane.intersection(line);\n-            if (hit3D != null) {\n+            if (hit3D != null && line.getAbscissa(hit3D) > line.getAbscissa(point)) {\n                 final SubHyperplane<Euclidean3D> facet = boundaryFacet(hit3D, node);\n                 if (facet != null) {\n                     return facet;\n", 
  "project": "commons-math", 
  "linesAdd": 6, 
  "jira_id": "1211", 
  "nb_skipped": 3, 
  "commit": "a06a1584", 
  "nb_failure": 1, 
  "linesRem": 6
}