{
  "files": 1, 
  "nb_test": 2888, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.commons.math.geometry.euclidean.threed.RotationTest"
  ], 
  "patch": "diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\nindex bfa7f2692..ada0a8fb0 100644\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n@@ -313,92 +313,51 @@ public Rotation(double[][] m, double threshold)\n   public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n \n   // norms computation\n-  double u1u1 = Vector3D.dotProduct(u1, u1);\n-  double u2u2 = Vector3D.dotProduct(u2, u2);\n-  double v1v1 = Vector3D.dotProduct(v1, v1);\n-  double v2v2 = Vector3D.dotProduct(v2, v2);\n+  double u1u1 = u1.getNormSq();\n+  double u2u2 = u2.getNormSq();\n+  double v1v1 = v1.getNormSq();\n+  double v2v2 = v2.getNormSq();\n   if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n     throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n   }\n \n-  double u1x = u1.getX();\n-  double u1y = u1.getY();\n-  double u1z = u1.getZ();\n-\n-  double u2x = u2.getX();\n-  double u2y = u2.getY();\n-  double u2z = u2.getZ();\n-\n   // normalize v1 in order to have (v1'|v1') = (u1|u1)\n-  double coeff = FastMath.sqrt (u1u1 / v1v1);\n-  double v1x   = coeff * v1.getX();\n-  double v1y   = coeff * v1.getY();\n-  double v1z   = coeff * v1.getZ();\n-  v1 = new Vector3D(v1x, v1y, v1z);\n-\n-  // adjust v2 in order to have (u1|u2) = (v1|v2) and (v2'|v2') = (u2|u2)\n-  double u1u2   = Vector3D.dotProduct(u1, u2);\n-  double v1v2   = Vector3D.dotProduct(v1, v2);\n+  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n+\n+  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n+  double u1u2   = u1.dotProduct(u2);\n+  double v1v2   = v1.dotProduct(v2);\n   double coeffU = u1u2 / u1u1;\n   double coeffV = v1v2 / u1u1;\n   double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n   double alpha  = coeffU - beta * coeffV;\n-  double v2x    = alpha * v1x + beta * v2.getX();\n-  double v2y    = alpha * v1y + beta * v2.getY();\n-  double v2z    = alpha * v1z + beta * v2.getZ();\n-  v2 = new Vector3D(v2x, v2y, v2z);\n-\n-  // preliminary computation (we use explicit formulation instead\n-  // of relying on the Vector3D class in order to avoid building lots\n-  // of temporary objects)\n+  v2 = new Vector3D(alpha, v1, beta, v2);\n+\n+  // preliminary computation\n   Vector3D uRef  = u1;\n   Vector3D vRef  = v1;\n-  double dx1 = v1x - u1.getX();\n-  double dy1 = v1y - u1.getY();\n-  double dz1 = v1z - u1.getZ();\n-  double dx2 = v2x - u2.getX();\n-  double dy2 = v2y - u2.getY();\n-  double dz2 = v2z - u2.getZ();\n-  Vector3D k = new Vector3D(dy1 * dz2 - dz1 * dy2,\n-                            dz1 * dx2 - dx1 * dz2,\n-                            dx1 * dy2 - dy1 * dx2);\n-  double c = k.getX() * (u1y * u2z - u1z * u2y) +\n-             k.getY() * (u1z * u2x - u1x * u2z) +\n-             k.getZ() * (u1x * u2y - u1y * u2x);\n-\n-  if (c == 0) {\n-    // the (q1, q2, q3) vector is in the (u1, u2) plane\n+  Vector3D v1Su1 = v1.subtract(u1);\n+  Vector3D v2Su2 = v2.subtract(u2);\n+  Vector3D k     = v1Su1.crossProduct(v2Su2);\n+  Vector3D u3    = u1.crossProduct(u2);\n+  double c       = k.dotProduct(u3);\n+  final double inPlaneThreshold = 0.001;\n+  if (c <= inPlaneThreshold * k.getNorm() * u3.getNorm()) {\n+    // the (q1, q2, q3) vector is close to the (u1, u2) plane\n     // we try other vectors\n-    Vector3D u3 = Vector3D.crossProduct(u1, u2);\n     Vector3D v3 = Vector3D.crossProduct(v1, v2);\n-    double u3x  = u3.getX();\n-    double u3y  = u3.getY();\n-    double u3z  = u3.getZ();\n-    double v3x  = v3.getX();\n-    double v3y  = v3.getY();\n-    double v3z  = v3.getZ();\n-\n-    double dx3 = v3x - u3x;\n-    double dy3 = v3y - u3y;\n-    double dz3 = v3z - u3z;\n-    k = new Vector3D(dy1 * dz3 - dz1 * dy3,\n-                     dz1 * dx3 - dx1 * dz3,\n-                     dx1 * dy3 - dy1 * dx3);\n-    c = k.getX() * (u1y * u3z - u1z * u3y) +\n-        k.getY() * (u1z * u3x - u1x * u3z) +\n-        k.getZ() * (u1x * u3y - u1y * u3x);\n-\n-    if (c == 0) {\n-      // the (q1, q2, q3) vector is aligned with u1:\n-      // we try (u2, u3) and (v2, v3)\n-      k = new Vector3D(dy2 * dz3 - dz2 * dy3,\n-                       dz2 * dx3 - dx2 * dz3,\n-                       dx2 * dy3 - dy2 * dx3);\n-      c = k.getX() * (u2y * u3z - u2z * u3y) +\n-          k.getY() * (u2z * u3x - u2x * u3z) +\n-          k.getZ() * (u2x * u3y - u2y * u3x);\n-\n-      if (c == 0) {\n+    Vector3D v3Su3 = v3.subtract(u3);\n+    k = v1Su1.crossProduct(v3Su3);\n+    Vector3D u2Prime = u1.crossProduct(u3);\n+    c = k.dotProduct(u2Prime);\n+\n+    if (c <= inPlaneThreshold * k.getNorm() * u2Prime.getNorm()) {\n+      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n+      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n+      k = v2Su2.crossProduct(v3Su3);;\n+      c = k.dotProduct(u2.crossProduct(u3));;\n+\n+      if (c <= 0) {\n         // the (q1, q2, q3) vector is aligned with everything\n         // this is really the identity rotation\n         q0 = 1.0;\n@@ -427,8 +386,7 @@ public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n    k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,\n                     uRef.getZ() * q1 - uRef.getX() * q3,\n                     uRef.getX() * q2 - uRef.getY() * q1);\n-   c = Vector3D.dotProduct(k, k);\n-  q0 = Vector3D.dotProduct(vRef, k) / (c + c);\n+  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());\n \n   }\n \n@@ -452,7 +410,7 @@ public Rotation(Vector3D u, Vector3D v) {\n         throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n     }\n \n-    double dot = Vector3D.dotProduct(u, v);\n+    double dot = u.dotProduct(v);\n \n     if (dot < ((2.0e-15 - 1.0) * normProduct)) {\n       // special case u = -v: we select a PI angle rotation around\n@@ -467,9 +425,10 @@ public Rotation(Vector3D u, Vector3D v) {\n       // the shortest possible rotation: axis orthogonal to this plane\n       q0 = FastMath.sqrt(0.5 * (1.0 + dot / normProduct));\n       double coeff = 1.0 / (2.0 * q0 * normProduct);\n-      q1 = coeff * (v.getY() * u.getZ() - v.getZ() * u.getY());\n-      q2 = coeff * (v.getZ() * u.getX() - v.getX() * u.getZ());\n-      q3 = coeff * (v.getX() * u.getY() - v.getY() * u.getX());\n+      Vector3D q = v.crossProduct(u);\n+      q1 = coeff * q.getX();\n+      q2 = coeff * q.getY();\n+      q3 = coeff * q.getZ();\n     }\n \n   }\n", 
  "project": "commons-math", 
  "linesAdd": 38, 
  "jira_id": "639", 
  "nb_skipped": 1, 
  "commit": "8b418000", 
  "nb_failure": 1, 
  "linesRem": 79
}