{
  "files": 1, 
  "nb_test": 4934, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.commons.math3.distribution.UniformRealDistributionTest"
  ], 
  "patch": "diff --git a/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java b/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\nindex 0d279de1f..62ccb0c51 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java\n@@ -18,6 +18,7 @@\n package org.apache.commons.math3.distribution;\n \n import org.apache.commons.math3.exception.NumberIsTooLargeException;\n+import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.random.RandomGenerator;\n import org.apache.commons.math3.random.Well19937c;\n@@ -32,7 +33,10 @@\n  * @since 3.0\n  */\n public class UniformRealDistribution extends AbstractRealDistribution {\n-    /** Default inverse cumulative probability accuracy. */\n+    /** Default inverse cumulative probability accuracy.\n+     * @deprecated as of 3.2 not used anymore, will be removed in 4.0\n+     */\n+    @Deprecated\n     public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;\n     /** Serializable version identifier. */\n     private static final long serialVersionUID = 20120109L;\n@@ -40,8 +44,6 @@\n     private final double lower;\n     /** Upper bound of this distribution (exclusive). */\n     private final double upper;\n-    /** Inverse cumulative probability accuracy. */\n-    private final double solverAbsoluteAccuracy;\n \n     /**\n      * Create a standard uniform real distribution with lower bound (inclusive)\n@@ -61,7 +63,7 @@ public UniformRealDistribution() {\n      */\n     public UniformRealDistribution(double lower, double upper)\n         throws NumberIsTooLargeException {\n-        this(lower, upper, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);\n+        this(new  Well19937c(), lower, upper);\n     }\n \n     /**\n@@ -71,10 +73,13 @@ public UniformRealDistribution(double lower, double upper)\n      * @param upper Upper bound of this distribution (exclusive).\n      * @param inverseCumAccuracy Inverse cumulative probability accuracy.\n      * @throws NumberIsTooLargeException if {@code lower >= upper}.\n+     * @deprecated as of 3.2, inverse CDF is now calculated analytically, use\n+     *             {@link #UniformRealDistribution(double, double)} instead.\n      */\n+    @Deprecated\n     public UniformRealDistribution(double lower, double upper, double inverseCumAccuracy)\n         throws NumberIsTooLargeException {\n-        this(new  Well19937c(), lower, upper, inverseCumAccuracy);\n+        this(new  Well19937c(), lower, upper);\n     }\n \n     /**\n@@ -86,11 +91,30 @@ public UniformRealDistribution(double lower, double upper, double inverseCumAccu\n      * @param inverseCumAccuracy Inverse cumulative probability accuracy.\n      * @throws NumberIsTooLargeException if {@code lower >= upper}.\n      * @since 3.1\n+     * @deprecated as of 3.2, inverse CDF is now calculated analytically, use\n+     *             {@link #UniformRealDistribution(RandomGenerator, double, double)}\n+     *             instead.\n      */\n+    @Deprecated\n     public UniformRealDistribution(RandomGenerator rng,\n                                    double lower,\n                                    double upper,\n-                                   double inverseCumAccuracy)\n+                                   double inverseCumAccuracy){\n+        this(rng, lower, upper);\n+    }\n+\n+    /**\n+     * Creates a uniform distribution.\n+     *\n+     * @param rng Random number generator.\n+     * @param lower Lower bound of this distribution (inclusive).\n+     * @param upper Upper bound of this distribution (exclusive).\n+     * @throws NumberIsTooLargeException if {@code lower >= upper}.\n+     * @since 3.1\n+     */\n+    public UniformRealDistribution(RandomGenerator rng,\n+                                   double lower,\n+                                   double upper)\n         throws NumberIsTooLargeException {\n         super(rng);\n         if (lower >= upper) {\n@@ -101,7 +125,6 @@ public UniformRealDistribution(RandomGenerator rng,\n \n         this.lower = lower;\n         this.upper = upper;\n-        solverAbsoluteAccuracy = inverseCumAccuracy;\n     }\n \n     /** {@inheritDoc} */\n@@ -123,10 +146,13 @@ public double cumulativeProbability(double x)  {\n         return (x - lower) / (upper - lower);\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n-    protected double getSolverAbsoluteAccuracy() {\n-        return solverAbsoluteAccuracy;\n+    public double inverseCumulativeProbability(final double p)\n+            throws OutOfRangeException {\n+        if (p < 0.0 || p > 1.0) {\n+            throw new OutOfRangeException(p, 0, 1);\n+        }\n+        return p * (upper - lower) + lower;\n     }\n \n     /**\n", 
  "project": "commons-math", 
  "linesAdd": 36, 
  "jira_id": "957", 
  "nb_skipped": 4, 
  "commit": "9aabf587", 
  "nb_failure": 1, 
  "linesRem": 10
}