{
  "files": 4, 
  "nb_test": 2947, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest"
  ], 
  "patch": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex c781a9011..034752553 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -19,6 +19,7 @@\n \n import org.apache.commons.math.util.FastMath;\n import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.exception.ConvergenceException;\n import org.apache.commons.math.exception.MathInternalError;\n \n /**\n@@ -61,8 +62,8 @@\n     /**\n      * Construct a solver.\n      *\n-     * @param absoluteAccuracy absolute accuracy\n-     * @param method <em>Secant</em>-based root-finding method to use\n+     * @param absoluteAccuracy Absolute accuracy.\n+     * @param method <em>Secant</em>-based root-finding method to use.\n      */\n     protected BaseSecantSolver(final double absoluteAccuracy, final Method method) {\n         super(absoluteAccuracy);\n@@ -73,9 +74,9 @@ protected BaseSecantSolver(final double absoluteAccuracy, final Method method) {\n     /**\n      * Construct a solver.\n      *\n-     * @param relativeAccuracy relative accuracy\n-     * @param absoluteAccuracy absolute accuracy\n-     * @param method <em>Secant</em>-based root-finding method to use\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n+     * @param method <em>Secant</em>-based root-finding method to use.\n      */\n     protected BaseSecantSolver(final double relativeAccuracy,\n                                final double absoluteAccuracy,\n@@ -183,7 +184,11 @@ protected final double doSolve() {\n                     f0 *= f1 / (f1 + fx);\n                     break;\n                 case REGULA_FALSI:\n-                    // Nothing.\n+                    // Detect early that algorithm is stuck, instead of waiting\n+                    // for the maximum number of iterations to be exceeded.\n+                    if (x == x1) {\n+                        throw new ConvergenceException();\n+                    }\n                     break;\n                 default:\n                     // Should never happen.\ndiff --git a/src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java\nindex ede0c2792..47c340c01 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/IllinoisSolver.java\n@@ -26,7 +26,9 @@\n  * <p>Like the <em>Regula Falsi</em> method, convergence is guaranteed by\n  * maintaining a bracketed solution. The <em>Illinois</em> method however,\n  * should converge much faster than the original <em>Regula Falsi</em>\n- * method.</p>\n+ * method. Furthermore, this implementation of the <em>Illinois</em> method\n+ * should not suffer from the same implementation issues as the <em>Regula\n+ * Falsi</em> method, which may fail to convergence in certain cases.</p>\n  *\n  * <p>The <em>Illinois</em> method assumes that the function is continuous,\n  * but not necessarily smooth.</p>\n@@ -49,7 +51,7 @@ public IllinoisSolver() {\n     /**\n      * Construct a solver.\n      *\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param absoluteAccuracy Absolute accuracy.\n      */\n     public IllinoisSolver(final double absoluteAccuracy) {\n         super(absoluteAccuracy, Method.ILLINOIS);\n@@ -58,8 +60,8 @@ public IllinoisSolver(final double absoluteAccuracy) {\n     /**\n      * Construct a solver.\n      *\n-     * @param relativeAccuracy relative accuracy\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n      */\n     public IllinoisSolver(final double relativeAccuracy,\n                           final double absoluteAccuracy) {\n@@ -69,8 +71,8 @@ public IllinoisSolver(final double relativeAccuracy,\n     /**\n      * Construct a solver.\n      *\n-     * @param relativeAccuracy relative accuracy\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n      * @param functionValueAccuracy Maximum function value error.\n      */\n     public IllinoisSolver(final double relativeAccuracy,\ndiff --git a/src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java\nindex 08fb0c7d0..457c9580d 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/PegasusSolver.java\n@@ -24,10 +24,13 @@\n  *\n  * <p>Like the <em>Regula Falsi</em> method, convergence is guaranteed by\n  * maintaining a bracketed solution. The <em>Pegasus</em> method however,\n- * should converge much faster than the original <em>Regula Falsi</em> method.\n- * Furthermore, it should converge faster than the\n- * {@link IllinoisSolver <em>Illinois</em>} method, another\n- * <em>Regula Falsi</em>-based method.</p>\n+ * should converge much faster than the original <em>Regula Falsi</em>\n+ * method. Furthermore, this implementation of the <em>Pegasus</em> method\n+ * should not suffer from the same implementation issues as the <em>Regula\n+ * Falsi</em> method, which may fail to convergence in certain cases. Also,\n+ * the <em>Pegasus</em> method should converge faster than the\n+ * {@link IllinoisSolver <em>Illinois</em>} method, another <em>Regula\n+ * Falsi</em>-based method.</p>\n  *\n  * <p>The <em>Pegasus</em> method assumes that the function is continuous,\n  * but not necessarily smooth.</p>\n@@ -50,7 +53,7 @@ public PegasusSolver() {\n     /**\n      * Construct a solver.\n      *\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param absoluteAccuracy Absolute accuracy.\n      */\n     public PegasusSolver(final double absoluteAccuracy) {\n         super(absoluteAccuracy, Method.PEGASUS);\n@@ -59,8 +62,8 @@ public PegasusSolver(final double absoluteAccuracy) {\n     /**\n      * Construct a solver.\n      *\n-     * @param relativeAccuracy relative accuracy\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n      */\n     public PegasusSolver(final double relativeAccuracy,\n                          final double absoluteAccuracy) {\n@@ -70,8 +73,8 @@ public PegasusSolver(final double relativeAccuracy,\n     /**\n      * Construct a solver.\n      *\n-     * @param relativeAccuracy relative accuracy\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n      * @param functionValueAccuracy Maximum function value error.\n      */\n     public PegasusSolver(final double relativeAccuracy,\ndiff --git a/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java\nindex 89c50dfd0..71224a0da 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolver.java\n@@ -21,9 +20,27 @@\n /**\n  * Implements the <em>Regula Falsi</em> or <em>False position</em> method for\n  * root-finding (approximating a zero of a univariate real function). It is a\n- * modified {@link SecantSolver <em>Secant</em>} method. Unlike the\n- * <em>Secant</em> method, convergence is guaranteed by maintaining a\n- * bracketed solution.\n+ * modified {@link SecantSolver <em>Secant</em>} method.\n+ *\n+ * <p>The <em>Regula Falsi</em> method is included for completeness, for\n+ * testing purposes, for educational purposes, for comparison to other\n+ * algorithms, etc. It is however <strong>not</strong> intended to be used\n+ * for actual problems, as one of the bounds often remains fixed, resulting\n+ * in very slow convergence. Instead, one of the well-known modified\n+ * <em>Regula Falsi</em> algorithms can be used ({@link IllinoisSolver\n+ * <em>Illinois</em>} or {@link PegasusSolver <em>Pegasus</em>}). These two\n+ * algorithms solve the fundamental issues of the original <em>Regula\n+ * Falsi</em> algorithm, and greatly out-performs it for most, if not all,\n+ * (practical) functions.\n+ *\n+ * <p>Unlike the <em>Secant</em> method, the <em>Regula Falsi</em> guarantees\n+ * convergence, by maintaining a bracketed solution. Note however, that due to\n+ * the finite/limited precision of Java's {@link Double double} type, which is\n+ * used in this implementation, the algorithm may get stuck in a situation\n+ * where it no longer makes any progress. Such cases are detected and result\n+ * in a {@code ConvergenceException} exception being thrown. In other words,\n+ * the algorithm theoretically guarantees convergence, but the implementation\n+ * does not.</p>\n  *\n  * <p>The <em>Regula Falsi</em> method assumes that the function is continuous,\n  * but not necessarily smooth.</p>\n@@ -46,7 +63,7 @@ public RegulaFalsiSolver() {\n     /**\n      * Construct a solver.\n      *\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param absoluteAccuracy Absolute accuracy.\n      */\n     public RegulaFalsiSolver(final double absoluteAccuracy) {\n         super(absoluteAccuracy, Method.REGULA_FALSI);\n@@ -55,8 +72,8 @@ public RegulaFalsiSolver(final double absoluteAccuracy) {\n     /**\n      * Construct a solver.\n      *\n-     * @param relativeAccuracy relative accuracy\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n      */\n     public RegulaFalsiSolver(final double relativeAccuracy,\n                              final double absoluteAccuracy) {\n@@ -66,8 +83,8 @@ public RegulaFalsiSolver(final double relativeAccuracy,\n     /**\n      * Construct a solver.\n      *\n-     * @param relativeAccuracy relative accuracy\n-     * @param absoluteAccuracy absolute accuracy\n+     * @param relativeAccuracy Relative accuracy.\n+     * @param absoluteAccuracy Absolute accuracy.\n      * @param functionValueAccuracy Maximum function value error.\n      */\n     public RegulaFalsiSolver(final double relativeAccuracy,\n", 
  "project": "commons-math", 
  "linesAdd": 57, 
  "jira_id": "631", 
  "nb_skipped": 1, 
  "commit": "c0b49542", 
  "nb_failure": 0, 
  "linesRem": 29
}