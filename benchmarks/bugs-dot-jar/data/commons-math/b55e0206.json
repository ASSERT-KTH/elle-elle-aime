{
  "files": 1, 
  "nb_test": 4153, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest"
  ], 
  "patch": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex b54cb3744..f6a4f2820 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -24,8 +24,8 @@\n import org.apache.commons.math3.analysis.MultivariateFunction;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.MathUnsupportedOperationException;\n-import org.apache.commons.math3.exception.MathIllegalStateException;\n import org.apache.commons.math3.exception.NotPositiveException;\n+import org.apache.commons.math3.exception.NumberIsTooLargeException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.exception.TooManyEvaluationsException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n@@ -78,6 +78,12 @@\n  *  <li><a href=\"http://en.wikipedia.org/wiki/CMA-ES\">Wikipedia</a></li>\n  * </ul>\n  *\n+ * When simple constraints (boundaries) are used, care must be taken that the\n+ * difference between the upper and lower bounds does not overflow; should it\n+ * be the case, a {@link NumberIsTooLargeException} will be thrown by the\n+ * {@link BaseAbstractMultivariateSimpleBoundsOptimizer#optimize(int,\n+ * MultivariateFunction,GoalType,double[],double[],double[]) optimize} method.\n+ *\n  * @version $Id$\n  * @since 3.0\n  */\n@@ -529,6 +535,21 @@ private void checkParameters() {\n                 boundaries = new double[2][];\n                 boundaries[0] = lB;\n                 boundaries[1] = uB;\n+\n+                // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                for (int i = 0; i < lB.length; i++) {\n+                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {\n+                        final double max = Double.MAX_VALUE + boundaries[0][i];\n+                        final NumberIsTooLargeException e\n+                            = new NumberIsTooLargeException(boundaries[1][i],\n+                                                            max,\n+                                                            true);\n+                        e.getContext().addMessage(LocalizedFormats.OVERFLOW);\n+                        e.getContext().addMessage(LocalizedFormats.INDEX, i);\n+\n+                        throw e;\n+                    }\n+                }\n             }\n         } else {\n             // Convert API to internal handling of boundaries.\n", 
  "project": "commons-math", 
  "linesAdd": 22, 
  "jira_id": "865", 
  "nb_skipped": 4, 
  "commit": "b55e0206", 
  "nb_failure": 0, 
  "linesRem": 1
}