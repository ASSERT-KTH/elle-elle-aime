{
  "files": 1, 
  "nb_test": 2125, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.commons.math.linear.SingularValueSolverTest"
  ], 
  "patch": "diff --git a/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java\nindex 6003ed677..e418c084f 100644\n--- a/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/SingularValueDecompositionImpl.java\n@@ -159,27 +159,28 @@ public RealMatrix getU()\n             if (m >= n) {\n                 // the tridiagonal matrix is Bt.B, where B is upper bidiagonal\n                 final RealMatrix e =\n-                    eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);\n+                    eigenDecomposition.getV().getSubMatrix(0, n - 1, 0, p - 1);\n                 final double[][] eData = e.getData();\n                 final double[][] wData = new double[m][p];\n                 double[] ei1 = eData[0];\n-                for (int i = 0; i < p - 1; ++i) {\n+                for (int i = 0; i < p; ++i) {\n                     // compute W = B.E.S^(-1) where E is the eigenvectors matrix\n                     final double mi = mainBidiagonal[i];\n-                    final double si = secondaryBidiagonal[i];\n                     final double[] ei0 = ei1;\n                     final double[] wi  = wData[i];\n+                    if (i < n - 1) {\n                         ei1 = eData[i + 1];\n+                        final double si = secondaryBidiagonal[i];\n                         for (int j = 0; j < p; ++j) {\n                             wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];\n                         }\n-                }\n-                // last row\n-                final double lastMain = mainBidiagonal[p - 1];\n-                final double[] wr1  = wData[p - 1];\n+                    } else {\n                         for (int j = 0; j < p; ++j) {\n-                    wr1[j] = ei1[j] * lastMain / singularValues[j];\n+                            wi[j] = mi * ei0[j] / singularValues[j];\n+                        }\n                     }\n+                }\n+\n                 for (int i = p; i < m; ++i) {\n                     wData[i] = new double[p];\n                 }\n@@ -247,25 +248,25 @@ public RealMatrix getV()\n                 // the tridiagonal matrix is B.Bt, where B is lower bidiagonal\n                 // compute W = Bt.E.S^(-1) where E is the eigenvectors matrix\n                 final RealMatrix e =\n-                    eigenDecomposition.getV().getSubMatrix(0, p - 1, 0, p - 1);\n+                    eigenDecomposition.getV().getSubMatrix(0, m - 1, 0, p - 1);\n                 final double[][] eData = e.getData();\n                 final double[][] wData = new double[n][p];\n                 double[] ei1 = eData[0];\n-                for (int i = 0; i < p - 1; ++i) {\n+                for (int i = 0; i < p; ++i) {\n                     final double mi = mainBidiagonal[i];\n-                    final double si = secondaryBidiagonal[i];\n                     final double[] ei0 = ei1;\n                     final double[] wi  = wData[i];\n+                    if (i < m - 1) {\n                         ei1 = eData[i + 1];\n+                        final double si = secondaryBidiagonal[i];\n                         for (int j = 0; j < p; ++j) {\n                             wi[j] = (mi * ei0[j] + si * ei1[j]) / singularValues[j];\n                         }\n-                }\n-                // last row\n-                final double lastMain = mainBidiagonal[p - 1];\n-                final double[] wr1  = wData[p - 1];\n+                    } else {\n                         for (int j = 0; j < p; ++j) {\n-                    wr1[j] = ei1[j] * lastMain / singularValues[j];\n+                            wi[j] = mi * ei0[j] / singularValues[j];\n+                        }\n+                    }\n                 }\n                 for (int i = p; i < n; ++i) {\n                     wData[i] = new double[p];\n", 
  "project": "commons-math", 
  "linesAdd": 17, 
  "jira_id": "320", 
  "nb_skipped": 0, 
  "commit": "b2f3f6db", 
  "nb_failure": 2, 
  "linesRem": 16
}