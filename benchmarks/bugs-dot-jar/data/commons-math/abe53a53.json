{
  "files": 1, 
  "nb_test": 4152, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest"
  ], 
  "patch": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex d01cd158c..b54cb3744 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -24,9 +24,11 @@\n import org.apache.commons.math3.analysis.MultivariateFunction;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.MathUnsupportedOperationException;\n+import org.apache.commons.math3.exception.MathIllegalStateException;\n import org.apache.commons.math3.exception.NotPositiveException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.exception.TooManyEvaluationsException;\n+import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n import org.apache.commons.math3.linear.EigenDecomposition;\n import org.apache.commons.math3.linear.MatrixUtils;\n@@ -414,7 +416,7 @@ protected PointValuePair doOptimize() {\n                     bestValue = bestFitness;\n                     lastResult = optimum;\n                     optimum = new PointValuePair(\n-                            fitfun.decode(bestArx.getColumn(0)),\n+                            fitfun.repairAndDecode(bestArx.getColumn(0)),\n                             isMinimize ? bestFitness : -bestFitness);\n                     if (getConvergenceChecker() != null && lastResult != null) {\n                         if (getConvergenceChecker().converged(iterations, optimum, lastResult)) {\n@@ -911,6 +913,16 @@ public FitnessFunction() {\n             return res;\n         }\n \n+        /**\n+         * @param x Normalized objective variables.\n+         * @return the original objective variables, possibly repaired.\n+         */\n+        public double[] repairAndDecode(final double[] x) {\n+            return boundaries != null && isRepairMode ?\n+                decode(repair(x)) :\n+                decode(x);\n+        }\n+\n         /**\n          * @param x Normalized objective variables.\n          * @return the original objective variables.\n", 
  "project": "commons-math", 
  "linesAdd": 13, 
  "jira_id": "864", 
  "nb_skipped": 4, 
  "commit": "abe53a53", 
  "nb_failure": 1, 
  "linesRem": 1
}