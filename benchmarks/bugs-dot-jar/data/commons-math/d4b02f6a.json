{
  "files": 2, 
  "nb_test": 2245, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest"
  ], 
  "patch": "diff --git a/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java\nindex 10bc9e66c..26fd5e0ac 100644\n--- a/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java\n@@ -89,12 +89,12 @@ public MultiStartUnivariateRealOptimizer(final UnivariateRealOptimizer optimizer\n \n     /** {@inheritDoc} */\n     public double getFunctionValue() {\n-        return optimizer.getFunctionValue();\n+        return optimaValues[0];\n     }\n \n     /** {@inheritDoc} */\n     public double getResult() {\n-        return optimizer.getResult();\n+        return optima[0];\n     }\n \n     /** {@inheritDoc} */\ndiff --git a/src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java\nindex bf406ab6b..07d8c4f98 100644\n--- a/src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/UnivariateRealOptimizer.java\n@@ -36,7 +36,7 @@\n     void setMaxEvaluations(int maxEvaluations);\n \n     /** Get the maximal number of functions evaluations.\n-     * @return maximal number of functions evaluations\n+     * @return the maximal number of functions evaluations.\n      */\n     int getMaxEvaluations();\n \n@@ -46,7 +46,7 @@\n      * {@link #optimize(UnivariateRealFunction, GoalType, double, double) optimize}\n      * method. It is 0 if the method has not been called yet.\n      * </p>\n-     * @return number of evaluations of the objective function\n+     * @return the number of evaluations of the objective function.\n      */\n     int getEvaluations();\n \n@@ -57,16 +57,16 @@\n      * </p>\n      * @param f the function to optimize.\n      * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}\n-     * or {@link GoalType#MINIMIZE}\n+     * or {@link GoalType#MINIMIZE}.\n      * @param min the lower bound for the interval.\n      * @param max the upper bound for the interval.\n-     * @return a value where the function is optimum\n+     * @return a value where the function is optimum.\n      * @throws ConvergenceException if the maximum iteration count is exceeded\n      * or the optimizer detects convergence problems otherwise.\n      * @throws FunctionEvaluationException if an error occurs evaluating the\n-     * function\n+     * function.\n      * @throws IllegalArgumentException if min > max or the endpoints do not\n-     * satisfy the requirements specified by the optimizer\n+     * satisfy the requirements specified by the optimizer.\n      */\n     double optimize(UnivariateRealFunction f, GoalType goalType,\n                     double min, double max)\n@@ -79,17 +79,17 @@\n      * </p>\n      * @param f the function to optimize.\n      * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}\n-     * or {@link GoalType#MINIMIZE}\n+     * or {@link GoalType#MINIMIZE}.\n      * @param min the lower bound for the interval.\n      * @param max the upper bound for the interval.\n-     * @param startValue the start value to use\n-     * @return a value where the function is optimum\n+     * @param startValue the start value to use.\n+     * @return a value where the function is optimum.\n      * @throws ConvergenceException if the maximum iteration count is exceeded\n      * or the optimizer detects convergence problems otherwise.\n      * @throws FunctionEvaluationException if an error occurs evaluating the\n-     * function\n+     * function.\n      * @throws IllegalArgumentException if min > max or the arguments do not\n-     * satisfy the requirements specified by the optimizer\n+     * satisfy the requirements specified by the optimizer.\n      */\n     double optimize(UnivariateRealFunction f, GoalType goalType,\n                     double min, double max, double startValue)\n@@ -98,7 +98,7 @@\n     /**\n      * Get the result of the last run of the optimizer.\n      *\n-     * @return the last result.\n+     * @return the optimum.\n      * @throws IllegalStateException if there is no result available, either\n      * because no result was yet computed or the last attempt failed.\n      */\n@@ -107,7 +107,7 @@\n     /**\n      * Get the result of the last run of the optimizer.\n      *\n-     * @return the value of the function at the last result.\n+     * @return the value of the function at the optimum.\n      * @throws IllegalStateException if there is no result available, either\n      * because no result was yet computed or the last attempt failed.\n      */\n", 
  "project": "commons-math", 
  "linesAdd": 15, 
  "jira_id": "393", 
  "nb_skipped": 0, 
  "commit": "d4b02f6a", 
  "nb_failure": 1, 
  "linesRem": 15
}