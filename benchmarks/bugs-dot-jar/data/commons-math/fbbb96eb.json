{
  "files": 1, 
  "nb_test": 2372, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.commons.math.geometry.Vector3DTest"
  ], 
  "patch": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 0a4adb840..2d915e570 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,10 +454,41 @@ public static double dotProduct(Vector3D v1, Vector3D v2) {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(Vector3D v1, Vector3D v2) {\n-    return new Vector3D(v1.y * v2.z - v1.z * v2.y,\n-                        v1.z * v2.x - v1.x * v2.z,\n-                        v1.x * v2.y - v1.y * v2.x);\n+  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+      final double n1 = v1.getNormSq();\n+      final double n2 = v2.getNormSq();\n+      if ((n1 * n2) < MathUtils.SAFE_MIN) {\n+          return ZERO;\n+      }\n+\n+      // rescale both vectors without losing precision,\n+      // to ensure their norm are the same order of magnitude\n+      final int deltaExp = (FastMath.getExponent(n1) - FastMath.getExponent(n2)) / 4;\n+      final double x1    = FastMath.scalb(v1.x, -deltaExp);\n+      final double y1    = FastMath.scalb(v1.y, -deltaExp);\n+      final double z1    = FastMath.scalb(v1.z, -deltaExp);\n+      final double x2    = FastMath.scalb(v2.x,  deltaExp);\n+      final double y2    = FastMath.scalb(v2.y,  deltaExp);\n+      final double z2    = FastMath.scalb(v2.z,  deltaExp);\n+\n+      // we reduce cancellation errors by preconditioning,\n+      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+      // v3 without loss of precision. See Kahan lecture\n+      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+\n+      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+      final double ratio = (x1 * x2 + y1 * y2 + z1 * z2) / FastMath.scalb(n2, 2 * deltaExp);\n+      final double rho   = FastMath.rint(256 * ratio) / 256;\n+\n+      final double x3 = x1 - rho * x2;\n+      final double y3 = y1 - rho * y2;\n+      final double z3 = z1 - rho * z2;\n+\n+      // compute cross product from v3 and v2 instead of v1 and v2\n+      return new Vector3D(y3 * z2 - z3 * y2, z3 * x2 - x3 * z2, x3 * y2 - y3 * x2);\n+\n   }\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n", 
  "project": "commons-math", 
  "linesAdd": 35, 
  "jira_id": "554", 
  "nb_skipped": 1, 
  "commit": "fbbb96eb", 
  "nb_failure": 1, 
  "linesRem": 4
}