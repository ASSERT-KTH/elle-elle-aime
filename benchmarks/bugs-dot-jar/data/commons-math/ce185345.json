{
  "files": 3, 
  "nb_test": 2119, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.commons.math.linear.ArrayRealVectorTest", 
    "org.apache.commons.math.linear.SparseRealVectorTest"
  ], 
  "patch": "diff --git a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\nindex cf103c066..ace4b8d21 100644\n--- a/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/AbstractRealVector.java\n@@ -205,6 +205,40 @@ public double getDistance(RealVector v) throws IllegalArgumentException {\n         return Math.sqrt(d);\n     }\n \n+    /** {@inheritDoc} */\n+    public double getNorm() {\n+        double sum = 0;\n+        Iterator<Entry> it = sparseIterator();\n+        Entry e;\n+        while (it.hasNext() && (e = it.next()) != null) {\n+            final double value = e.getValue();\n+            sum += value * value;\n+        }\n+        return Math.sqrt(sum);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double getL1Norm() {\n+        double norm = 0;\n+        Iterator<Entry> it = sparseIterator();\n+        Entry e;\n+        while (it.hasNext() && (e = it.next()) != null) {\n+            norm += Math.abs(e.getValue());\n+        }\n+        return norm;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double getLInfNorm() {\n+        double norm = 0;\n+        Iterator<Entry> it = sparseIterator();\n+        Entry e;\n+        while (it.hasNext() && (e = it.next()) != null) {\n+            norm = Math.max(norm, Math.abs(e.getValue()));\n+        }\n+        return norm;\n+    }\n+\n     /** {@inheritDoc} */\n     public double getDistance(double[] v) throws IllegalArgumentException {\n         return getDistance(new ArrayRealVector(v,false));\ndiff --git a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\nindex 45c091921..22d0a280f 100644\n--- a/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/ArrayRealVector.java\n@@ -694,6 +694,7 @@ public double dotProduct(ArrayRealVector v)\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public double getNorm() {\n         double sum = 0;\n         for (double a : data) {\n@@ -703,6 +704,7 @@ public double getNorm() {\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public double getL1Norm() {\n         double sum = 0;\n         for (double a : data) {\n@@ -712,10 +714,11 @@ public double getL1Norm() {\n     }\n \n     /** {@inheritDoc} */\n+    @Override\n     public double getLInfNorm() {\n         double max = 0;\n         for (double a : data) {\n-            max += Math.max(max, Math.abs(a));\n+            max = Math.max(max, Math.abs(a));\n         }\n         return max;\n     }\ndiff --git a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\nindex febea7a87..eb5be1b68 100644\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n@@ -495,17 +495,6 @@ public double getL1Distance(double[] v) throws IllegalArgumentException {\n         return max;\n     }\n \n-    /** {@inheritDoc} */\n-    public double getL1Norm() {\n-        double res = 0;\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            res += Math.abs(iter.value());\n-        }\n-        return res;\n-    }\n-\n     /**\n      * Optimized method to compute LInfDistance.\n      * @param v The vector to compute from\n@@ -556,28 +545,6 @@ public double getLInfDistance(double[] v) throws IllegalArgumentException {\n         return max;\n     }\n \n-    /** {@inheritDoc} */\n-    public double getLInfNorm() {\n-        double max = 0;\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            max += iter.value();\n-        }\n-        return max;\n-    }\n-\n-    /** {@inheritDoc} */\n-    public double getNorm() {\n-        double res = 0;\n-        Iterator iter = entries.iterator();\n-        while (iter.hasNext()) {\n-            iter.advance();\n-            res += iter.value() * iter.value();\n-        }\n-        return Math.sqrt(res);\n-    }\n-\n     /** {@inheritDoc} */\n     public boolean isInfinite() {\n         boolean infiniteFound = false;\n", 
  "project": "commons-math", 
  "linesAdd": 38, 
  "jira_id": "326", 
  "nb_skipped": 0, 
  "commit": "ce185345", 
  "nb_failure": 2, 
  "linesRem": 34
}