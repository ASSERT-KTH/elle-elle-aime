{
  "files": 3, 
  "nb_test": 2251, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.commons.math.optimization.univariate.BrentOptimizerTest", 
    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest"
  ], 
  "patch": "diff --git a/src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java b/src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java\nindex 883578b64..0c4eabeda 100644\n--- a/src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java\n+++ b/src/main/java/org/apache/commons/math/ConvergingAlgorithmImpl.java\n@@ -139,14 +139,14 @@ protected void resetIterationsCounter() {\n     /**\n      * Increment the iterations counter by 1.\n      *\n-     * @throws OptimizationException if the maximal number\n+     * @throws MaxIterationsExceededException if the maximal number\n      * of iterations is exceeded.\n      * @since 2.2\n      */\n     protected void incrementIterationsCounter()\n-        throws ConvergenceException {\n+        throws MaxIterationsExceededException {\n         if (++iterationCount > maximalIterationCount) {\n-            throw new ConvergenceException(new MaxIterationsExceededException(maximalIterationCount));\n+            throw new MaxIterationsExceededException(maximalIterationCount);\n         }\n     }\n }\ndiff --git a/src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java\nindex d312243bc..c6eeb53d0 100644\n--- a/src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer.java\n@@ -260,5 +260,6 @@ public double optimize(UnivariateRealFunction f, GoalType goal,\n      *\n      * @return the optimum.\n      */\n-    protected abstract double doOptimize();\n+    protected abstract double doOptimize()\n+        throws MaxIterationsExceededException, FunctionEvaluationException;\n }\ndiff --git a/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java b/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java\nindex 62f2fcb6a..46c4afae0 100644\n--- a/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java\n@@ -41,39 +41,37 @@\n      * Construct a solver.\n      */\n     public BrentOptimizer() {\n-        super(100, 1E-10);\n+        setMaxEvaluations(1000);\n+        setMaximalIterationCount(100);\n+        setAbsoluteAccuracy(1e-11);\n+        setRelativeAccuracy(1e-9);\n     }\n \n-    /** {@inheritDoc} */\n-    public double optimize(final UnivariateRealFunction f, final GoalType goalType,\n-                           final double min, final double max, final double startValue)\n+    /**\n+     * Perform the optimization.\n+     *\n+     * @return the optimum.\n+     */\n+    protected double doOptimize()\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        clearResult();\n-        return localMin(f, goalType, min, startValue, max,\n+        return localMin(getGoalType() == GoalType.MINIMIZE,\n+                        getMin(), getStartValue(), getMax(),\n                         getRelativeAccuracy(), getAbsoluteAccuracy());\n     }\n \n-    /** {@inheritDoc} */\n-    public double optimize(final UnivariateRealFunction f, final GoalType goalType,\n-                           final double min, final double max)\n-        throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min));\n-    }\n-\n     /**\n-     * Find the minimum of the function {@code f} within the interval {@code (a, b)}.\n+     * Find the minimum of the function within the interval {@code (lo, hi)}.\n      *\n-     * If the function {@code f} is defined on the interval {@code (a, b)}, then\n-     * this method finds an approximation {@code x} to the point at which {@code f}\n-     * attains its minimum.<br/>\n-     * {@code t} and {@code eps} define a tolerance {@code tol = eps |x| + t} and\n-     * {@code f} is never evaluated at two points closer together than {@code tol}.\n-     * {@code eps} should be no smaller than <em>2 macheps</em> and preferable not\n-     * much less than <em>sqrt(macheps)</em>, where <em>macheps</em> is the relative\n-     * machine precision. {@code t} should be positive.\n-     * @param f the function to solve.\n-     * @param goalType type of optimization goal: either {@link GoalType#MAXIMIZE}\n-     * or {@link GoalType#MINIMIZE}.\n+     * If the function is defined on the interval {@code (lo, hi)}, then\n+     * this method finds an approximation {@code x} to the point at which\n+     * the function attains its minimum.<br/>\n+     * {@code t} and {@code eps} define a tolerance {@code tol = eps |x| + t}\n+     * and the function is never evaluated at two points closer together than\n+     * {@code tol}. {@code eps} should be no smaller than <em>2 macheps</em> and\n+     * preferable not much less than <em>sqrt(macheps)</em>, where\n+     * <em>macheps</em> is the relative machine precision. {@code t} should be\n+     * positive.\n+     * @param isMinim {@code true} when minimizing the function.\n      * @param lo Lower bound of the interval.\n      * @param mid Point inside the interval {@code [lo, hi]}.\n      * @param hi Higher bound of the interval.\n@@ -85,8 +83,7 @@ public double optimize(final UnivariateRealFunction f, final GoalType goalType,\n      * @throws FunctionEvaluationException if an error occurs evaluating\n      * the function.\n      */\n-    private double localMin(UnivariateRealFunction f,\n-                            GoalType goalType,\n+    private double localMin(boolean isMinim,\n                             double lo, double mid, double hi,\n                             double eps, double t)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n@@ -108,16 +105,16 @@ private double localMin(UnivariateRealFunction f,\n         double x = mid;\n         double v = x;\n         double w = x;\n+        double d = 0;\n         double e = 0;\n-        double fx = computeObjectiveValue(f, x);\n-        if (goalType == GoalType.MAXIMIZE) {\n+        double fx = computeObjectiveValue(x);\n+        if (!isMinim) {\n             fx = -fx;\n         }\n         double fv = fx;\n         double fw = fx;\n \n-        int count = 0;\n-        while (count < maximalIterationCount) {\n+        while (true) {\n             double m = 0.5 * (a + b);\n             final double tol1 = eps * Math.abs(x) + t;\n             final double tol2 = 2 * tol1;\n@@ -127,7 +124,6 @@ private double localMin(UnivariateRealFunction f,\n                 double p = 0;\n                 double q = 0;\n                 double r = 0;\n-                double d = 0;\n                 double u = 0;\n \n                 if (Math.abs(e) > tol1) { // Fit parabola.\n@@ -191,8 +187,8 @@ private double localMin(UnivariateRealFunction f,\n                     u = x + d;\n                 }\n \n-                double fu = computeObjectiveValue(f, u);\n-                if (goalType == GoalType.MAXIMIZE) {\n+                double fu = computeObjectiveValue(u);\n+                if (!isMinim) {\n                     fu = -fu;\n                 }\n \n@@ -229,16 +225,10 @@ private double localMin(UnivariateRealFunction f,\n                     }\n                 }\n             } else { // termination\n-                setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);\n+                setFunctionValue(isMinim ? fx : -fx);\n                 return x;\n             }\n-            ++count;\n+            incrementIterationsCounter();\n         }\n-        throw new MaxIterationsExceededException(maximalIterationCount);\n-    }\n-\n-    /** Temporary workaround. */\n-    protected double doOptimize() {\n-        throw new UnsupportedOperationException();\n     }\n }\n", 
  "project": "commons-math", 
  "linesAdd": 37, 
  "jira_id": "395", 
  "nb_skipped": 0, 
  "commit": "962315ba", 
  "nb_failure": 4, 
  "linesRem": 46
}