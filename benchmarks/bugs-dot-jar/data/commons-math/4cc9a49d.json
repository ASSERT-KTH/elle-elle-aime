{
  "files": 2, 
  "nb_test": 2357, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.commons.math.distribution.PoissonDistributionTest"
  ], 
  "patch": "diff --git a/src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java b/src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java\nindex 6aca50999..d20eb53c5 100644\n--- a/src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java\n+++ b/src/main/java/org/apache/commons/math/distribution/PoissonDistribution.java\n@@ -40,18 +39,6 @@\n      */\n     double getMean();\n \n-    /**\n-     * Set the mean for the distribution.\n-     * The parameter value must be positive; otherwise an\n-     * <code>IllegalArgument</code> is thrown.\n-     *\n-     * @param p the mean\n-     * @throws IllegalArgumentException if p &le; 0\n-     * @deprecated as of v2.1\n-     */\n-    @Deprecated\n-    void setMean(double p);\n-\n     /**\n      * Calculates the Poisson distribution function using a normal approximation.\n      *\ndiff --git a/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\nindex 64f792b60..0a8123390 100644\n--- a/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n@@ -19,7 +19,7 @@\n import java.io.Serializable;\n \n import org.apache.commons.math.MathException;\n-import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.exception.NotStrictlyPositiveException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.special.Gamma;\n import org.apache.commons.math.util.MathUtils;\n@@ -77,7 +77,7 @@\n      * @throws IllegalArgumentException if p &le; 0\n      */\n     public PoissonDistributionImpl(double p) {\n-        this(p, new NormalDistributionImpl());\n+        this(p, DEFAULT_EPSILON, DEFAULT_MAX_ITERATIONS);\n     }\n \n     /**\n@@ -90,7 +90,11 @@ public PoissonDistributionImpl(double p) {\n      * @since 2.1\n      */\n     public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {\n-        setMean(p);\n+        if (p <= 0) {\n+            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+        }\n+        mean = p;\n+        normal = new NormalDistributionImpl(p, FastMath.sqrt(p));\n         this.epsilon = epsilon;\n         this.maxIterations = maxIterations;\n     }\n@@ -103,8 +107,7 @@ public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {\n      * @since 2.1\n      */\n     public PoissonDistributionImpl(double p, double epsilon) {\n-        setMean(p);\n-        this.epsilon = epsilon;\n+        this(p, epsilon, DEFAULT_MAX_ITERATIONS);\n     }\n \n     /**\n@@ -115,26 +118,7 @@ public PoissonDistributionImpl(double p, double epsilon) {\n      * @since 2.1\n      */\n     public PoissonDistributionImpl(double p, int maxIterations) {\n-        setMean(p);\n-        this.maxIterations = maxIterations;\n-    }\n-\n-\n-    /**\n-     * Create a new Poisson distribution with the given the mean. The mean value\n-     * must be positive; otherwise an <code>IllegalArgument</code> is thrown.\n-     *\n-     * @param p the Poisson mean\n-     * @param z a normal distribution used to compute normal approximations.\n-     * @throws IllegalArgumentException if p &le; 0\n-     * @since 1.2\n-     * @deprecated as of 2.1 (to avoid possibly inconsistent state, the\n-     * \"NormalDistribution\" will be instantiated internally)\n-     */\n-    @Deprecated\n-    public PoissonDistributionImpl(double p, NormalDistribution z) {\n-        super();\n-        setNormalAndMeanInternal(z, p);\n+        this(p, DEFAULT_EPSILON, maxIterations);\n     }\n \n     /**\n@@ -146,38 +130,6 @@ public double getMean() {\n         return mean;\n     }\n \n-    /**\n-     * Set the Poisson mean for the distribution. The mean value must be\n-     * positive; otherwise an <code>IllegalArgument</code> is thrown.\n-     *\n-     * @param p the Poisson mean value\n-     * @throws IllegalArgumentException if p &le; 0\n-     * @deprecated as of 2.1 (class will become immutable in 3.0)\n-     */\n-    @Deprecated\n-    public void setMean(double p) {\n-        setNormalAndMeanInternal(normal, p);\n-    }\n-    /**\n-     * Set the Poisson mean for the distribution. The mean value must be\n-     * positive; otherwise an <code>IllegalArgument</code> is thrown.\n-     *\n-     * @param z the new distribution\n-     * @param p the Poisson mean value\n-     * @throws IllegalArgumentException if p &le; 0\n-     */\n-    private void setNormalAndMeanInternal(NormalDistribution z,\n-                                          double p) {\n-        if (p <= 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                    LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);\n-        }\n-        mean = p;\n-        normal = z;\n-        normal.setMean(p);\n-        normal.setStandardDeviation(FastMath.sqrt(p));\n-    }\n-\n     /**\n      * The probability mass function P(X = x) for a Poisson distribution.\n      *\n@@ -286,18 +238,4 @@ protected int getDomainLowerBound(double p) {\n     protected int getDomainUpperBound(double p) {\n         return Integer.MAX_VALUE;\n     }\n-\n-    /**\n-     * Modify the normal distribution used to compute normal approximations. The\n-     * caller is responsible for insuring the normal distribution has the proper\n-     * parameter settings.\n-     *\n-     * @param value the new distribution\n-     * @since 1.2\n-     * @deprecated as of 2.1 (class will become immutable in 3.0)\n-     */\n-    @Deprecated\n-    public void setNormal(NormalDistribution value) {\n-        setNormalAndMeanInternal(value, mean);\n-    }\n }\n", 
  "project": "commons-math", 
  "linesAdd": 9, 
  "jira_id": "349", 
  "nb_skipped": 1, 
  "commit": "4cc9a49d", 
  "nb_failure": 0, 
  "linesRem": 83
}