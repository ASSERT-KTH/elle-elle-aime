{
  "files": 1, 
  "nb_test": 2949, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.commons.math.complex.ComplexTest"
  ], 
  "patch": "diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java\nindex ac31e4b1b..137765c85 100644\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -78,6 +78,8 @@\n     private final transient boolean isNaN;\n     /** Record whether this complex number is infinite. */\n     private final transient boolean isInfinite;\n+    /** Record whether this complex number is zero. */\n+    private final transient boolean isZero;\n \n     /**\n      * Create a complex number given only the real part.\n@@ -101,6 +103,7 @@ public Complex(double real, double imaginary) {\n         isNaN = Double.isNaN(real) || Double.isNaN(imaginary);\n         isInfinite = !isNaN &&\n             (Double.isInfinite(real) || Double.isInfinite(imaginary));\n+        isZero = real == 0 && imaginary == 0;\n     }\n \n     /**\n@@ -222,7 +225,10 @@ public Complex conjugate() {\n      *  <li>If either {@code this} or {@code divisor} has a {@code NaN} value\n      *   in either part, {@link #NaN} is returned.\n      *  </li>\n-     *  <li>If {@code divisor} equals {@link #ZERO}, {@link #NaN} is returned.\n+     *  <li>If {@code this} and {@code divisor} are both {@link #ZERO},\n+     *   {@link #NaN} is returned.\n+     *  </li>\n+     *  <li>If {@code divisor} equals {@link #ZERO}, {@link #INF} is returned.\n      *  </li>\n      *  <li>If {@code this} and {@code divisor} are both infinite,\n      *   {@link #NaN} is returned.\n@@ -249,16 +255,17 @@ public Complex divide(Complex divisor)\n             return NaN;\n         }\n \n-        final double c = divisor.getReal();\n-        final double d = divisor.getImaginary();\n-        if (c == 0.0 && d == 0.0) {\n-            return NaN;\n+        if (divisor.isZero) {\n+            return isZero ? NaN : INF;\n         }\n \n         if (divisor.isInfinite() && !isInfinite()) {\n             return ZERO;\n         }\n \n+        final double c = divisor.getReal();\n+        final double d = divisor.getImaginary();\n+\n         if (FastMath.abs(c) < FastMath.abs(d)) {\n             double q = c / d;\n             double denominator = c * q + d;\n@@ -285,7 +292,7 @@ public Complex divide(double divisor) {\n             return NaN;\n         }\n         if (divisor == 0d) {\n-            return NaN;\n+            return isZero ? NaN : INF;\n         }\n         if (Double.isInfinite(divisor)) {\n             return !isInfinite() ? ZERO : NaN;\n", 
  "project": "commons-math", 
  "linesAdd": 13, 
  "jira_id": "657", 
  "nb_skipped": 1, 
  "commit": "32b0f733", 
  "nb_failure": 2, 
  "linesRem": 6
}