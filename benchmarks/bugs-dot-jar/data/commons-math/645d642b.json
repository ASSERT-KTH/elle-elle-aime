{
  "files": 11, 
  "nb_test": 3095, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest", 
    "org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest", 
    "org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest", 
    "org.apache.commons.math.ode.events.ReappearingEventTest", 
    "org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest", 
    "org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest", 
    "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest", 
    "org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest"
  ], 
  "patch": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java\nindex 42796c755..baf236a52 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaStepInterpolator.java\n@@ -48,7 +48,7 @@\n     extends RungeKuttaStepInterpolator {\n \n     /** Serializable version identifier. */\n-    private static final long serialVersionUID = 20110928L;\n+    private static final long serialVersionUID = 20111120L;\n \n     /** Simple constructor.\n      * This constructor builds an instance that is not usable yet, the\ndiff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java\nindex af32c4c01..1dac8ab30 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince54StepInterpolator.java\n@@ -72,7 +72,7 @@\n     private static final double D6 =      69997945.0 /     29380423.0;\n \n     /** Serializable version identifier. */\n-    private static final long serialVersionUID = 20110928L;\n+    private static final long serialVersionUID = 20111120L;\n \n     /** First vector for interpolation. */\n     private double[] v1;\ndiff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\nindex 91442bbf2..64dd7d77b 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator.java\n@@ -39,7 +39,7 @@\n   extends RungeKuttaStepInterpolator {\n \n     /** Serializable version identifier. */\n-    private static final long serialVersionUID = 20110928L;\n+    private static final long serialVersionUID = 20111120L;\n \n     /** Propagation weights, element 1. */\n     private static final double B_01 =         104257.0 / 1920240.0;\n@@ -368,6 +368,21 @@ protected void computeInterpolatedStateAndDerivatives(final double theta,\n     final double dot5 = theta2 * (3 + theta * (-12 + theta * (15 - 6 * theta)));\n     final double dot6 = theta2 * theta * (4 + theta * (-15 + theta * (18 - 7 * theta)));\n \n+    if ((previousState != null) && (theta <= 0.5)) {\n+        for (int i = 0; i < interpolatedState.length; ++i) {\n+            interpolatedState[i] = previousState[i] +\n+                    theta * h * (v[0][i] +\n+                            eta * (v[1][i] +\n+                                    theta * (v[2][i] +\n+                                            eta * (v[3][i] +\n+                                                    theta * (v[4][i] +\n+                                                            eta * (v[5][i] +\n+                                                                    theta * (v[6][i])))))));\n+            interpolatedDerivatives[i] =  v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] +\n+                    dot3 * v[3][i] + dot4 * v[4][i] +\n+                    dot5 * v[5][i] + dot6 * v[6][i];\n+        }\n+    } else {\n         for (int i = 0; i < interpolatedState.length; ++i) {\n             interpolatedState[i] = currentState[i] -\n                     oneMinusThetaH * (v[0][i] -\n@@ -381,6 +396,7 @@ protected void computeInterpolatedStateAndDerivatives(final double theta,\n                     dot3 * v[3][i] + dot4 * v[4][i] +\n                     dot5 * v[5][i] + dot6 * v[6][i];\n         }\n+    }\n \n   }\n \ndiff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 87fd71602..34d2c0073 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -202,7 +202,7 @@ public void integrate(final ExpandableStatefulODE equations, final double t)\n     final double[] y = y0.clone();\n     final int stages = c.length + 1;\n     final double[][] yDotK = new double[stages][y.length];\n-    final double[] yTmp    = new double[y.length];\n+    final double[] yTmp    = y0.clone();\n     final double[] yDotTmp = new double[y.length];\n \n     // set up an interpolator sharing the integrator arrays\n@@ -294,6 +294,7 @@ public void integrate(final ExpandableStatefulODE equations, final double t)\n       System.arraycopy(yTmp, 0, y, 0, y0.length);\n       System.arraycopy(yDotK[stages - 1], 0, yDotTmp, 0, y0.length);\n       stepStart = acceptStep(interpolator, y, yDotTmp, t);\n+      System.arraycopy(y, 0, yTmp, 0, y.length);\n \n       if (!isLastStep) {\n \ndiff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java\nindex 99a604f3b..d2807a465 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EulerStepInterpolator.java\n@@ -42,7 +42,7 @@\n   extends RungeKuttaStepInterpolator {\n \n   /** Serializable version identifier. */\n-  private static final long serialVersionUID = 20110928L;\n+  private static final long serialVersionUID = 20111120L;\n \n   /** Simple constructor.\n    * This constructor builds an instance that is not usable yet, the\ndiff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java\nindex e956b200e..537775556 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/GillStepInterpolator.java\n@@ -54,7 +54,7 @@\n     private static final double TWO_PLUS_SQRT_2 = 2 + FastMath.sqrt(2.0);\n \n     /** Serializable version identifier. */\n-    private static final long serialVersionUID = 20110928L;\n+    private static final long serialVersionUID = 20111120L;\n \n   /** Simple constructor.\n    * This constructor builds an instance that is not usable yet, the\ndiff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java\nindex ba112d449..b928b53ab 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/HighamHall54StepInterpolator.java\n@@ -33,7 +33,7 @@\n   extends RungeKuttaStepInterpolator {\n \n   /** Serializable version identifier */\n-  private static final long serialVersionUID = 20110928L;\n+  private static final long serialVersionUID = 20111120L;\n \n   /** Simple constructor.\n    * This constructor builds an instance that is not usable yet, the\ndiff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java\nindex 1c7648365..25f77c543 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/MidpointStepInterpolator.java\n@@ -44,7 +44,7 @@\n   extends RungeKuttaStepInterpolator {\n \n   /** Serializable version identifier */\n-  private static final long serialVersionUID = 20110928L;\n+  private static final long serialVersionUID = 20111120L;\n \n   /** Simple constructor.\n    * This constructor builds an instance that is not usable yet, the\ndiff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\nindex fb82d0c9e..c51620c17 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\n@@ -107,7 +107,7 @@ public void integrate(final ExpandableStatefulODE equations, final double t)\n     for (int i = 0; i < stages; ++i) {\n       yDotK [i] = new double[y0.length];\n     }\n-    final double[] yTmp    = new double[y0.length];\n+    final double[] yTmp    = y0.clone();\n     final double[] yDotTmp = new double[y0.length];\n \n     // set up an interpolator sharing the integrator arrays\ndiff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java\nindex 987dfb1f3..55146c32c 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator.java\n@@ -38,6 +38,9 @@\n abstract class RungeKuttaStepInterpolator\n   extends AbstractStepInterpolator {\n \n+    /** Previous state. */\n+    protected double[] previousState;\n+\n     /** Slopes at the intermediate points */\n     protected double[][] yDotK;\n \n@@ -55,7 +58,7 @@\n    * uninitialized model and latter initializing the copy.\n    */\n   protected RungeKuttaStepInterpolator() {\n-    super();\n+    previousState = null;\n     yDotK         = null;\n     integrator    = null;\n   }\n@@ -82,16 +85,16 @@ public RungeKuttaStepInterpolator(final RungeKuttaStepInterpolator interpolator)\n     super(interpolator);\n \n     if (interpolator.currentState != null) {\n-      final int dimension = currentState.length;\n+\n+      previousState = interpolator.previousState.clone();\n \n       yDotK = new double[interpolator.yDotK.length][];\n       for (int k = 0; k < interpolator.yDotK.length; ++k) {\n-        yDotK[k] = new double[dimension];\n-        System.arraycopy(interpolator.yDotK[k], 0,\n-                         yDotK[k], 0, dimension);\n+        yDotK[k] = interpolator.yDotK[k].clone();\n       }\n \n     } else {\n+      previousState = null;\n       yDotK = null;\n     }\n \n@@ -129,10 +132,18 @@ public void reinitialize(final AbstractIntegrator rkIntegrator,\n                            final EquationsMapper primaryMapper,\n                            final EquationsMapper[] secondaryMappers) {\n     reinitialize(y, forward, primaryMapper, secondaryMappers);\n+    this.previousState = null;\n     this.yDotK = yDotArray;\n     this.integrator = rkIntegrator;\n   }\n \n+  /** {@inheritDoc} */\n+  @Override\n+  public void shift() {\n+    previousState = currentState.clone();\n+    super.shift();\n+  }\n+\n   /** {@inheritDoc} */\n   @Override\n   public void writeExternal(final ObjectOutput out)\n@@ -143,6 +154,10 @@ public void writeExternal(final ObjectOutput out)\n \n     // save the local attributes\n     final int n = (currentState == null) ? -1 : currentState.length;\n+    for (int i = 0; i < n; ++i) {\n+      out.writeDouble(previousState[i]);\n+    }\n+\n     final int kMax = (yDotK == null) ? -1 : yDotK.length;\n     out.writeInt(kMax);\n     for (int k = 0; k < kMax; ++k) {\n@@ -165,6 +180,15 @@ public void readExternal(final ObjectInput in)\n \n     // read the local attributes\n     final int n = (currentState == null) ? -1 : currentState.length;\n+    if (n < 0) {\n+      previousState = null;\n+    } else {\n+      previousState = new double[n];\n+      for (int i = 0; i < n; ++i) {\n+        previousState[i] = in.readDouble();\n+      }\n+    }\n+\n     final int kMax = in.readInt();\n     yDotK = (kMax < 0) ? null : new double[kMax][];\n     for (int k = 0; k < kMax; ++k) {\ndiff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java\nindex 731ec444c..fdc9d757c 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/ThreeEighthesStepInterpolator.java\n@@ -49,7 +49,7 @@\n   extends RungeKuttaStepInterpolator {\n \n   /** Serializable version identifier */\n-  private static final long serialVersionUID = 20110928L;\n+  private static final long serialVersionUID = 20111120L;\n \n   /** Simple constructor.\n    * This constructor builds an instance that is not usable yet, the\n", 
  "project": "commons-math", 
  "linesAdd": 56, 
  "jira_id": "705", 
  "nb_skipped": 1, 
  "commit": "645d642b", 
  "nb_failure": 8, 
  "linesRem": 15
}