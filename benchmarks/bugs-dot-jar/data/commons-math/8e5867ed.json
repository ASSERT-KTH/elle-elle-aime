{
  "files": 1, 
  "nb_test": 5472, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.commons.math3.util.PrecisionTest"
  ], 
  "patch": "diff --git a/src/main/java/org/apache/commons/math3/util/Precision.java b/src/main/java/org/apache/commons/math3/util/Precision.java\nindex ef3b57f39..f0b0c4ff7 100644\n--- a/src/main/java/org/apache/commons/math3/util/Precision.java\n+++ b/src/main/java/org/apache/commons/math3/util/Precision.java\n@@ -491,8 +491,7 @@ private static double roundUnscaled(double unscaled,\n                 unscaled = FastMath.floor(unscaled);\n             } else {\n                 // The following equality test is intentional and needed for rounding purposes\n-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math\n-                    .floor(unscaled) / 2.0)) { // even\n+                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(FastMath.floor(unscaled) / 2.0)) { // even\n                     unscaled = FastMath.floor(unscaled);\n                 } else { // odd\n                     unscaled = FastMath.ceil(unscaled);\n@@ -516,7 +515,10 @@ private static double roundUnscaled(double unscaled,\n             }\n             break;\n         case BigDecimal.ROUND_UP :\n+            // do not round if the discarded fraction is equal to zero\n+            if (unscaled != FastMath.floor(unscaled)) {\n                 unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));\n+            }\n             break;\n         default :\n             throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,\n", 
  "project": "commons-math", 
  "linesAdd": 4, 
  "jira_id": "1070", 
  "nb_skipped": 5, 
  "commit": "8e5867ed", 
  "nb_failure": 1, 
  "linesRem": 2
}