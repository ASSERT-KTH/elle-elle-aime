{
  "files": 4, 
  "nb_test": 2272, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.commons.math.stat.StatUtilsTest", 
    "org.apache.commons.math.stat.descriptive.summary.ProductTest", 
    "org.apache.commons.math.stat.descriptive.summary.SumTest", 
    "org.apache.commons.math.stat.descriptive.summary.SumLogTest", 
    "org.apache.commons.math.stat.descriptive.summary.SumSqTest"
  ], 
  "patch": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java\nindex da6e3809d..f9796b458 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Product.java\n@@ -25,7 +25,8 @@\n /**\n  * Returns the product of the available values.\n  * <p>\n- * If there are no values in the dataset, or any of the values are\n+ * If there are no values in the dataset, then 1 is returned.\n+ *  If any of the values are\n  * <code>NaN</code>, then <code>NaN</code> is returned.</p>\n  * <p>\n  * <strong>Note that this implementation is not synchronized.</strong> If\n@@ -53,7 +54,7 @@\n      */\n     public Product() {\n         n = 0;\n-        value = Double.NaN;\n+        value = 1;\n     }\n \n     /**\n@@ -71,11 +72,7 @@ public Product(Product original) {\n      */\n     @Override\n     public void increment(final double d) {\n-        if (n == 0) {\n-            value = d;\n-        } else {\n         value *= d;\n-        }\n         n++;\n     }\n \n@@ -99,7 +96,7 @@ public long getN() {\n      */\n     @Override\n     public void clear() {\n-        value = Double.NaN;\n+        value = 1;\n         n = 0;\n     }\n \n@@ -113,14 +110,14 @@ public void clear() {\n      * @param values the input array\n      * @param begin index of the first array element to include\n      * @param length the number of elements to include\n-     * @return the product of the values or Double.NaN if length = 0\n+     * @return the product of the values or 1 if length = 0\n      * @throws IllegalArgumentException if the array is null or the array index\n      *  parameters are not valid\n      */\n     @Override\n     public double evaluate(final double[] values, final int begin, final int length) {\n         double product = Double.NaN;\n-        if (test(values, begin, length)) {\n+        if (test(values, begin, length, true)) {\n             product = 1.0;\n             for (int i = begin; i < begin + length; i++) {\n                 product *= values[i];\n@@ -153,14 +150,14 @@ public double evaluate(final double[] values, final int begin, final int length)\n      * @param weights the weights array\n      * @param begin index of the first array element to include\n      * @param length the number of elements to include\n-     * @return the product of the values or Double.NaN if length = 0\n+     * @return the product of the values or 1 if length = 0\n      * @throws IllegalArgumentException if the parameters are not valid\n      * @since 2.1\n      */\n     public double evaluate(final double[] values, final double[] weights,\n                            final int begin, final int length) {\n         double product = Double.NaN;\n-        if (test(values, weights, begin, length)) {\n+        if (test(values, weights, begin, length, true)) {\n             product = 1.0;\n             for (int i = begin; i < begin + length; i++) {\n                 product *= FastMath.pow(values[i], weights[i]);\ndiff --git a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\nindex 2b0fd9b75..3543575de 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/Sum.java\n@@ -24,7 +24,8 @@\n /**\n   * Returns the sum of the available values.\n  * <p>\n- * If there are no values in the dataset, or any of the values are\n+ * If there are no values in the dataset, then 0 is returned. \n+ * If any of the values are\n  * <code>NaN</code>, then <code>NaN</code> is returned.</p>\n  * <p>\n  * <strong>Note that this implementation is not synchronized.</strong> If\n@@ -52,7 +53,7 @@\n      */\n     public Sum() {\n         n = 0;\n-        value = Double.NaN;\n+        value = 0;\n     }\n \n     /**\n@@ -70,11 +71,7 @@ public Sum(Sum original) {\n      */\n     @Override\n     public void increment(final double d) {\n-        if (n == 0) {\n-            value = d;\n-        } else {\n         value += d;\n-        }\n         n++;\n     }\n \n@@ -98,13 +95,13 @@ public long getN() {\n      */\n     @Override\n     public void clear() {\n-        value = Double.NaN;\n+        value = 0;\n         n = 0;\n     }\n \n     /**\n      * The sum of the entries in the specified portion of\n-     * the input array, or <code>Double.NaN</code> if the designated subarray\n+     * the input array, or 0 if the designated subarray\n      * is empty.\n      * <p>\n      * Throws <code>IllegalArgumentException</code> if the array is null.</p>\n@@ -112,14 +109,14 @@ public void clear() {\n      * @param values the input array\n      * @param begin index of the first array element to include\n      * @param length the number of elements to include\n-     * @return the sum of the values or Double.NaN if length = 0\n+     * @return the sum of the values or 0 if length = 0\n      * @throws IllegalArgumentException if the array is null or the array index\n      *  parameters are not valid\n      */\n     @Override\n     public double evaluate(final double[] values, final int begin, final int length) {\n         double sum = Double.NaN;\n-        if (test(values, begin, length)) {\n+        if (test(values, begin, length, true)) {\n             sum = 0.0;\n             for (int i = begin; i < begin + length; i++) {\n                 sum += values[i];\n@@ -130,7 +127,7 @@ public double evaluate(final double[] values, final int begin, final int length)\n \n     /**\n      * The weighted sum of the entries in the specified portion of\n-     * the input array, or <code>Double.NaN</code> if the designated subarray\n+     * the input array, or 0 if the designated subarray\n      * is empty.\n      * <p>\n      * Throws <code>IllegalArgumentException</code> if any of the following are true:\n@@ -151,14 +148,14 @@ public double evaluate(final double[] values, final int begin, final int length)\n      * @param weights the weights array\n      * @param begin index of the first array element to include\n      * @param length the number of elements to include\n-     * @return the sum of the values or Double.NaN if length = 0\n+     * @return the sum of the values or 0 if length = 0\n      * @throws IllegalArgumentException if the parameters are not valid\n      * @since 2.1\n      */\n     public double evaluate(final double[] values, final double[] weights,\n                            final int begin, final int length) {\n         double sum = Double.NaN;\n-        if (test(values, weights, begin, length)) {\n+        if (test(values, weights, begin, length, true)) {\n             sum = 0.0;\n             for (int i = begin; i < begin + length; i++) {\n                 sum += values[i] * weights[i];\ndiff --git a/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java b/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java\nindex b4280cc82..24960e3d4 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfLogs.java\n@@ -24,7 +24,7 @@\n /**\n  * Returns the sum of the natural logs for this collection of values.\n  * <p>\n- * Uses {@link java.lang.Math#log(double)} to compute the logs.  Therefore,\n+ * Uses {@link org.apache.commons.Math.util.FastMath#log(double)} to compute the logs.  Therefore,\n  * <ul>\n  * <li>If any of values are < 0, the result is <code>NaN.</code></li>\n  * <li>If all values are non-negative and less than\n@@ -87,11 +87,7 @@ public void increment(final double d) {\n      */\n     @Override\n     public double getResult() {\n-        if (n > 0) {\n         return value;\n-        } else {\n-            return Double.NaN;\n-        }\n     }\n \n     /**\n@@ -122,7 +118,7 @@ public void clear() {\n      * @param values the input array\n      * @param begin index of the first array element to include\n      * @param length the number of elements to include\n-     * @return the sum of the natural logs of the values or Double.NaN if\n+     * @return the sum of the natural logs of the values or 0 if\n      * length = 0\n      * @throws IllegalArgumentException if the array is null or the array index\n      *  parameters are not valid\n@@ -130,7 +126,7 @@ public void clear() {\n     @Override\n     public double evaluate(final double[] values, final int begin, final int length) {\n         double sumLog = Double.NaN;\n-        if (test(values, begin, length)) {\n+        if (test(values, begin, length, true)) {\n             sumLog = 0.0;\n             for (int i = begin; i < begin + length; i++) {\n                 sumLog += FastMath.log(values[i]);\ndiff --git a/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java b/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java\nindex a1429f974..36a216817 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/summary/SumOfSquares.java\n@@ -23,7 +23,8 @@\n /**\n  * Returns the sum of the squares of the available values.\n  * <p>\n- * If there are no values in the dataset, or any of the values are\n+ * If there are no values in the dataset, then 0 is returned.\n+ * If any of the values are\n  * <code>NaN</code>, then <code>NaN</code> is returned.</p>\n  * <p>\n  * <strong>Note that this implementation is not synchronized.</strong> If\n@@ -51,7 +52,7 @@\n      */\n     public SumOfSquares() {\n         n = 0;\n-        value = Double.NaN;\n+        value = 0;\n     }\n \n     /**\n@@ -69,11 +70,7 @@ public SumOfSquares(SumOfSquares original) {\n      */\n     @Override\n     public void increment(final double d) {\n-        if (n == 0) {\n-            value = d * d;\n-        } else {\n         value += d * d;\n-        }\n         n++;\n     }\n \n@@ -97,7 +94,7 @@ public long getN() {\n      */\n     @Override\n     public void clear() {\n-        value = Double.NaN;\n+        value = 0;\n         n = 0;\n     }\n \n@@ -111,14 +108,14 @@ public void clear() {\n      * @param values the input array\n      * @param begin index of the first array element to include\n      * @param length the number of elements to include\n-     * @return the sum of the squares of the values or Double.NaN if length = 0\n+     * @return the sum of the squares of the values or 0 if length = 0\n      * @throws IllegalArgumentException if the array is null or the array index\n      *  parameters are not valid\n      */\n     @Override\n     public double evaluate(final double[] values,final int begin, final int length) {\n         double sumSq = Double.NaN;\n-        if (test(values, begin, length)) {\n+        if (test(values, begin, length, true)) {\n             sumSq = 0.0;\n             for (int i = begin; i < begin + length; i++) {\n                 sumSq += values[i] * values[i];\n", 
  "project": "commons-math", 
  "linesAdd": 27, 
  "jira_id": "373", 
  "nb_skipped": 0, 
  "commit": "bfe4623c", 
  "nb_failure": 15, 
  "linesRem": 40
}