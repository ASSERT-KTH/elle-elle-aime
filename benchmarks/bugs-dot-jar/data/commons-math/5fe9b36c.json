{
  "files": 1, 
  "nb_test": 2209, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.commons.math.distribution.NormalDistributionTest"
  ], 
  "patch": "diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 456555bf3..0d7ce7da3 100644\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -114,26 +114,20 @@ public double density(double x) {\n \n     /**\n      * For this distribution, {@code X}, this method returns {@code P(X < x)}.\n+     * If {@code x}is more than 40 standard deviations from the mean, 0 or 1 is returned,\n+     * as in these cases the actual value is within {@code Double.MIN_VALUE} of 0 or 1.\n      *\n      * @param x Value at which the CDF is evaluated.\n      * @return CDF evaluated at {@code x}.\n-     * @throws MathException if the algorithm fails to converge; unless\n-     * {@code x} is more than 20 standard deviations from the mean, in which\n-     * case the convergence exception is caught and 0 or 1 is returned.\n+     * @throws MathException if the algorithm fails to converge\n      */\n     public double cumulativeProbability(double x) throws MathException {\n-        try {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * FastMath.sqrt(2.0))));\n-        } catch (MaxIterationsExceededException ex) {\n-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n-                return 0;\n-            } else if (x > (mean + 20 * standardDeviation)) {\n-                return 1;\n-            } else {\n-                throw ex;\n-            }\n+        final double dev = x - mean;\n+        if (FastMath.abs(dev) > 40 * standardDeviation) { \n+            return dev < 0 ? 0.0d : 1.0d;\n         }\n+        return 0.5 * (1.0 + Erf.erf((dev) /\n+                    (standardDeviation * FastMath.sqrt(2.0))));\n     }\n \n     /**\n", 
  "project": "commons-math", 
  "linesAdd": 8, 
  "jira_id": "414", 
  "nb_skipped": 1, 
  "commit": "5fe9b36c", 
  "nb_failure": 0, 
  "linesRem": 14
}