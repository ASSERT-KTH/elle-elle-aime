{
  "files": 1, 
  "nb_test": 1411, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.wicket.markup.html.basic.SimplePageTest"
  ], 
  "patch": "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/html/internal/HtmlHeaderContainer.java b/wicket-core/src/main/java/org/apache/wicket/markup/html/internal/HtmlHeaderContainer.java\nindex dc5d080cbe..42e63b68cd 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/markup/html/internal/HtmlHeaderContainer.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/markup/html/internal/HtmlHeaderContainer.java\n@@ -30,12 +30,10 @@\n import org.apache.wicket.markup.WicketTag;\n import org.apache.wicket.markup.head.IHeaderResponse;\n import org.apache.wicket.markup.head.PageHeaderItem;\n-import org.apache.wicket.markup.head.StringHeaderItem;\n import org.apache.wicket.markup.head.internal.HeaderResponse;\n import org.apache.wicket.markup.html.TransparentWebMarkupContainer;\n import org.apache.wicket.markup.renderStrategy.AbstractHeaderRenderStrategy;\n import org.apache.wicket.request.Response;\n-import org.apache.wicket.request.cycle.RequestCycle;\n import org.apache.wicket.response.StringResponse;\n \n \n@@ -227,7 +225,7 @@ public void renderHeaderTagBody(HeaderStreamState headerStreamState)\n \t\t\tCharSequence bodyOutput = getCleanResponse(bodyResponse);\n \t\t\tif (bodyOutput.length() > 0)\n \t\t\t{\n-\t\t\t\tgetHeaderResponse().render(StringHeaderItem.forString(bodyOutput));\n+\t\t\t\tgetHeaderResponse().render(new PageHeaderItem(bodyOutput));\n \t\t\t}\n \t\t}\n \t\tfinally\n@@ -354,32 +352,6 @@ public IHeaderResponse getHeaderResponse()\n \t\treturn headerResponse;\n \t}\n \n-\t/**\n-\t * THIS METHOD IS NOT PART OF THE WICKET PUBLIC API. DO NOT USE IT.\n-\t * \n-\t * Temporarily replaces the response with a StringResponse to capture the header output for this\n-\t * part of the stream and pass it to {@link IHeaderResponse}.\n-\t * \n-\t * @see org.apache.wicket.MarkupContainer#renderNext(org.apache.wicket.markup.MarkupStream)\n-\t */\n-\t@Override\n-\tprotected final boolean renderNext(MarkupStream markupStream)\n-\t{\n-\t\tStringResponse markupHeaderResponse = new StringResponse();\n-\t\tResponse oldResponse = getResponse();\n-\t\tRequestCycle.get().setResponse(markupHeaderResponse);\n-\t\ttry\n-\t\t{\n-\t\t\tboolean ret = super.renderNext(markupStream);\n-\t\t\tgetHeaderResponse().render(new PageHeaderItem(markupHeaderResponse.getBuffer()));\n-\t\t\treturn ret;\n-\t\t}\n-\t\tfinally\n-\t\t{\n-\t\t\tRequestCycle.get().setResponse(oldResponse);\n-\t\t}\n-\t}\n-\n \t@Override\n \tpublic IMarkupFragment getMarkup()\n \t{\n", 
  "project": "wicket", 
  "linesAdd": 1, 
  "jira_id": "4766", 
  "nb_skipped": 5, 
  "commit": "cda34428", 
  "nb_failure": 1, 
  "linesRem": 29
}