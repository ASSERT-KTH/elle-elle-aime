{
  "files": 3, 
  "nb_test": 784, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.wicket.PageParametersTest", 
    "org.apache.wicket.util.value.ValueMapTest"
  ], 
  "patch": "diff --git a/wicket/src/main/java/org/apache/wicket/PageParameters.java b/wicket/src/main/java/org/apache/wicket/PageParameters.java\nindex 95d1a48100..0a865f2c1f 100644\n--- a/wicket/src/main/java/org/apache/wicket/PageParameters.java\n+++ b/wicket/src/main/java/org/apache/wicket/PageParameters.java\n@@ -123,14 +123,14 @@ else if (pos != -1)\n \t\t\t\tfinal String key = pair.substring(0, pos).trim();\n \t\t\t\tfinal String value = pair.substring(pos + 1).trim();\n \n-\t\t\t\tput(key, value);\n+\t\t\t\tadd(key, value);\n \t\t\t}\n \t\t\telse\n \t\t\t{\n \t\t\t\tfinal String key = pair.trim();\n \t\t\t\tfinal String value = null;\n \n-\t\t\t\tput(key, value);\n+\t\t\t\tadd(key, value);\n \t\t\t}\n \t\t}\n \t}\ndiff --git a/wicket/src/main/java/org/apache/wicket/Resource.java b/wicket/src/main/java/org/apache/wicket/Resource.java\nindex 85c39aaeaf..78e62b058d 100644\n--- a/wicket/src/main/java/org/apache/wicket/Resource.java\n+++ b/wicket/src/main/java/org/apache/wicket/Resource.java\n@@ -149,7 +149,7 @@ public final Resource setCacheable(boolean cacheable)\n \t * @param parameters\n \t *            Map of query parameters that parameterize this resource\n \t */\n-\tpublic final void setParameters(final Map<?, ?> parameters)\n+\tpublic final void setParameters(final Map<String, ?> parameters)\n \t{\n \t\tif (parameters == null)\n \t\t{\ndiff --git a/wicket/src/main/java/org/apache/wicket/util/value/ValueMap.java b/wicket/src/main/java/org/apache/wicket/util/value/ValueMap.java\nindex 3e72e8f7ba..5b5062ba5a 100644\n--- a/wicket/src/main/java/org/apache/wicket/util/value/ValueMap.java\n+++ b/wicket/src/main/java/org/apache/wicket/util/value/ValueMap.java\n@@ -20,7 +20,6 @@\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.util.Arrays;\n-import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n@@ -91,7 +90,7 @@ public ValueMap()\n \t * @param map\n \t *            the <code>ValueMap</code> to copy\n \t */\n-\tpublic ValueMap(final Map map)\n+\tpublic ValueMap(final Map<? extends String, ? extends Object> map)\n \t{\n \t\tsuper();\n \n@@ -152,7 +151,7 @@ public ValueMap(final String keyValuePairs, final String delimiter)\n \t\t\t}\n \t\t\tString key = keyValuePairs.substring(start, equalsIndex);\n \t\t\tString value = keyValuePairs.substring(equalsIndex + 1, delimiterIndex);\n-\t\t\tput(key, value);\n+\t\t\tadd(key, value);\n \t\t\tif (delimiterIndex < keyValuePairs.length())\n \t\t\t{\n \t\t\t\tstart = delimiterIndex + 1;\n@@ -490,7 +489,7 @@ else if (o.getClass().isArray())\n \t * @see java.util.Map#putAll(java.util.Map)\n \t */\n \t@Override\n-\tpublic void putAll(final Map map)\n+\tpublic void putAll(final Map<? extends String, ? extends Object> map)\n \t{\n \t\tcheckMutability();\n \t\tsuper.putAll(map);\n@@ -535,9 +534,15 @@ public String getKey(final String key)\n \tpublic String toString()\n \t{\n \t\tfinal StringBuffer buffer = new StringBuffer();\n-\t\tfor (final Iterator iterator = entrySet().iterator(); iterator.hasNext();)\n+\t\tboolean first = true;\n+\t\tfor (Map.Entry<String, Object> entry : entrySet())\n \t\t{\n-\t\t\tfinal Map.Entry entry = (Map.Entry)iterator.next();\n+\t\t\tif (first == false)\n+\t\t\t{\n+\t\t\t\tbuffer.append(' ');\n+\t\t\t}\n+\t\t\tfirst = false;\n+\n \t\t\tbuffer.append(entry.getKey());\n \t\t\tbuffer.append(\" = \\\"\");\n \t\t\tfinal Object value = entry.getValue();\n@@ -555,10 +560,6 @@ else if (value.getClass().isArray())\n \t\t\t}\n \n \t\t\tbuffer.append('\\\"');\n-\t\t\tif (iterator.hasNext())\n-\t\t\t{\n-\t\t\t\tbuffer.append(' ');\n-\t\t\t}\n \t\t}\n \t\treturn buffer.toString();\n \t}\n@@ -585,7 +586,9 @@ private void checkMutability()\n \tpublic Boolean getAsBoolean(String key)\n \t{\n \t\tif (!containsKey(key))\n+\t\t{\n \t\t\treturn null;\n+\t\t}\n \n \t\ttry\n \t\t{\n@@ -619,7 +622,9 @@ public boolean getAsBoolean(String key, boolean defaultValue)\n \tpublic Integer getAsInteger(String key)\n \t{\n \t\tif (!containsKey(key))\n+\t\t{\n \t\t\treturn null;\n+\t\t}\n \n \t\ttry\n \t\t{\n@@ -652,7 +657,9 @@ public int getAsInteger(String key, int defaultValue)\n \tpublic Long getAsLong(String key)\n \t{\n \t\tif (!containsKey(key))\n+\t\t{\n \t\t\treturn null;\n+\t\t}\n \n \t\ttry\n \t\t{\n@@ -685,7 +692,9 @@ public long getAsLong(String key, long defaultValue)\n \tpublic Double getAsDouble(String key)\n \t{\n \t\tif (!containsKey(key))\n+\t\t{\n \t\t\treturn null;\n+\t\t}\n \n \t\ttry\n \t\t{\n@@ -700,7 +709,7 @@ public Double getAsDouble(String key)\n \t/**\n \t * @see IValueMap#getAsDouble(String, double)\n \t */\n-\tpublic double getAsDouble(String key, double defaultValue)\n+\tpublic double getAsDouble(final String key, final double defaultValue)\n \t{\n \t\ttry\n \t\t{\n@@ -715,7 +724,7 @@ public double getAsDouble(String key, double defaultValue)\n \t/**\n \t * @see IValueMap#getAsDuration(String)\n \t */\n-\tpublic Duration getAsDuration(String key)\n+\tpublic Duration getAsDuration(final String key)\n \t{\n \t\treturn getAsDuration(key, null);\n \t}\n@@ -723,10 +732,12 @@ public Duration getAsDuration(String key)\n \t/**\n \t * @see IValueMap#getAsDuration(String, Duration)\n \t */\n-\tpublic Duration getAsDuration(String key, Duration defaultValue)\n+\tpublic Duration getAsDuration(final String key, final Duration defaultValue)\n \t{\n \t\tif (!containsKey(key))\n+\t\t{\n \t\t\treturn defaultValue;\n+\t\t}\n \n \t\ttry\n \t\t{\n@@ -741,7 +752,7 @@ public Duration getAsDuration(String key, Duration defaultValue)\n \t/**\n \t * @see IValueMap#getAsTime(String)\n \t */\n-\tpublic Time getAsTime(String key)\n+\tpublic Time getAsTime(final String key)\n \t{\n \t\treturn getAsTime(key, null);\n \t}\n@@ -749,10 +760,12 @@ public Time getAsTime(String key)\n \t/**\n \t * @see IValueMap#getAsTime(String, Time)\n \t */\n-\tpublic Time getAsTime(String key, Time defaultValue)\n+\tpublic Time getAsTime(final String key, final Time defaultValue)\n \t{\n \t\tif (!containsKey(key))\n+\t\t{\n \t\t\treturn defaultValue;\n+\t\t}\n \n \t\ttry\n \t\t{\n@@ -765,43 +778,59 @@ public Time getAsTime(String key, Time defaultValue)\n \t}\n \n \t/**\n-\t * @see IValueMap#getAsEnum(String, Class<T>)\n+\t * @see org.apache.wicket.util.value.IValueMap#getAsEnum(java.lang.String, java.lang.Class)\n \t */\n-\tpublic <T extends Enum<T>> T getAsEnum(String key, Class<T> eClass)\n+\tpublic <T extends Enum<T>> T getAsEnum(final String key, final Class<T> eClass)\n \t{\n \t\treturn getEnumImpl(key, eClass, null);\n \t}\n \n \t/**\n-\t * @see IValueMap#getAsEnum\n+\t * @see org.apache.wicket.util.value.IValueMap#getAsEnum(java.lang.String, java.lang.Enum)\n \t */\n-\tpublic <T extends Enum<T>> T getAsEnum(String key, T defaultValue)\n+\tpublic <T extends Enum<T>> T getAsEnum(final String key, final T defaultValue)\n \t{\n \t\tif (defaultValue == null)\n+\t\t{\n \t\t\tthrow new IllegalArgumentException(\"Default value cannot be null\");\n+\t\t}\n+\n \t\treturn getEnumImpl(key, defaultValue.getClass(), defaultValue);\n \t}\n \n \t/**\n-\t * @see IValueMap#getAsEnum(String, Class<T>, T)\n+\t * @see org.apache.wicket.util.value.IValueMap#getAsEnum(java.lang.String, java.lang.Class,\n+\t *      java.lang.Enum)\n \t */\n-\tpublic <T extends Enum<T>> T getAsEnum(String key, Class<T> eClass, T defaultValue)\n+\tpublic <T extends Enum<T>> T getAsEnum(final String key, final Class<T> eClass,\n+\t\tfinal T defaultValue)\n \t{\n \t\treturn getEnumImpl(key, eClass, defaultValue);\n \t}\n \n \t/**\n \t * get enum implementation\n+\t * \n+\t * @param key\n+\t * @param eClass\n+\t * @param defaultValue\n+\t * @param <T>\n+\t * @return Enum\n \t */\n \t@SuppressWarnings( { \"unchecked\" })\n-\tprivate <T extends Enum<T>> T getEnumImpl(String key, Class<?> eClass, T defaultValue)\n+\tprivate <T extends Enum<T>> T getEnumImpl(final String key, final Class<?> eClass,\n+\t\tfinal T defaultValue)\n \t{\n \t\tif (eClass == null)\n+\t\t{\n \t\t\tthrow new IllegalArgumentException(\"eClass value cannot be null\");\n+\t\t}\n \n \t\tString value = getString(key);\n \t\tif (value == null)\n+\t\t{\n \t\t\treturn defaultValue;\n+\t\t}\n \n \t\tMethod valueOf = null;\n \t\ttry\n", 
  "project": "wicket", 
  "linesAdd": 54, 
  "jira_id": "2172", 
  "nb_skipped": 0, 
  "commit": "ea4a3f8a", 
  "nb_failure": 2, 
  "linesRem": 25
}