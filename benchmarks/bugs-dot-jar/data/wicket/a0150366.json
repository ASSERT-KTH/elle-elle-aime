{
  "files": 1, 
  "nb_test": 141, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.wicket.util.string.AppendingStringBufferTest"
  ], 
  "patch": "diff --git a/wicket-util/src/main/java/org/apache/wicket/util/string/AppendingStringBuffer.java b/wicket-util/src/main/java/org/apache/wicket/util/string/AppendingStringBuffer.java\nindex a8abb5f8f3..19e69a685b 100755\n--- a/wicket-util/src/main/java/org/apache/wicket/util/string/AppendingStringBuffer.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/string/AppendingStringBuffer.java\n@@ -37,6 +37,7 @@\n \r\n \tprivate static final AppendingStringBuffer NULL = new AppendingStringBuffer(\"null\");\r\n \tprivate static final StringBuilder SB_NULL = new StringBuilder(\"null\");\r\n+\tprivate static final StringBuffer SBF_NULL = new StringBuffer(\"null\");\r\n \r\n \t/**\r\n \t * The value is used for character storage.\r\n@@ -947,7 +948,11 @@ public AppendingStringBuffer insert(final int offset, final Object obj)\n \t\t}\r\n \t\telse if (obj instanceof StringBuffer)\r\n \t\t{\r\n-\t\t\treturn insert(offset, obj);\r\n+\t\t\treturn insert(offset, (StringBuffer)obj);\r\n+\t\t}\r\n+\t\telse if (obj instanceof StringBuilder)\r\n+\t\t{\r\n+\t\t\treturn insert(offset, (StringBuilder)obj);\r\n \t\t}\r\n \t\treturn insert(offset, String.valueOf(obj));\r\n \t}\r\n@@ -1010,9 +1015,9 @@ public AppendingStringBuffer insert(final int offset, String str)\n \t/**\r\n \t * Inserts the string into this string buffer.\r\n \t * <p>\r\n-\t * The characters of the <code>String</code> argument are inserted, in order, into this string\r\n-\t * buffer at the indicated offset, moving up any characters originally above that position and\r\n-\t * increasing the length of this string buffer by the length of the argument. If\r\n+\t * The characters of the <code>StringBuilder</code> argument are inserted, in order, into this\r\n+\t * string buffer at the indicated offset, moving up any characters originally above that\r\n+\t * position and increasing the length of this string buffer by the length of the argument. If\r\n \t * <code>str</code> is <code>null</code>, then the four characters <code>\"null\"</code> are\r\n \t * inserted into this string buffer.\r\n \t * <p>\r\n@@ -1062,6 +1067,61 @@ public AppendingStringBuffer insert(final int offset, StringBuilder str)\n \t\treturn this;\r\n \t}\r\n \r\n+\t/**\r\n+\t * Inserts the string into this string buffer.\r\n+\t * <p>\r\n+\t * The characters of the <code>StringBuffer</code> argument are inserted, in order, into this\r\n+\t * string buffer at the indicated offset, moving up any characters originally above that\r\n+\t * position and increasing the length of this string buffer by the length of the argument. If\r\n+\t * <code>str</code> is <code>null</code>, then the four characters <code>\"null\"</code> are\r\n+\t * inserted into this string buffer.\r\n+\t * <p>\r\n+\t * The character at index <i>k</i> in the new character sequence is equal to:\r\n+\t * <ul>\r\n+\t * <li>the character at index <i>k</i> in the old character sequence, if <i>k</i> is less than\r\n+\t * <code>offset</code>\r\n+\t * <li>the character at index <i>k</i><code>-offset</code> in the argument <code>str</code>, if\r\n+\t * <i>k</i> is not less than <code>offset</code> but is less than\r\n+\t * <code>offset+str.length()</code>\r\n+\t * <li>the character at index <i>k</i><code>-str.length()</code> in the old character sequence,\r\n+\t * if <i>k</i> is not less than <code>offset+str.length()</code>\r\n+\t * </ul>\r\n+\t * <p>\r\n+\t * The offset argument must be greater than or equal to <code>0</code>, and less than or equal\r\n+\t * to the length of this string buffer.\r\n+\t * \r\n+\t * @param offset\r\n+\t *            the offset.\r\n+\t * @param str\r\n+\t *            a string.\r\n+\t * @return a reference to this <code>AppendingStringBuffer</code> object.\r\n+\t * @exception StringIndexOutOfBoundsException\r\n+\t *                if the offset is invalid.\r\n+\t * @see java.lang.StringBuffer#length()\r\n+\t */\r\n+\tpublic AppendingStringBuffer insert(final int offset, StringBuffer str)\r\n+\t{\r\n+\t\tif ((offset < 0) || (offset > count))\r\n+\t\t{\r\n+\t\t\tthrow new StringIndexOutOfBoundsException();\r\n+\t\t}\r\n+\r\n+\t\tif (str == null)\r\n+\t\t{\r\n+\t\t\tstr = SBF_NULL;\r\n+\t\t}\r\n+\t\tint len = str.length();\r\n+\t\tint newcount = count + len;\r\n+\t\tif (newcount > value.length)\r\n+\t\t{\r\n+\t\t\texpandCapacity(newcount);\r\n+\t\t}\r\n+\t\tSystem.arraycopy(value, offset, value, offset + len, count - offset);\r\n+\t\tstr.getChars(0, len, value, offset);\r\n+\t\tcount = newcount;\r\n+\t\treturn this;\r\n+\t}\r\n+\r\n \t/**\r\n \t * Inserts the string representation of the <code>char</code> array argument into this string\r\n \t * buffer.\r\n", 
  "project": "wicket", 
  "linesAdd": 64, 
  "jira_id": "4184", 
  "nb_skipped": 0, 
  "commit": "a0150366", 
  "nb_failure": 0, 
  "linesRem": 4
}