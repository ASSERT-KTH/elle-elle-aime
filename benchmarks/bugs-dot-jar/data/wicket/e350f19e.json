{
  "files": 3, 
  "nb_test": 4, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.wicket.bean.validation.PropertyValidatorRequiredTest"
  ], 
  "patch": "diff --git a/wicket-experimental/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java b/wicket-experimental/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java\nindex 032a818e5a..e8e6376d4d 100644\n--- a/wicket-experimental/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java\n+++ b/wicket-experimental/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/PropertyValidator.java\n@@ -1,6 +1,10 @@\n package org.apache.wicket.bean.validation;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Set;\n \n import javax.validation.ConstraintViolation;\n@@ -62,8 +66,8 @@\n \tprivate final IModel<Class<?>[]> groups_;\n \n \t/**\n-\t * A flag that indicates whether {@linkplain #setComponentRequiredFlag()}\n-\t * has been called for this behavior.\n+\t * A flag that indicates whether {@linkplain #setComponentRequiredFlag()} has been called for\n+\t * this behavior.\n \t */\n \tprivate boolean requiredFlagSet;\n \n@@ -132,8 +136,10 @@ public void bind(Component component)\n \t\t\t\t\" can only be added to FormComponents\");\n \t\t}\n \n-\t\t// TODO add a validation key that appends the type so we can have different messages for\n-\t\t// @Size on String vs Collection - done but need to add a key for each superclass/interface\n+\t\t// TODO add a validation key that appends the type so we can have\n+\t\t// different messages for\n+\t\t// @Size on String vs Collection - done but need to add a key for each\n+\t\t// superclass/interface\n \n \t\tthis.component = (FormComponent<T>)component;\n \t}\n@@ -144,10 +150,15 @@ public void onConfigure(Component component)\n \t\tsuper.onConfigure(component);\n \t\tif (requiredFlagSet == false)\n \t\t{\n-\t\t\t// \"Required\" flag is calculated upon component's model property, so we must ensure,\n-\t\t\t// that model object is accessible (i.e. component is already added in a page).\n+\t\t\t// \"Required\" flag is calculated upon component's model property, so\n+\t\t\t// we must ensure,\n+\t\t\t// that model object is accessible (i.e. component is already added\n+\t\t\t// in a page).\n \t\t\trequiredFlagSet = true;\n-\t\t\tsetComponentRequiredFlag();\n+\t\t\tif (isRequired())\n+\t\t\t{\n+\t\t\t\tthis.component.setRequired(true);\n+\t\t\t}\n \t\t}\n \t}\n \n@@ -161,28 +172,58 @@ public void detach(Component component)\n \t\t}\n \t}\n \n-\t/**\n-\t * Marks the form component required if necessary\n-\t */\n-\tprivate void setComponentRequiredFlag()\n+\tprivate List<NotNull> findNotNullConstraints()\n \t{\n \t\tBeanValidationContext config = BeanValidationConfiguration.get();\n \t\tValidator validator = config.getValidator();\n \t\tProperty property = getProperty();\n \n-\t\t// if the property has a NotNull constraint mark the form component required\n+\t\tList<NotNull> constraints = new ArrayList<NotNull>();\n \n \t\tIterator<ConstraintDescriptor<?>> it = new ConstraintIterator(validator, property);\n+\n \t\twhile (it.hasNext())\n \t\t{\n \t\t\tConstraintDescriptor<?> desc = it.next();\n \t\t\tif (desc.getAnnotation().annotationType().equals(NotNull.class))\n \t\t\t{\n-\t\t\t\tcomponent.setRequired(true);\n-\t\t\t\tbreak;\n+\t\t\t\tconstraints.add((NotNull)desc.getAnnotation());\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn constraints;\n+\t}\n+\n+\tboolean isRequired()\n+\t{\n+\t\tList<NotNull> constraints = findNotNullConstraints();\n+\n+\t\tif (constraints.isEmpty())\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tHashSet<Class<?>> validatorGroups = new HashSet<Class<?>>();\n+\t\tvalidatorGroups.addAll(Arrays.asList(getGroups()));\n+\n+\t\tfor (NotNull constraint : constraints)\n+\t\t{\n+\t\t\tif (constraint.groups().length == 0 && validatorGroups.isEmpty())\n+\t\t\t{\n+\t\t\t\treturn true;\n \t\t\t}\n+\n+\t\t\tfor (Class<?> constraintGroup : constraint.groups())\n+\t\t\t{\n+\t\t\t\tif (validatorGroups.contains(constraintGroup))\n+\t\t\t\t{\n+\t\t\t\t\treturn true;\n \t\t\t\t}\n \t\t\t}\n+\t\t}\n+\n+\t\treturn false;\n+\t}\n \n \t@Override\n \t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n@@ -194,7 +235,8 @@ public void onComponentTag(Component component, ComponentTag tag)\n \t\tValidator validator = config.getValidator();\n \t\tProperty property = getProperty();\n \n-\t\t// find any tag modifiers that apply to the constraints of the property being validated\n+\t\t// find any tag modifiers that apply to the constraints of the property\n+\t\t// being validated\n \t\t// and allow them to modify the component tag\n \n \t\tIterator<ConstraintDescriptor<?>> it = new ConstraintIterator(validator, property,\ndiff --git a/wicket-experimental/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/SessionLocaleInterpolator.java b/wicket-experimental/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/SessionLocaleInterpolator.java\nindex 00aa5068f8..f8927e2229 100644\n--- a/wicket-experimental/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/SessionLocaleInterpolator.java\n+++ b/wicket-experimental/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/SessionLocaleInterpolator.java\n@@ -28,7 +28,8 @@ public SessionLocaleInterpolator(MessageInterpolator delegate)\n \t\tthis.delegate = delegate;\n \t}\n \n-\tpublic String interpolate(final String messageTemplate, final MessageInterpolator.Context context)\n+\tpublic String interpolate(final String messageTemplate,\n+\t\tfinal MessageInterpolator.Context context)\n \t{\n \t\tfinal Locale locale = getLocale();\n \t\tif (locale != null)\n@@ -41,7 +42,8 @@ public String interpolate(final String messageTemplate, final MessageInterpolato\n \t\t}\n \t}\n \n-\tpublic String interpolate(final String message, final MessageInterpolator.Context context, final Locale locale)\n+\tpublic String interpolate(final String message, final MessageInterpolator.Context context,\n+\t\tfinal Locale locale)\n \t{\n \t\treturn delegate.interpolate(message, context, locale);\n \t}\ndiff --git a/wicket-experimental/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/SizeTagModifier.java b/wicket-experimental/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/SizeTagModifier.java\nindex 41249742e3..1795dc4be1 100644\n--- a/wicket-experimental/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/SizeTagModifier.java\n+++ b/wicket-experimental/wicket-bean-validation/src/main/java/org/apache/wicket/bean/validation/SizeTagModifier.java\n@@ -6,8 +6,8 @@\n import org.apache.wicket.markup.html.form.FormComponent;\n \n /**\n- * A tag modifier that adds the {@code maxlength} attribute to the {@code input} tag with the max value\n- * from the {@link Size} constraint annotation.\n+ * A tag modifier that adds the {@code maxlength} attribute to the {@code input} tag with the max\n+ * value from the {@link Size} constraint annotation.\n  * \n  * @author igor\n  * \n", 
  "project": "wicket", 
  "linesAdd": 63, 
  "jira_id": "5418", 
  "nb_skipped": 0, 
  "commit": "e350f19e", 
  "nb_failure": 1, 
  "linesRem": 19
}