{
  "files": 1, 
  "nb_test": 169, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.wicket.util.string.StringValueTest"
  ], 
  "patch": "diff --git a/wicket-util/src/main/java/org/apache/wicket/util/string/StringValue.java b/wicket-util/src/main/java/org/apache/wicket/util/string/StringValue.java\nindex fa5bbbdaad..2887f95ca9 100755\n--- a/wicket-util/src/main/java/org/apache/wicket/util/string/StringValue.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/string/StringValue.java\n@@ -361,8 +361,8 @@ public final CharSequence replaceAll(final CharSequence searchFor,\n \t\t\treturn (T)toEnum((Class)type);\n \t\t}\n \n-\t\tthrow new StringValueConversionException(\"Cannot convert '\" + toString() + \"'to type \" +\n-\t\t\ttype);\n+\t\tthrow new StringValueConversionException(\"Cannot convert '\" + toString() + \"'to type \"\n+\t\t\t+ type);\n \t}\n \n \t/**\n@@ -394,7 +394,8 @@ public final boolean toBoolean() throws StringValueConversionException\n \t * \n \t * @param defaultValue\n \t *            the default value\n-\t * @return the converted text as a boolean or the default value if text is empty or inconvertible\n+\t * @return the converted text as a boolean or the default value if text is empty or\n+\t *         inconvertible\n \t * @see Strings#isTrue(String)\n \t */\n \tpublic final boolean toBoolean(final boolean defaultValue)\n@@ -410,7 +411,8 @@ public final boolean toBoolean(final boolean defaultValue)\n \t\t\t\tif (LOG.isDebugEnabled())\n \t\t\t\t{\n \t\t\t\t\tLOG.debug(String.format(\n-\t\t\t\t\t\t\"An error occurred while converting '%s' to a boolean: %s\", text, x.getMessage()), x);\n+\t\t\t\t\t\t\"An error occurred while converting '%s' to a boolean: %s\", text,\n+\t\t\t\t\t\tx.getMessage()), x);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n@@ -444,7 +446,8 @@ public final char toChar() throws StringValueConversionException\n \t * \n \t * @param defaultValue\n \t *            the default value\n-\t * @return the converted text as a primitive char or the default value if text is not a single character\n+\t * @return the converted text as a primitive char or the default value if text is not a single\n+\t *         character\n \t */\n \tpublic final char toChar(final char defaultValue)\n \t{\n@@ -459,7 +462,8 @@ public final char toChar(final char defaultValue)\n \t\t\t\tif (LOG.isDebugEnabled())\n \t\t\t\t{\n \t\t\t\t\tLOG.debug(String.format(\n-\t\t\t\t\t\t\"An error occurred while converting '%s' to a character: %s\", text, x.getMessage()), x);\n+\t\t\t\t\t\t\"An error occurred while converting '%s' to a character: %s\", text,\n+\t\t\t\t\t\tx.getMessage()), x);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n@@ -491,8 +495,8 @@ public final double toDouble() throws StringValueConversionException\n \t\t}\n \t\tcatch (ParseException e)\n \t\t{\n-\t\t\tthrow new StringValueConversionException(\"Unable to convert '\" + text +\n-\t\t\t\t\"' to a double value\", e);\n+\t\t\tthrow new StringValueConversionException(\"Unable to convert '\" + text\n+\t\t\t\t+ \"' to a double value\", e);\n \t\t}\n \t}\n \n@@ -516,7 +520,8 @@ public final double toDouble(final double defaultValue)\n \t\t\t\tif (LOG.isDebugEnabled())\n \t\t\t\t{\n \t\t\t\t\tLOG.debug(String.format(\n-\t\t\t\t\t\t\"An error occurred while converting '%s' to a double: %s\", text, x.getMessage()), x);\n+\t\t\t\t\t\t\"An error occurred while converting '%s' to a double: %s\", text,\n+\t\t\t\t\t\tx.getMessage()), x);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n@@ -551,7 +556,8 @@ public final Duration toDuration() throws StringValueConversionException\n \t * \n \t * @param defaultValue\n \t *            the default value\n-\t * @return the converted text as a duration or the default value if text is empty or inconvertible\n+\t * @return the converted text as a duration or the default value if text is empty or\n+\t *         inconvertible\n \t * @see Duration#valueOf(String, java.util.Locale)\n \t */\n \tpublic final Duration toDuration(final Duration defaultValue)\n@@ -567,7 +573,8 @@ public final Duration toDuration(final Duration defaultValue)\n \t\t\t\tif (LOG.isDebugEnabled())\n \t\t\t\t{\n \t\t\t\t\tLOG.debug(String.format(\n-\t\t\t\t\t\t\"An error occurred while converting '%s' to a Duration: %s\", text, x.getMessage()), x);\n+\t\t\t\t\t\t\"An error occurred while converting '%s' to a Duration: %s\", text,\n+\t\t\t\t\t\tx.getMessage()), x);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n@@ -588,8 +595,8 @@ public final int toInt() throws StringValueConversionException\n \t\t}\n \t\tcatch (NumberFormatException e)\n \t\t{\n-\t\t\tthrow new StringValueConversionException(\"Unable to convert '\" + text +\n-\t\t\t\t\"' to an int value\", e);\n+\t\t\tthrow new StringValueConversionException(\"Unable to convert '\" + text\n+\t\t\t\t+ \"' to an int value\", e);\n \t\t}\n \t}\n \n@@ -613,7 +620,8 @@ public final int toInt(final int defaultValue)\n \t\t\t\tif (LOG.isDebugEnabled())\n \t\t\t\t{\n \t\t\t\t\tLOG.debug(String.format(\n-\t\t\t\t\t\t\"An error occurred while converting '%s' to an integer: %s\", text, x.getMessage()), x);\n+\t\t\t\t\t\t\"An error occurred while converting '%s' to an integer: %s\", text,\n+\t\t\t\t\t\tx.getMessage()), x);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n@@ -634,8 +642,8 @@ public final Integer toInteger() throws StringValueConversionException\n \t\t}\n \t\tcatch (NumberFormatException e)\n \t\t{\n-\t\t\tthrow new StringValueConversionException(\"Unable to convert '\" + text +\n-\t\t\t\t\"' to an Integer value\", e);\n+\t\t\tthrow new StringValueConversionException(\"Unable to convert '\" + text\n+\t\t\t\t+ \"' to an Integer value\", e);\n \t\t}\n \t}\n \n@@ -653,8 +661,8 @@ public final long toLong() throws StringValueConversionException\n \t\t}\n \t\tcatch (NumberFormatException e)\n \t\t{\n-\t\t\tthrow new StringValueConversionException(\"Unable to convert '\" + text +\n-\t\t\t\t\"' to a long value\", e);\n+\t\t\tthrow new StringValueConversionException(\"Unable to convert '\" + text\n+\t\t\t\t+ \"' to a long value\", e);\n \t\t}\n \t}\n \n@@ -663,7 +671,8 @@ public final long toLong() throws StringValueConversionException\n \t * \n \t * @param defaultValue\n \t *            the default value\n-\t * @return the converted text as a long integer or the default value if text is empty or inconvertible\n+\t * @return the converted text as a long integer or the default value if text is empty or\n+\t *         inconvertible\n \t */\n \tpublic final long toLong(final long defaultValue)\n \t{\n@@ -678,7 +687,8 @@ public final long toLong(final long defaultValue)\n \t\t\t\tif (LOG.isDebugEnabled())\n \t\t\t\t{\n \t\t\t\t\tLOG.debug(String.format(\n-\t\t\t\t\t\t\"An error occurred while converting '%s' to a long: %s\", text, x.getMessage()), x);\n+\t\t\t\t\t\t\"An error occurred while converting '%s' to a long: %s\", text,\n+\t\t\t\t\t\tx.getMessage()), x);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n@@ -699,8 +709,8 @@ public final Long toLongObject() throws StringValueConversionException\n \t\t}\n \t\tcatch (NumberFormatException e)\n \t\t{\n-\t\t\tthrow new StringValueConversionException(\"Unable to convert '\" + text +\n-\t\t\t\t\"' to a Long value\", e);\n+\t\t\tthrow new StringValueConversionException(\"Unable to convert '\" + text\n+\t\t\t\t+ \"' to a Long value\", e);\n \t\t}\n \t}\n \n@@ -826,8 +836,8 @@ public final Time toTime() throws StringValueConversionException\n \t\t}\n \t\tcatch (ParseException e)\n \t\t{\n-\t\t\tthrow new StringValueConversionException(\"Unable to convert '\" + text +\n-\t\t\t\t\"' to a Time value\", e);\n+\t\t\tthrow new StringValueConversionException(\"Unable to convert '\" + text\n+\t\t\t\t+ \"' to a Time value\", e);\n \t\t}\n \t}\n \n@@ -851,7 +861,8 @@ public final Time toTime(final Time defaultValue)\n \t\t\t\tif (LOG.isDebugEnabled())\n \t\t\t\t{\n \t\t\t\t\tLOG.debug(String.format(\n-\t\t\t\t\t\t\"An error occurred while converting '%s' to a Time: %s\", text, x.getMessage()), x);\n+\t\t\t\t\t\t\"An error occurred while converting '%s' to a Time: %s\", text,\n+\t\t\t\t\t\tx.getMessage()), x);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n@@ -968,8 +979,7 @@ public boolean equals(final Object obj)\n \t\tif (obj instanceof StringValue)\n \t\t{\n \t\t\tStringValue stringValue = (StringValue)obj;\n-\t\t\treturn Objects.isEqual(text, stringValue.text) &&\n-\t\t\t\tObjects.isEqual(locale, stringValue.locale);\n+\t\t\treturn Objects.isEqual(text, stringValue.text) && locale.equals(stringValue.locale);\n \t\t}\n \t\telse\n \t\t{\n", 
  "project": "wicket", 
  "linesAdd": 37, 
  "jira_id": "5359", 
  "nb_skipped": 0, 
  "commit": "61122bab", 
  "nb_failure": 0, 
  "linesRem": 27
}