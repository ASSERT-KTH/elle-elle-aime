{
  "files": 3, 
  "nb_test": 1753, 
  "nb_error": 3, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.wicket.markup.html.TransparentWebMarkupContainerTest"
  ], 
  "patch": "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/AbstractMarkupSourcingStrategy.java b/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/AbstractMarkupSourcingStrategy.java\nindex 27407cf773..b49f2f44a9 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/AbstractMarkupSourcingStrategy.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/AbstractMarkupSourcingStrategy.java\n@@ -16,6 +16,8 @@\n  */\n package org.apache.wicket.markup.html.panel;\n \n+import java.util.Iterator;\n+\n import org.apache.wicket.Component;\n import org.apache.wicket.MarkupContainer;\n import org.apache.wicket.markup.ComponentTag;\n@@ -26,8 +28,6 @@\n import org.apache.wicket.markup.parser.XmlTag.TagType;\n import org.apache.wicket.markup.resolver.IComponentResolver;\n import org.apache.wicket.util.lang.Classes;\n-import org.apache.wicket.util.visit.IVisit;\n-import org.apache.wicket.util.visit.IVisitor;\n \n /**\n  * Implements boilerplate as needed by many markup sourcing strategies.\n@@ -55,53 +55,58 @@ public AbstractMarkupSourcingStrategy()\n \t * \n \t * @param container\n \t *            the parent container.\n+\t * @param\n+\t * \t\t  containerMarkup\n+\t * \t\t\t  the markup of the container.           \n \t * @param child\n \t *            The component to find the markup for.\n \t * @return the markup fragment for the child, or {@code null}.\n \t */\n-\tprotected IMarkupFragment searchMarkupInTransparentResolvers(final MarkupContainer container,\n-\t\tfinal Component child)\n-\t{\n-\t\treturn container.visitChildren(MarkupContainer.class, new IVisitor<MarkupContainer, IMarkupFragment>()\n-\t\t{\n-\t\t\t@Override\n-\t\t\tpublic void component(MarkupContainer resolvingContainer, IVisit<IMarkupFragment> visit)\n+\tprotected IMarkupFragment searchMarkupInTransparentResolvers(MarkupContainer container,\n+\t\tIMarkupFragment containerMarkup, Component child)\n \t{\n-\t\t\t\t//prevents possible searching loops\n-\t\t\t\tif (child == resolvingContainer) \n+\t\tIMarkupFragment childMarkupFound = null;\n+\t\tIterator<Component> siblingsIterator = container.iterator();\n+\t\t\n+\t\twhile (siblingsIterator.hasNext() && childMarkupFound == null)\n \t\t{\n-\t\t\t\t\tvisit.dontGoDeeper();\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n+\t\t\tComponent sibling = siblingsIterator.next();\n \t\t\t\n-\t\t\t\tif (resolvingContainer instanceof IComponentResolver)\n+\t\t\tif(sibling == child || !sibling.isVisible())\n \t\t\t{\n-\t\t\t\t\tvisit.dontGoDeeper();\n+\t\t\t\tcontinue;\n+\t\t\t}\n \t\t\t\n-\t\t\t\t\tIMarkupFragment childMarkup = resolvingContainer.getMarkup(child);\n+\t\t\tIMarkupFragment siblingMarkup = containerMarkup.find(sibling.getId());\n \t\t\t\n-\t\t\t\t\tif (childMarkup != null && childMarkup.size() > 0)\n+\t\t\tif (siblingMarkup != null && sibling instanceof MarkupContainer)\n \t\t\t{\n-\t\t\t\t\t\tIComponentResolver componentResolver = (IComponentResolver)resolvingContainer;\n+\t\t\t\tIMarkupFragment childMarkup  = siblingMarkup.find(child.getId());\n \t\t\t\t\n+\t\t\t\tif (childMarkup != null && sibling instanceof IComponentResolver)\n+\t\t\t\t{\n+\t\t\t\t\tIComponentResolver componentResolver = (IComponentResolver)sibling;\n \t\t\t\t\tMarkupStream stream = new MarkupStream(childMarkup);\n-\n \t\t\t\t\tComponentTag tag = stream.getTag();\n \t\t\t\t\t\n-\t\t\t\t\t\tComponent resolvedComponent = resolvingContainer.get(tag.getId());\n+\t\t\t\t\tComponent resolvedComponent = sibling.get(tag.getId());\n \t\t\t\t\tif (resolvedComponent == null)\n \t\t\t\t\t{\n-\t\t\t\t\t\t\tresolvedComponent = componentResolver.resolve(resolvingContainer, stream, tag);\n+\t\t\t\t\t\tresolvedComponent = componentResolver.resolve((MarkupContainer)sibling, stream, tag);\n \t\t\t\t\t}\n \t\t\t\t\t\n \t\t\t\t\tif (child == resolvedComponent)\n \t\t\t\t\t{\n-\t\t\t\t\t\t\tvisit.stop(childMarkup);\n+\t\t\t\t\t\tchildMarkupFound = childMarkup;\n \t\t\t\t\t}\n \t\t\t\t}\n+\t\t\t\telse \n+\t\t\t\t{\n+\t\t\t\t\tchildMarkupFound = searchMarkupInTransparentResolvers((MarkupContainer)sibling, siblingMarkup, child);\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\t});\n+\t\treturn childMarkupFound;\n \t}\n \n \t/**\ndiff --git a/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/AssociatedMarkupSourcingStrategy.java b/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/AssociatedMarkupSourcingStrategy.java\nindex 0ac0647454..5f547ac9fe 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/AssociatedMarkupSourcingStrategy.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/AssociatedMarkupSourcingStrategy.java\n@@ -120,7 +120,7 @@ public IMarkupFragment getMarkup(final MarkupContainer parent, final Component c\n \t\t\treturn associatedMarkup;\n \t\t}\n \n-\t\tassociatedMarkup = searchMarkupInTransparentResolvers(parent, child);\n+\t\tassociatedMarkup = searchMarkupInTransparentResolvers(parent, markup, child);\n \t\tif (associatedMarkup != null)\n \t\t{\n \t\t\treturn associatedMarkup;\ndiff --git a/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/DefaultMarkupSourcingStrategy.java b/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/DefaultMarkupSourcingStrategy.java\nindex 6699a6839c..7506d236d6 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/DefaultMarkupSourcingStrategy.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/markup/html/panel/DefaultMarkupSourcingStrategy.java\n@@ -78,26 +78,24 @@ public IMarkupFragment getMarkup(final MarkupContainer container, final Componen\n \t{\n \t\t// If the sourcing strategy did not provide one, than ask the component.\n \t\t// Get the markup for the container\n-\t\tIMarkupFragment markup = container.getMarkup();\n-\t\tif (markup == null)\n+\t\tIMarkupFragment containerMarkup = container.getMarkup();\n+\t\tif (containerMarkup == null)\n \t\t{\n \t\t\treturn null;\n \t\t}\n \n \t\tif (child == null)\n \t\t{\n-\t\t\treturn markup;\n+\t\t\treturn containerMarkup;\n \t\t}\n \t\t\n \t\t// Find the child's markup\n-\t\tmarkup = markup.find(child.getId());\n-\t\tif (markup != null)\n+\t\tIMarkupFragment childMarkup = containerMarkup.find(child.getId());\n+\t\tif (childMarkup != null)\n \t\t{\n-\t\t\treturn markup;\n+\t\t\treturn childMarkup;\n \t\t}\n \t\t\n-\t\tmarkup = searchMarkupInTransparentResolvers(container, child);\n-\t\t\n-\t\treturn markup;\n+\t\treturn searchMarkupInTransparentResolvers(container, containerMarkup, child);\n \t}\n }\n", 
  "project": "wicket", 
  "linesAdd": 37, 
  "jira_id": "5898", 
  "nb_skipped": 1, 
  "commit": "ffdd0864", 
  "nb_failure": 0, 
  "linesRem": 34
}