{
  "files": 12, 
  "nb_test": 188, 
  "nb_error": 2, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.wicket.util.convert.converters.ConvertersTest"
  ], 
  "patch": "diff --git a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/AbstractDecimalConverter.java b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/AbstractDecimalConverter.java\nindex 09485fac63..f16ad920c5 100644\n--- a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/AbstractDecimalConverter.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/AbstractDecimalConverter.java\n@@ -16,14 +16,11 @@\n  */\n package org.apache.wicket.util.convert.converter;\n \n-import java.text.DecimalFormat;\n import java.text.NumberFormat;\n import java.util.Locale;\n-import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n \n /**\n- * Base class for all number converters.\n+ * Base class for all converters of decimal numbers.\n  * \n  * @author Jonathan Locke\n  * @param <N>\n@@ -32,25 +29,6 @@\n {\n \tprivate static final long serialVersionUID = 1L;\n \n-\t/** The date format to use */\n-\tprivate final Map<Locale, NumberFormat> numberFormats = new ConcurrentHashMap<>();\n-\n-\t/**\n-\t * @param locale\n-\t * @return Returns the numberFormat.\n-\t */\n-\t@Override\n-\tpublic NumberFormat getNumberFormat(final Locale locale)\n-\t{\n-\t\tNumberFormat numberFormat = numberFormats.get(locale);\n-\t\tif (numberFormat == null)\n-\t\t{\n-\t\t\tnumberFormat = newNumberFormat(locale);\n-\t\t\tsetNumberFormat(locale, numberFormat);\n-\t\t}\n-\t\treturn (NumberFormat)numberFormat.clone();\n-\t}\n-\n \t/**\n \t * Creates a new {@link NumberFormat} for the given locale. The instance is later cached and is\n \t * accessible through {@link #getNumberFormat(Locale)}\n@@ -58,24 +36,9 @@ public NumberFormat getNumberFormat(final Locale locale)\n \t * @param locale\n \t * @return number format\n \t */\n+\t@Override\n \tprotected NumberFormat newNumberFormat(final Locale locale)\n \t{\n \t\treturn NumberFormat.getInstance(locale);\n \t}\n-\n-\t/**\n-\t * @param locale\n-\t *            The Locale that was used for this NumberFormat\n-\t * @param numberFormat\n-\t *            The numberFormat to set.\n-\t */\n-\tpublic final void setNumberFormat(final Locale locale, final NumberFormat numberFormat)\n-\t{\n-\t\tif (numberFormat instanceof DecimalFormat)\n-\t\t{\n-\t\t\t((DecimalFormat)numberFormat).setParseBigDecimal(true);\n-\t\t}\n-\n-\t\tnumberFormats.put(locale, numberFormat);\n-\t}\n }\ndiff --git a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/AbstractIntegerConverter.java b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/AbstractIntegerConverter.java\nindex 88639c04a4..04998145ee 100644\n--- a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/AbstractIntegerConverter.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/AbstractIntegerConverter.java\n@@ -18,10 +18,9 @@\n \n import java.text.NumberFormat;\n import java.util.Locale;\n-import java.util.concurrent.ConcurrentHashMap;\n \n /**\n- * Base class for all number converters.\n+ * Base class for all converters of integer numbers.\n  * \n  * @author Jonathan Locke\n  * @param <I>\n@@ -30,29 +29,12 @@\n {\n \tprivate static final long serialVersionUID = 1L;\n \n-\t/** The date format to use */\n-\tprivate final ConcurrentHashMap<Locale, NumberFormat> numberFormats = new ConcurrentHashMap<>();\n-\n-\t/**\n-\t * @param locale\n-\t *            The locale\n-\t * @return Returns the numberFormat.\n-\t */\n \t@Override\n-\tpublic NumberFormat getNumberFormat(final Locale locale)\n-\t{\n-\t\tNumberFormat numberFormat = numberFormats.get(locale);\n-\t\tif (numberFormat == null)\n+\tprotected NumberFormat newNumberFormat(Locale locale)\n \t{\n-\t\t\tnumberFormat = NumberFormat.getIntegerInstance(locale);\n+\t\tNumberFormat numberFormat  = NumberFormat.getIntegerInstance(locale);\n \t\tnumberFormat.setParseIntegerOnly(true);\n \t\tnumberFormat.setGroupingUsed(false);\n-\t\t\tNumberFormat tmpNumberFormat = numberFormats.putIfAbsent(locale, numberFormat);\n-\t\t\tif (tmpNumberFormat != null)\n-\t\t\t{\n-\t\t\t\tnumberFormat = tmpNumberFormat;\n-\t\t\t}\n-\t\t}\n-\t\treturn (NumberFormat)numberFormat.clone();\n+\t\treturn numberFormat;\n \t}\n }\ndiff --git a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/AbstractNumberConverter.java b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/AbstractNumberConverter.java\nindex 5c448c0a6d..da3df42ab4 100644\n--- a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/AbstractNumberConverter.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/AbstractNumberConverter.java\n@@ -16,8 +16,11 @@\n  */\n package org.apache.wicket.util.convert.converter;\n \n+import java.math.BigDecimal;\n+import java.text.DecimalFormat;\n import java.text.NumberFormat;\n import java.util.Locale;\n+import java.util.concurrent.ConcurrentHashMap;\n \n import org.apache.wicket.util.convert.ConversionException;\n \n@@ -32,11 +35,45 @@\n {\n \tprivate static final long serialVersionUID = 1L;\n \n+\t/** The date format to use */\n+\tprivate final ConcurrentHashMap<Locale, NumberFormat> numberFormats = new ConcurrentHashMap<>();\n+\n \t/**\n \t * @param locale\n+\t *            The locale\n \t * @return Returns the numberFormat.\n \t */\n-\tpublic abstract NumberFormat getNumberFormat(Locale locale);\n+\tpublic NumberFormat getNumberFormat(final Locale locale)\n+\t{\n+\t\tNumberFormat numberFormat = numberFormats.get(locale);\n+\t\tif (numberFormat == null)\n+\t\t{\n+\t\t\tnumberFormat = newNumberFormat(locale);\n+\n+\t\t\tif (numberFormat instanceof DecimalFormat)\n+\t\t\t{\n+\t\t\t\t// always try to parse BigDecimals\n+\t\t\t\t((DecimalFormat)numberFormat).setParseBigDecimal(true);\n+\t\t\t}\n+\n+\t\t\tNumberFormat tmpNumberFormat = numberFormats.putIfAbsent(locale, numberFormat);\n+\t\t\tif (tmpNumberFormat != null)\n+\t\t\t{\n+\t\t\t\tnumberFormat = tmpNumberFormat;\n+\t\t\t}\n+\t\t}\n+\t\t// return a clone because NumberFormat.get..Instance use a pool\n+\t\treturn (NumberFormat)numberFormat.clone();\n+\t}\n+\n+\t/**\n+\t * Creates a new {@link NumberFormat} for the given locale. The instance is later cached and is\n+\t * accessible through {@link #getNumberFormat(Locale)}\n+\t *\n+\t * @param locale\n+\t * @return number format\n+\t */\n+\tprotected abstract NumberFormat newNumberFormat(final Locale locale);\n \n \t/**\n \t * Parses a value as a String and returns a Number.\n@@ -44,15 +81,15 @@\n \t * @param value\n \t *            The object to parse (after converting with toString())\n \t * @param min\n-\t *            The minimum allowed value\n+\t *            The minimum allowed value or {@code null} if none\n \t * @param max\n-\t *            The maximum allowed value\n+\t *            The maximum allowed value or {@code null} if none\n \t * @param locale\n \t * @return The number\n \t * @throws ConversionException\n \t *             if value is unparsable or out of range\n \t */\n-\tprotected N parse(Object value, final double min, final double max, Locale locale)\n+\tprotected BigDecimal parse(Object value, final BigDecimal min, final BigDecimal max, Locale locale)\n \t{\n \t\tif (locale == null)\n \t\t{\n@@ -78,19 +115,30 @@ else if (value instanceof String)\n \t\t\treturn null;\n \t\t}\n \n-\t\tif (number.doubleValue() < min)\n+\t\tBigDecimal bigDecimal;\n+\t\tif (number instanceof BigDecimal)\n+\t\t{\n+\t\t\tbigDecimal = (BigDecimal)number;\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\t// should occur rarely, see #getNumberFormat(Locale)\n+\t\t\tbigDecimal = new BigDecimal(number.toString());\n+\t\t}\n+\n+\t\tif (min != null && bigDecimal.compareTo(min) < 0)\n \t\t{\n-\t\t\tthrow newConversionException(\"Value cannot be less than \" + min, value, locale).setFormat(\n-\t\t\t\tnumberFormat);\n+\t\t\tthrow newConversionException(\"Value cannot be less than \" + min, value, locale)\n+\t\t\t\t\t.setFormat(numberFormat);\n \t\t}\n \n-\t\tif (number.doubleValue() > max)\n+\t\tif (max != null && bigDecimal.compareTo(max) > 0)\n \t\t{\n-\t\t\tthrow newConversionException(\"Value cannot be greater than \" + max, value, locale).setFormat(\n-\t\t\t\tnumberFormat);\n+\t\t\tthrow newConversionException(\"Value cannot be greater than \" + max, value, locale)\n+\t\t\t\t\t.setFormat(numberFormat);\n \t\t}\n \n-\t\treturn number;\n+\t\treturn bigDecimal;\n \t}\n \n \t@Override\ndiff --git a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/BigDecimalConverter.java b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/BigDecimalConverter.java\nindex dd6e0bac2e..162a6de2ac 100644\n--- a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/BigDecimalConverter.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/BigDecimalConverter.java\n@@ -44,33 +44,6 @@ public BigDecimal convertToObject(final String value, final Locale locale)\n \t\t\treturn null;\r\n \t\t}\r\n \r\n-\t\tfinal Number number = parse(value, -Double.MAX_VALUE, Double.MAX_VALUE, locale);\r\n-\r\n-\t\tif (number instanceof BigDecimal)\r\n-\t\t{\r\n-\t\t\treturn (BigDecimal)number;\r\n-\t\t}\r\n-\t\telse if (number instanceof Double)\r\n-\t\t{\r\n-\t\t\t// See link why the String is preferred for doubles\r\n-\t\t\t// http://java.sun.com/j2se/1.4.2/docs/api/java/math/BigDecimal.html#BigDecimal%28double%29\r\n-\t\t\treturn new BigDecimal(Double.toString(number.doubleValue()));\r\n-\t\t}\r\n-\t\telse if (number instanceof Long)\r\n-\t\t{\r\n-\t\t\treturn new BigDecimal(number.longValue());\r\n-\t\t}\r\n-\t\telse if (number instanceof Float)\r\n-\t\t{\r\n-\t\t\treturn new BigDecimal(number.floatValue());\r\n-\t\t}\r\n-\t\telse if (number instanceof Integer)\r\n-\t\t{\r\n-\t\t\treturn new BigDecimal(number.intValue());\r\n-\t\t}\r\n-\t\telse\r\n-\t\t{\r\n-\t\t\treturn new BigDecimal(value);\r\n-\t\t}\r\n+\t\treturn parse(value, null, null, locale);\r\n \t}\r\n }\r\ndiff --git a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/BigIntegerConverter.java b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/BigIntegerConverter.java\nindex 22077be67c..5da0034098 100644\n--- a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/BigIntegerConverter.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/BigIntegerConverter.java\n@@ -16,6 +16,7 @@\n  */\n package org.apache.wicket.util.convert.converter;\n \n+import java.math.BigDecimal;\n import java.math.BigInteger;\n import java.util.Locale;\n \n@@ -44,23 +45,13 @@ public BigInteger convertToObject(final String value, final Locale locale)\n \t\t\treturn null;\n \t\t}\n \n-\t\tfinal Number number = parse(value, -Double.MAX_VALUE, Double.MAX_VALUE, locale);\n+\t\tfinal BigDecimal number = parse(value, null, null, locale);\n \n-\t\tif (number instanceof BigInteger)\n+\t\tif (number == null)\n \t\t{\n-\t\t\treturn (BigInteger)number;\n-\t\t}\n-\t\telse if (number instanceof Long)\n-\t\t{\n-\t\t\treturn BigInteger.valueOf(number.longValue());\n-\t\t}\n-\t\telse if (number instanceof Integer)\n-\t\t{\n-\t\t\treturn BigInteger.valueOf(number.intValue());\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\treturn new BigInteger(value);\n+\t\t\treturn null;\n \t\t}\n+\n+\t\treturn new BigInteger(number.toString());\n \t}\n }\ndiff --git a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/ByteConverter.java b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/ByteConverter.java\nindex 8c351e4601..885016504a 100644\n--- a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/ByteConverter.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/ByteConverter.java\n@@ -16,6 +16,7 @@\n  */\n package org.apache.wicket.util.convert.converter;\n \n+import java.math.BigDecimal;\n import java.util.Locale;\n \n import org.apache.wicket.util.convert.IConverter;\n@@ -31,6 +32,9 @@\n {\n \tprivate static final long serialVersionUID = 1L;\n \n+\tprivate static final BigDecimal MIN_VALUE = new BigDecimal(Byte.MIN_VALUE);\n+\tprivate static final BigDecimal MAX_VALUE = new BigDecimal(Byte.MAX_VALUE);\n+\n \t/**\n \t * The singleton instance for a byte converter\n \t */\n@@ -42,7 +46,7 @@\n \t@Override\n \tpublic Byte convertToObject(final String value, final Locale locale)\n \t{\n-\t\tfinal Number number = parse(value, Byte.MIN_VALUE, Byte.MAX_VALUE, locale);\n+\t\tfinal BigDecimal number = parse(value, MIN_VALUE, MAX_VALUE, locale);\n \n \t\tif (number == null)\n \t\t{\ndiff --git a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/DoubleConverter.java b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/DoubleConverter.java\nindex fbf5862a21..ce2ca99188 100644\n--- a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/DoubleConverter.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/DoubleConverter.java\n@@ -16,6 +16,7 @@\n  */\n package org.apache.wicket.util.convert.converter;\n \n+import java.math.BigDecimal;\n import java.util.Locale;\n \n import org.apache.wicket.util.convert.IConverter;\n@@ -31,6 +32,11 @@\n {\n \tprivate static final long serialVersionUID = 1L;\n \n+\t// Double.MIN is the smallest nonzero positive number, not the largest\n+\t// negative number\n+\tprivate static final BigDecimal MIN_VALUE = new BigDecimal(-Double.MAX_VALUE);\n+\tprivate static final BigDecimal MAX_VALUE = new BigDecimal(Double.MAX_VALUE);\n+\n \t/**\n \t * The singleton instance for a double converter\n \t */\n@@ -42,9 +48,7 @@\n \t@Override\n \tpublic Double convertToObject(final String value, final Locale locale)\n \t{\n-\t\tfinal Number number = parse(value, -Double.MAX_VALUE, Double.MAX_VALUE, locale);\n-\t\t// Double.MIN is the smallest nonzero positive number, not the largest\n-\t\t// negative number\n+\t\tfinal BigDecimal number = parse(value, MIN_VALUE, MAX_VALUE, locale);\n \n \t\tif (number == null)\n \t\t{\ndiff --git a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/FloatConverter.java b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/FloatConverter.java\nindex bc1562a0f5..c4b2b79aca 100644\n--- a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/FloatConverter.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/FloatConverter.java\n@@ -16,6 +16,7 @@\n  */\n package org.apache.wicket.util.convert.converter;\n \n+import java.math.BigDecimal;\n import java.util.Locale;\n \n import org.apache.wicket.util.convert.IConverter;\n@@ -31,6 +32,11 @@\n {\n \tprivate static final long serialVersionUID = 1L;\n \n+\t// Float.MIN is the smallest nonzero positive number, not the largest\n+\t// negative number\n+\tprivate static final BigDecimal MIN_VALUE = new BigDecimal(-Float.MAX_VALUE);\n+\tprivate static final BigDecimal MAX_VALUE = new BigDecimal(Float.MAX_VALUE);\n+\n \t/**\n \t * The singleton instance for a float converter\n \t */\n@@ -42,7 +48,7 @@\n \t@Override\n \tpublic Float convertToObject(final String value, final Locale locale)\n \t{\n-\t\tfinal Number number = parse(value, -Float.MAX_VALUE, Float.MAX_VALUE, locale);\n+\t\tfinal BigDecimal number = parse(value, MIN_VALUE, MAX_VALUE, locale);\n \n \t\tif (number == null)\n \t\t{\ndiff --git a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/IntegerConverter.java b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/IntegerConverter.java\nindex 8fd1edfaaf..5055d4a4c6 100644\n--- a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/IntegerConverter.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/IntegerConverter.java\n@@ -16,6 +16,7 @@\n  */\n package org.apache.wicket.util.convert.converter;\n \n+import java.math.BigDecimal;\n import java.util.Locale;\n \n import org.apache.wicket.util.convert.IConverter;\n@@ -31,6 +32,9 @@\n {\n \tprivate static final long serialVersionUID = 1L;\n \n+\tprivate static final BigDecimal MIN_VALUE = new BigDecimal(Integer.MIN_VALUE);\n+\tprivate static final BigDecimal MAX_VALUE = new BigDecimal(Integer.MAX_VALUE);\n+\n \t/**\n \t * The singleton instance for a integer converter\n \t */\n@@ -42,7 +46,7 @@\n \t@Override\n \tpublic Integer convertToObject(final String value, final Locale locale)\n \t{\n-\t\tfinal Number number = parse(value, Integer.MIN_VALUE, Integer.MAX_VALUE, locale);\n+\t\tfinal BigDecimal number = parse(value, MIN_VALUE, MAX_VALUE, locale);\n \n \t\tif (number == null)\n \t\t{\ndiff --git a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/LongConverter.java b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/LongConverter.java\nindex 67401b2ecf..0cf8db6805 100644\n--- a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/LongConverter.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/LongConverter.java\n@@ -16,6 +16,7 @@\n  */\n package org.apache.wicket.util.convert.converter;\n \n+import java.math.BigDecimal;\n import java.util.Locale;\n \n import org.apache.wicket.util.convert.IConverter;\n@@ -31,6 +32,9 @@\n {\n \tprivate static final long serialVersionUID = 1L;\n \n+\tprivate static final BigDecimal MIN_VALUE = new BigDecimal(Long.MIN_VALUE);\n+\tprivate static final BigDecimal MAX_VALUE = new BigDecimal(Long.MAX_VALUE);\n+\n \t/**\n \t * The singleton instance for a long converter\n \t */\n@@ -42,7 +46,7 @@\n \t@Override\n \tpublic Long convertToObject(final String value, final Locale locale)\n \t{\n-\t\tfinal Number number = parse(value, Long.MIN_VALUE, Long.MAX_VALUE, locale);\n+\t\tfinal BigDecimal number = parse(value, MIN_VALUE, MAX_VALUE, locale);\n \n \t\tif (number == null)\n \t\t{\ndiff --git a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/ShortConverter.java b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/ShortConverter.java\nindex 4d2a2fafa7..30aa1b7734 100644\n--- a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/ShortConverter.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/ShortConverter.java\n@@ -16,6 +16,7 @@\n  */\n package org.apache.wicket.util.convert.converter;\n \n+import java.math.BigDecimal;\n import java.util.Locale;\n \n import org.apache.wicket.util.convert.IConverter;\n@@ -31,6 +32,9 @@\n {\n \tprivate static final long serialVersionUID = 1L;\n \n+\tprivate static final BigDecimal MIN_VALUE = new BigDecimal(Short.MIN_VALUE);\n+\tprivate static final BigDecimal MAX_VALUE = new BigDecimal(Short.MAX_VALUE);\n+\n \t/**\n \t * The singleton instance for a short converter\n \t */\n@@ -42,7 +46,7 @@\n \t@Override\n \tpublic Short convertToObject(final String value, final Locale locale)\n \t{\n-\t\tfinal Number number = parse(value, Short.MIN_VALUE, Short.MAX_VALUE, locale);\n+\t\tfinal BigDecimal number = parse(value, MIN_VALUE, MAX_VALUE, locale);\n \n \t\tif (number == null)\n \t\t{\ndiff --git a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/ZeroPaddingIntegerConverter.java b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/ZeroPaddingIntegerConverter.java\nindex 84c4f62ce5..181be0b6ad 100644\n--- a/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/ZeroPaddingIntegerConverter.java\n+++ b/wicket-util/src/main/java/org/apache/wicket/util/convert/converter/ZeroPaddingIntegerConverter.java\n@@ -24,8 +24,10 @@\n  * @author Eelco Hillenius\n  * @author Jonathan Locke\n  * @author Al Maw\n+ * \n+ * @deprecated use an {@link IntegerConverter} with suitable format string instead\n  */\n-public class ZeroPaddingIntegerConverter extends AbstractIntegerConverter<Integer>\n+public class ZeroPaddingIntegerConverter extends IntegerConverter\n {\n \tprivate static final long serialVersionUID = 1L;\n \n@@ -58,29 +60,4 @@ public String convertToString(final Integer value, final Locale locale)\n \n \t\treturn result;\n \t}\n-\n-\t/**\n-\t * @see org.apache.wicket.util.convert.IConverter#convertToObject(java.lang.String,Locale)\n-\t */\n-\t@Override\n-\tpublic Integer convertToObject(final String value, final Locale locale)\n-\t{\n-\t\tfinal Number number = parse(value, Integer.MIN_VALUE, Integer.MAX_VALUE, locale);\n-\n-\t\tif (number == null)\n-\t\t{\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\treturn number.intValue();\n-\t}\n-\n-\t/**\n-\t * @see org.apache.wicket.util.convert.converter.AbstractConverter#getTargetType()\n-\t */\n-\t@Override\n-\tprotected Class<Integer> getTargetType()\n-\t{\n-\t\treturn Integer.class;\n-\t}\n }\n\\ No newline at end of file\n", 
  "project": "wicket", 
  "linesAdd": 109, 
  "jira_id": "5853", 
  "nb_skipped": 2, 
  "commit": "b80f6640", 
  "nb_failure": 1, 
  "linesRem": 149
}