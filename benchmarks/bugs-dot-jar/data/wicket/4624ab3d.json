{
  "files": 2, 
  "nb_test": 1202, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.wicket.request.handler.ListenerInterfaceRequestHandlerTest"
  ], 
  "patch": "diff --git a/wicket-core/src/main/java/org/apache/wicket/request/handler/ListenerInterfaceRequestHandler.java b/wicket-core/src/main/java/org/apache/wicket/request/handler/ListenerInterfaceRequestHandler.java\nindex de801efa5e..a74d0980ee 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/request/handler/ListenerInterfaceRequestHandler.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/request/handler/ListenerInterfaceRequestHandler.java\n@@ -26,6 +26,8 @@\n import org.apache.wicket.request.http.WebRequest;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.apache.wicket.util.lang.Args;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Request handler that invokes the listener interface on component and renders page afterwards.\n@@ -37,6 +39,9 @@\n \t\tIPageRequestHandler,\n \t\tIComponentRequestHandler\n {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(ListenerInterfaceRequestHandler.class);\n+\n \tprivate final IPageAndComponentProvider pageComponentProvider;\n \n \tprivate final RequestListenerInterface listenerInterface;\n@@ -146,19 +151,42 @@ public Integer getBehaviorIndex()\n \t */\n \tpublic void respond(final IRequestCycle requestCycle)\n \t{\n+\t\tfinal boolean isNewPageInstance = pageComponentProvider.isNewPageInstance();\n+\t\tfinal boolean isAjax = ((WebRequest)requestCycle.getRequest()).isAjax();\n \t\tfinal IRequestablePage page = getPage();\n+\t\tfinal boolean isStateless = page.isPageStateless();\n+\t\tfinal IPageProvider pageProvider = new PageProvider(page);\n+\n \t\tif (getComponent().getPage() == page)\n \t\t{\n-\t\t\tboolean isAjax = ((WebRequest)requestCycle.getRequest()).isAjax();\n+\t\t\tRedirectPolicy policy = isStateless ? RedirectPolicy.NEVER_REDIRECT\n+\t\t\t\t: RedirectPolicy.AUTO_REDIRECT;\n+\n+\t\t\tif (isNewPageInstance)\n+\t\t\t{\n+\t\t\t\tif (LOG.isDebugEnabled())\n+\t\t\t\t{\n+\t\t\t\t\tLOG.debug(\n+\t\t\t\t\t\t\"A ListenerInterface '{}' assigned to '{}' is executed on an expired page. \"\n+\t\t\t\t\t\t\t+ \"Scheduling re-create of the page and ignoring the listener interface...\",\n+\t\t\t\t\t\tlistenerInterface, getComponentPath());\n+\t\t\t\t}\n+\n+\t\t\t\tif (isAjax)\n+\t\t\t\t{\n+\t\t\t\t\tpolicy = RedirectPolicy.ALWAYS_REDIRECT;\n+\t\t\t\t}\n+\n+\t\t\t\trequestCycle.scheduleRequestHandlerAfterCurrent(new RenderPageRequestHandler(\n+\t\t\t\t\tpageProvider, policy));\n+\t\t\t\treturn;\n+\t\t\t}\n+\n \t\t\tif (isAjax == false && listenerInterface.isRenderPageAfterInvocation())\n \t\t\t{\n \t\t\t\t// schedule page render after current request handler is done. this can be\n \t\t\t\t// overridden during invocation of listener\n \t\t\t\t// method (i.e. by calling RequestCycle#setResponsePage)\n-\t\t\t\tfinal IPageProvider pageProvider = new PageProvider(page);\n-\t\t\t\tfinal RedirectPolicy policy = page.isPageStateless()\n-\t\t\t\t\t? RedirectPolicy.NEVER_REDIRECT : RedirectPolicy.AUTO_REDIRECT;\n-\n \t\t\t\trequestCycle.scheduleRequestHandlerAfterCurrent(new RenderPageRequestHandler(\n \t\t\t\t\tpageProvider, policy));\n \t\t\t}\ndiff --git a/wicket-core/src/main/java/org/apache/wicket/request/handler/PageProvider.java b/wicket-core/src/main/java/org/apache/wicket/request/handler/PageProvider.java\nindex f000badad4..ed9af8f2d7 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/request/handler/PageProvider.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/request/handler/PageProvider.java\n@@ -59,6 +59,8 @@\n \n \tprivate PageParameters pageParameters;\n \n+\tprivate Boolean isNewInstance = null;\n+\n \t/**\n \t * Creates a new page provider object. Upon calling of {@link #getPageInstance()} this provider\n \t * will return page instance with specified id.\n@@ -198,17 +200,20 @@ else if (isNewPageInstance() == false)\n \t */\n \tpublic boolean isNewPageInstance()\n \t{\n-\t\tboolean isNew = pageInstance == null;\n-\t\tif (isNew && pageId != null)\n+\t\tif (isNewInstance == null)\n+\t\t{\n+\t\t\tisNewInstance = pageInstance == null;\n+\t\t\tif (isNewInstance && pageId != null)\n \t\t\t{\n \t\t\t\tIRequestablePage storedPageInstance = getStoredPage(pageId);\n \t\t\t\tif (storedPageInstance != null)\n \t\t\t\t{\n \t\t\t\t\tpageInstance = storedPageInstance;\n-\t\t\t\tisNew = false;\n+\t\t\t\t\tisNewInstance = false;\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\treturn isNew;\n+\t\treturn isNewInstance;\n \t}\n \n \t/**\n@@ -292,6 +297,14 @@ private IRequestablePage getStoredPage(final int pageId)\n \t\t\t(pageClass == null || pageClass.equals(storedPageInstance.getClass())))\n \t\t{\n \t\t\tpageInstance = storedPageInstance;\n+\n+\t\t\tif (pageInstance != null)\n+\t\t\t{\n+\t\t\t\tif (renderCount != null && pageInstance.getRenderCount() != renderCount)\n+\t\t\t\t{\n+\t\t\t\t\tthrow new StalePageException(pageInstance);\n+\t\t\t\t}\n+\t\t\t}\n \t\t}\n \t\treturn storedPageInstance;\n \t}\n", 
  "project": "wicket", 
  "linesAdd": 50, 
  "jira_id": "4116", 
  "nb_skipped": 2, 
  "commit": "4624ab3d", 
  "nb_failure": 0, 
  "linesRem": 9
}