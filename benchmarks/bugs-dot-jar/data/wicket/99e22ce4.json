{
  "files": 3, 
  "nb_test": 384, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "wicket.versioning.ReattachVersioningTest"
  ], 
  "patch": "diff --git a/wicket/src/main/java/wicket/MarkupContainer.java b/wicket/src/main/java/wicket/MarkupContainer.java\nindex 3234316ff4..395943cb6c 100644\n--- a/wicket/src/main/java/wicket/MarkupContainer.java\n+++ b/wicket/src/main/java/wicket/MarkupContainer.java\n@@ -90,7 +90,7 @@\n  * @see MarkupStream\n  * @author Jonathan Locke\n  */\n-public abstract class MarkupContainer<T> extends Component<T> implements Iterable<Component>\n+public abstract class MarkupContainer<T> extends Component<T> implements Iterable<Component<?>>\n {\n \tprivate static final long serialVersionUID = 1L;\n \n@@ -124,7 +124,7 @@\n \t/**\n \t * @see wicket.Component#Component(MarkupContainer,String)\n \t */\n-\tpublic MarkupContainer(MarkupContainer parent, final String id)\n+\tpublic MarkupContainer(MarkupContainer<?> parent, final String id)\n \t{\n \t\tsuper(parent, id);\n \t}\n@@ -132,7 +132,7 @@ public MarkupContainer(MarkupContainer parent, final String id)\n \t/**\n \t * @see wicket.Component#Component(MarkupContainer,String, IModel)\n \t */\n-\tpublic MarkupContainer(MarkupContainer parent, final String id, IModel<T> model)\n+\tpublic MarkupContainer(MarkupContainer<?> parent, final String id, IModel<T> model)\n \t{\n \t\tsuper(parent, id, model);\n \t}\n@@ -166,7 +166,7 @@ public MarkupFragment getMarkupFragment(final String id)\n \t *             operation.\n \t * @return This\n \t */\n-\tfinal MarkupContainer add(final Component<?> child)\n+\tfinal MarkupContainer<?> add(final Component<?> child)\n \t{\n \t\tif (child == null)\n \t\t{\n@@ -180,8 +180,7 @@ final MarkupContainer add(final Component<?> child)\n \t\t}\n \n \t\t// Add to map\n-\t\taddedComponent(child);\n-\t\tComponent replaced = put(child);\n+\t\tComponent<?> replaced = put(child);\n \t\tchild.setFlag(FLAG_REMOVED_FROM_PARENT, false);\n \t\tif (replaced != null)\n \t\t{\n@@ -195,6 +194,8 @@ final MarkupContainer add(final Component<?> child)\n \t\t\tString replacedId = (replaced.hasMarkupIdMetaData()) ? replaced.getMarkupId() : null;\n \t\t\tchild.setMarkupIdMetaData(replacedId);\n \t\t}\n+\t\t// now call addedComponent (after removedComponent)\n+\t\taddedComponent(child);\n \n \t\treturn this;\n \t}\n@@ -229,7 +230,7 @@ final MarkupContainer add(final Component<?> child)\n \t *            True if all descendents should be considered\n \t * @return True if the component is contained in this container\n \t */\n-\tpublic final boolean contains(final Component component, final boolean recurse)\n+\tpublic final boolean contains(final Component<?> component, final boolean recurse)\n \t{\n \t\tif (component == null)\n \t\t{\n@@ -239,10 +240,10 @@ public final boolean contains(final Component component, final boolean recurse)\n \t\tif (recurse)\n \t\t{\n \t\t\t// Start at component and continue while we're not out of parents\n-\t\t\tfor (Component current = component; current != null;)\n+\t\t\tfor (Component<?> current = component; current != null;)\n \t\t\t{\n \t\t\t\t// Get parent\n-\t\t\t\tfinal MarkupContainer parent = current.getParent();\n+\t\t\t\tfinal MarkupContainer<?> parent = current.getParent();\n \n \t\t\t\t// If this container is the parent, then the component is\n \t\t\t\t// recursively contained by this container\n@@ -274,7 +275,7 @@ public final boolean contains(final Component component, final boolean recurse)\n \t * @return The component at the path\n \t */\n \t@Override\n-\tpublic final Component get(final String path)\n+\tpublic final Component<?> get(final String path)\n \t{\n \t\t// Reference to this container\n \t\tif (path == null || path.trim().equals(\"\"))\n@@ -286,7 +287,7 @@ public final Component get(final String path)\n \t\tfinal String id = Strings.firstPathComponent(path, Component.PATH_SEPARATOR);\n \n \t\t// Get child by id\n-\t\tComponent child = children_get(id);\n+\t\tComponent<?> child = children_get(id);\n \n \t\t// If the container is transparent, than ask its parent.\n \t\t// ParentResolver does something quite similar, but because of <head>,\n@@ -341,7 +342,7 @@ public String getMarkupType()\n \t *             Thrown if a child with the same id is replaced by the add\n \t *             operation.\n \t */\n-\tpublic void internalAdd(final Component child)\n+\tpublic void internalAdd(final Component<?> child)\n \t{\n \t\tif (log.isDebugEnabled())\n \t\t{\n@@ -372,7 +373,7 @@ public void internalAttach()\n \t\t\tfor (int i = 0; i < size; i++)\n \t\t\t{\n \t\t\t\t// Get next child\n-\t\t\t\tfinal Component child = children_get(i);\n+\t\t\t\tfinal Component<?> child = children_get(i);\n \n \t\t\t\t// Ignore feedback as that was done in Page\n \t\t\t\tif (!(child instanceof IFeedback))\n@@ -409,7 +410,7 @@ public void internalDetach()\n \t\tsuper.internalDetach();\n \n \t\t// Loop through child components\n-\t\tfor (Component child : this)\n+\t\tfor (Component<?> child : this)\n \t\t{\n \t\t\t// Call end request on the child\n \t\t\tchild.internalDetach();\n@@ -420,9 +421,9 @@ public void internalDetach()\n \t * @return Iterator that iterates through children in the order they were\n \t *         added\n \t */\n-\tpublic final Iterator<Component> iterator()\n+\tpublic final Iterator<Component<?>> iterator()\n \t{\n-\t\treturn new Iterator<Component>()\n+\t\treturn new Iterator<Component<?>>()\n \t\t{\n \t\t\tint index = 0;\n \n@@ -431,7 +432,7 @@ public boolean hasNext()\n \t\t\t\treturn index < children_size();\n \t\t\t}\n \n-\t\t\tpublic Component next()\n+\t\t\tpublic Component<?> next()\n \t\t\t{\n \t\t\t\treturn children_get(index++);\n \t\t\t}\n@@ -449,9 +450,9 @@ public void remove()\n \t * @return Iterator that iterates over children in the order specified by\n \t *         comparator\n \t */\n-\tpublic final Iterator<Component> iterator(Comparator<Component> comparator)\n+\tpublic final Iterator<Component<?>> iterator(Comparator<Component<?>> comparator)\n \t{\n-\t\tfinal List<Component> sorted;\n+\t\tfinal List<Component<?>> sorted;\n \t\tif (children == null)\n \t\t{\n \t\t\tsorted = Collections.emptyList();\n@@ -460,12 +461,12 @@ public void remove()\n \t\t{\n \t\t\tif (children instanceof Component)\n \t\t\t{\n-\t\t\t\tsorted = new ArrayList<Component>(1);\n-\t\t\t\tsorted.add((Component)children);\n+\t\t\t\tsorted = new ArrayList<Component<?>>(1);\n+\t\t\t\tsorted.add((Component<?>)children);\n \t\t\t}\n \t\t\telse\n \t\t\t{\n-\t\t\t\tsorted = Arrays.asList((Component[])children);\n+\t\t\t\tsorted = Arrays.asList((Component<?>[])children);\n \t\t\t}\n \t\t}\n \t\tCollections.sort(sorted, comparator);\n@@ -476,7 +477,7 @@ public void remove()\n \t * @param component\n \t *            Component to remove from this container\n \t */\n-\tpublic void remove(final Component component)\n+\tpublic void remove(final Component<?> component)\n \t{\n \t\tif (component == null)\n \t\t{\n@@ -503,7 +504,7 @@ public final void remove(final String id)\n \t\t\tthrow new IllegalArgumentException(\"argument id may not be null\");\n \t\t}\n \n-\t\tfinal Component component = get(id);\n+\t\tfinal Component<?> component = get(id);\n \t\tif (component != null)\n \t\t{\n \t\t\tremove(component);\n@@ -685,7 +686,7 @@ public String toString(final boolean detailed)\n \t\t\t\tfor (int i = 0; i < size; i++)\n \t\t\t\t{\n \t\t\t\t\t// Get next child\n-\t\t\t\t\tfinal Component child = children_get(i);\n+\t\t\t\t\tfinal Component<?> child = children_get(i);\n \t\t\t\t\tif (i != 0)\n \t\t\t\t\t{\n \t\t\t\t\t\tbuffer.append(' ');\n@@ -709,7 +710,7 @@ public String toString(final boolean detailed)\n \t * @return The return value from a visitor which halted the traversal, or\n \t *         null if the entire traversal occurred\n \t */\n-\tpublic final Object visitChildren(final Class clazz, final IVisitor visitor)\n+\tpublic final Object visitChildren(final Class<?> clazz, final IVisitor visitor)\n \t{\n \t\tif (visitor == null)\n \t\t{\n@@ -720,7 +721,7 @@ public final Object visitChildren(final Class clazz, final IVisitor visitor)\n \t\tfor (int i = 0; i < children_size(); i++)\n \t\t{\n \t\t\t// Get next child component\n-\t\t\tfinal Component child = children_get(i);\n+\t\t\tfinal Component<?> child = children_get(i);\n \t\t\tObject value = null;\n \n \t\t\t// Is the child of the correct class (or was no class specified)?\n@@ -780,7 +781,7 @@ public final Object visitChildren(final IVisitor visitor)\n \tprotected final MarkupStream findMarkupStream()\n \t{\n \t\t// Start here\n-\t\tMarkupContainer c = this;\n+\t\tMarkupContainer<?> c = this;\n \n \t\t// Walk up hierarchy until markup found\n \t\twhile (c.getMarkupStream() == null)\n@@ -1025,7 +1026,7 @@ private final void addedComponent(final Component component)\n \t * @param child\n \t *            Child to add\n \t */\n-\tprivate final void children_add(final Component child)\n+\tprivate final void children_add(final Component<?> child)\n \t{\n \t\tif (this.children == null)\n \t\t{\n@@ -1037,7 +1038,7 @@ private final void children_add(final Component child)\n \t\t\tfinal int size = children_size();\n \n \t\t\t// Create array that holds size + 1 elements\n-\t\t\tfinal Component[] children = new Component[size + 1];\n+\t\t\tfinal Component<?>[] children = new Component[size + 1];\n \n \t\t\t// Loop through existing children copying them\n \t\t\tfor (int i = 0; i < size; i++)\n@@ -1059,7 +1060,7 @@ private final void children_add(final Component child)\n \t\t{\n \t\t\tif (children instanceof Component)\n \t\t\t{\n-\t\t\t\treturn (Component)children;\n+\t\t\t\treturn (Component<?>)children;\n \t\t\t}\n \t\t\telse\n \t\t\t{\n@@ -1072,11 +1073,11 @@ private final void children_add(final Component child)\n \t\t}\n \t}\n \n-\tprivate final Component children_get(final String id)\n+\tprivate final Component<?> children_get(final String id)\n \t{\n \t\tif (children instanceof Component)\n \t\t{\n-\t\t\tfinal Component component = (Component)children;\n+\t\t\tfinal Component<?> component = (Component<?>)children;\n \t\t\tif (component.getId().equals(id))\n \t\t\t{\n \t\t\t\treturn component;\n@@ -1086,8 +1087,8 @@ private final Component children_get(final String id)\n \t\t{\n \t\t\tif (children != null)\n \t\t\t{\n-\t\t\t\tfinal Component[] components = (Component[])children;\n-\t\t\t\tfor (Component element : components)\n+\t\t\t\tfinal Component<?>[] components = (Component[])children;\n+\t\t\t\tfor (Component<?> element : components)\n \t\t\t\t{\n \t\t\t\t\tif (element.getId().equals(id))\n \t\t\t\t\t{\n@@ -1099,11 +1100,49 @@ private final Component children_get(final String id)\n \t\treturn null;\n \t}\n \n+\t/**\n+\t * Will search for this specific child instance in the current\n+\t * children. So it will do a identity check, it will not look if the\n+\t * id is already present in the children. Use indexOf(String) for that. \n+\t * @param child\n+\t * @return The index of this child.\n+\t */\n \tprivate final int children_indexOf(Component<?> child)\n \t{\n \t\tif (children instanceof Component)\n \t\t{\n-\t\t\tif (((Component)children).getId().equals(child.getId()))\n+\t\t\tif (children == child)\n+\t\t\t{\n+\t\t\t\treturn 0;\n+\t\t\t}\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tif (children != null)\n+\t\t\t{\n+\t\t\t\tfinal Component<?>[] components = (Component[])children;\n+\t\t\t\tfor (int i = 0; i < components.length; i++)\n+\t\t\t\t{\n+\t\t\t\t\tif (components[i] == child)\n+\t\t\t\t\t{\n+\t\t\t\t\t\treturn i;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn -1;\n+\t}\n+\n+\t/**\n+\t * Will search for the id if it is found in the current children.\n+\t * @param id The id to search for.\n+\t * @return The index of this child.\n+\t */\n+\tprivate final int children_indexOf(String id)\n+\t{\n+\t\tif (children instanceof Component)\n+\t\t{\n+\t\t\tif (((Component<?>)children).getId().equals(id))\n \t\t\t{\n \t\t\t\treturn 0;\n \t\t\t}\n@@ -1112,10 +1151,10 @@ private final int children_indexOf(Component<?> child)\n \t\t{\n \t\t\tif (children != null)\n \t\t\t{\n-\t\t\t\tfinal Component[] components = (Component[])children;\n+\t\t\t\tfinal Component<?>[] components = (Component[])children;\n \t\t\t\tfor (int i = 0; i < components.length; i++)\n \t\t\t\t{\n-\t\t\t\t\tif (components[i].getId().equals(child.getId()))\n+\t\t\t\t\tif (components[i].getId().equals(id))\n \t\t\t\t\t{\n \t\t\t\t\t\treturn i;\n \t\t\t\t\t}\n@@ -1125,7 +1164,7 @@ private final int children_indexOf(Component<?> child)\n \t\treturn -1;\n \t}\n \n-\tprivate final Component children_remove(Component<?> component)\n+\tprivate final Component<?> children_remove(Component<?> component)\n \t{\n \t\tint index = children_indexOf(component);\n \t\tif (index != -1)\n@@ -1135,13 +1174,13 @@ private final Component children_remove(Component<?> component)\n \t\treturn null;\n \t}\n \n-\tprivate final Component children_remove(int index)\n+\tprivate final Component<?> children_remove(int index)\n \t{\n \t\tif (children instanceof Component)\n \t\t{\n \t\t\tif (index == 0)\n \t\t\t{\n-\t\t\t\tfinal Component removed = (Component)children;\n+\t\t\t\tfinal Component<?> removed = (Component<?>)children;\n \t\t\t\tthis.children = null;\n \t\t\t\treturn removed;\n \t\t\t}\n@@ -1152,8 +1191,8 @@ private final Component children_remove(int index)\n \t\t}\n \t\telse\n \t\t{\n-\t\t\tComponent[] c = ((Component[])children);\n-\t\t\tfinal Component removed = c[index];\n+\t\t\tComponent<?>[] c = ((Component[])children);\n+\t\t\tfinal Component<?> removed = c[index];\n \t\t\tif (c.length == 2)\n \t\t\t{\n \t\t\t\tif (index == 0)\n@@ -1171,7 +1210,7 @@ else if (index == 1)\n \t\t\t}\n \t\t\telse\n \t\t\t{\n-\t\t\t\tComponent[] newChildren = new Component[c.length - 1];\n+\t\t\t\tComponent<?>[] newChildren = new Component[c.length - 1];\n \t\t\t\tint j = 0;\n \t\t\t\tfor (int i = 0; i < c.length; i++)\n \t\t\t\t{\n@@ -1186,19 +1225,19 @@ else if (index == 1)\n \t\t}\n \t}\n \n-\tprivate final Component children_set(int index, Component child)\n+\tprivate final Component<?> children_set(int index, Component<?> child)\n \t{\n-\t\tfinal Component replaced;\n+\t\tfinal Component<?> replaced;\n \t\tif (index < children_size())\n \t\t{\n \t\t\tif (children == null || children instanceof Component)\n \t\t\t{\n-\t\t\t\treplaced = (Component)children;\n+\t\t\t\treplaced = (Component<?>)children;\n \t\t\t\tchildren = child;\n \t\t\t}\n \t\t\telse\n \t\t\t{\n-\t\t\t\tfinal Component[] children = (Component[])this.children;\n+\t\t\t\tfinal Component<?>[] children = (Component[])this.children;\n \t\t\t\treplaced = children[index];\n \t\t\t\tchildren[index] = child;\n \t\t\t}\n@@ -1234,9 +1273,12 @@ private final int children_size()\n \t *            The child to put into the map\n \t * @return Any component that was replaced\n \t */\n-\tprivate final Component put(final Component<?> child)\n+\tprivate final Component<?> put(final Component<?> child)\n \t{\n-\t\tint index = children_indexOf(child);\n+\t\t// search for the child by id. So that it will\n+\t\t// find the right index for the id instead of looking\n+\t\t// if the component itself is already children.\n+\t\tint index = children_indexOf(child.getId());\n \t\tif (index == -1)\n \t\t{\n \t\t\tchildren_add(child);\n@@ -1410,7 +1452,7 @@ public void renderHead(final IHeaderResponse response)\n \t\t{\n \t\t\tsuper.renderHead(response);\n \n-\t\t\tfor (Component child : this)\n+\t\t\tfor (Component<?> child : this)\n \t\t\t{\n \t\t\t\tchild.renderHead(response);\n \t\t\t}\ndiff --git a/wicket/src/main/java/wicket/markup/repeater/RefreshingView.java b/wicket/src/main/java/wicket/markup/repeater/RefreshingView.java\nindex 87d61fe04f..29fe8c487f 100644\n--- a/wicket/src/main/java/wicket/markup/repeater/RefreshingView.java\n+++ b/wicket/src/main/java/wicket/markup/repeater/RefreshingView.java\n@@ -170,7 +170,7 @@ protected void internalOnAttach()\n \t */\r\n \tpublic Iterator<Item<T>> getItems()\r\n \t{\r\n-\t\tfinal Iterator<Component> iterator = iterator();\r\n+\t\tfinal Iterator<Component<?>> iterator = iterator();\r\n \t\treturn new Iterator<Item<T>>()\r\n \t\t{\r\n \t\t\tpublic boolean hasNext()\r\ndiff --git a/wicket/src/main/java/wicket/markup/repeater/data/GridView.java b/wicket/src/main/java/wicket/markup/repeater/data/GridView.java\nindex 1f306fc110..d1984e8b47 100644\n--- a/wicket/src/main/java/wicket/markup/repeater/data/GridView.java\n+++ b/wicket/src/main/java/wicket/markup/repeater/data/GridView.java\n@@ -303,7 +303,7 @@ protected void addItems(Iterator<Item<T>> items)\n \t */\r\n \tprivate static class ItemsIterator<T> implements Iterator<Item<T>>\r\n \t{\r\n-\t\tprivate Iterator<Component> rows;\r\n+\t\tprivate Iterator<Component<?>> rows;\r\n \t\tprivate Iterator<Item<T>> cells;\r\n \r\n \t\tprivate Item<T> next;\r\n@@ -312,7 +312,7 @@ protected void addItems(Iterator<Item<T>> items)\n \t\t * @param rows\r\n \t\t *            iterator over child row views\r\n \t\t */\r\n-\t\tpublic ItemsIterator(Iterator<Component> rows)\r\n+\t\tpublic ItemsIterator(Iterator<Component<?>> rows)\r\n \t\t{\r\n \t\t\tthis.rows = rows;\r\n \t\t\tfindNext();\r\n", 
  "project": "wicket", 
  "linesAdd": 96, 
  "jira_id": "172", 
  "nb_skipped": 0, 
  "commit": "99e22ce4", 
  "nb_failure": 1, 
  "linesRem": 54
}