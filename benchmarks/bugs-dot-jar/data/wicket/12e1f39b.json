{
  "files": 1, 
  "nb_test": 927, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.wicket.validation.validator.CreditCardValidatorTest"
  ], 
  "patch": "diff --git a/wicket/src/main/java/org/apache/wicket/validation/validator/CreditCardValidator.java b/wicket/src/main/java/org/apache/wicket/validation/validator/CreditCardValidator.java\nindex 96ba9c012a..b84d4611da 100644\n--- a/wicket/src/main/java/org/apache/wicket/validation/validator/CreditCardValidator.java\n+++ b/wicket/src/main/java/org/apache/wicket/validation/validator/CreditCardValidator.java\n@@ -19,27 +19,586 @@\n import org.apache.wicket.validation.IValidatable;\n \n /**\n- * Performs the so-called \"mod 10\" algorithm to check the validity of credit card numbers such as\n- * VISA.\n+ * Checks if a credit card number is valid. The number will be checked for \"American Express\",\n+ * \"China UnionPay\", \"Diners Club Carte Blanche\", \"Diners Club International\",\n+ * \"Diners Club US & Canada\", \"Discover Card\", \"JCB\", \"Laser\", \"Maestro\", \"MasterCard\", \"Solo\",\n+ * \"Switch\", \"Visa\" and \"Visa Electron\". If none of those apply to the credit card number, the\n+ * credit card number is considered invalid.\n+ * \n  * <p>\n- * In addition to this, the credit card number can be further validated by its length and prefix,\n- * but those properties depend upon the credit card type, and such validation is not performed by\n- * this validator.\n+ * Card prefixes and lengths have been taken from <a\n+ * href=\"http://en.wikipedia.org/w/index.php?title=Bank_card_number&oldid=322132931\">Wikipedia</a>.\n  * \n  * @author Johan Compagner\n+ * @author Joachim F. Rohde\n  * @since 1.2.6\n  */\n public class CreditCardValidator extends AbstractValidator<String>\n {\n \tprivate static final long serialVersionUID = 1L;\n \n+\t/** The credit card number, which should be validated. */\n+\tprivate String creditCardNumber = null;\n+\n+\t/** The ID which represents the credit card institute. */\n+\tprivate int cardId = -1;\n+\n+\t/** */\n+\tpublic static final int INVALID = -1;\n+\tpublic static final int AMERICAN_EXPRESS = 0;\n+\tpublic static final int CHINA_UNIONPAY = 1;\n+\tpublic static final int DINERS_CLUB_CARTE_BLANCHE = 2;\n+\tpublic static final int DINERS_CLUB_INTERNATIONAL = 3;\n+\tpublic static final int DINERS_CLUB_US_AND_CANADA = 4;\n+\tpublic static final int DISCOVER_CARD = 5;\n+\tpublic static final int JCB = 6;\n+\tpublic static final int LASER = 7;\n+\tpublic static final int MAESTRO = 8;\n+\tpublic static final int MASTERCARD = 9;\n+\tpublic static final int SOLO = 10;\n+\tpublic static final int SWITCH = 11;\n+\tpublic static final int VISA = 12;\n+\tpublic static final int VISA_ELECTRON = 13;\n+\n+\tprivate static final String[] creditCardNames = { \"American Express\", \"China UnionPay\",\n+\t\t\t\"Diners Club Carte Blanche\", \"Diners Club International\", \"Diners Club US & Canada\",\n+\t\t\t\"Discover Card\", \"JCB\", \"Laser\", \"Maestro\", \"MasterCard\", \"Solo\", \"Switch\", \"Visa\",\n+\t\t\t\"Visa Electron\" };\n+\n \t/**\n \t * @see AbstractValidator#onValidate(IValidatable)\n \t */\n \t@Override\n \tprotected void onValidate(IValidatable<String> validatable)\n \t{\n-\t\tString input = (validatable.getValue());\n+\t\tcreditCardNumber = validatable.getValue();\n+\t\tif (!isLengthAndPrefixCorrect(creditCardNumber))\n+\t\t{\n+\t\t\terror(validatable);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Checks if the credit card number can be determined as a valid number.\n+\t * \n+\t * @param creditCardNumber\n+\t *            the credit card number as a string\n+\t * @return <code>TRUE</code> if the credit card number could be determined as a valid number,\n+\t *         else <code>FALSE</code> is returned\n+\t */\n+\tprivate boolean isLengthAndPrefixCorrect(String creditCardNumber)\n+\t{\n+\t\tif (creditCardNumber != null)\n+\t\t{\n+\t\t\t// strip spaces and dashes\n+\t\t\tcreditCardNumber = creditCardNumber.replaceAll(\"[ -]\", \"\");\n+\t\t}\n+\n+\t\t// the length of the credit card number has to be between 12 and 19.\n+\t\t// else the number is invalid.\n+\t\tif (creditCardNumber != null && creditCardNumber.length() >= 12 &&\n+\t\t\tcreditCardNumber.length() <= 19)\n+\t\t{\n+\t\t\tif (isAmericanExpress(creditCardNumber))\n+\t\t\t{\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\telse if (isChinaUnionPay(creditCardNumber))\n+\t\t\t{\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\telse if (isDinersClubCarteBlanche(creditCardNumber))\n+\t\t\t{\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\telse if (isDinersClubInternational(creditCardNumber))\n+\t\t\t{\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\telse if (isDinersClubUsAndCanada(creditCardNumber))\n+\t\t\t{\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\telse if (isDiscoverCard(creditCardNumber))\n+\t\t\t{\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\telse if (isJCB(creditCardNumber))\n+\t\t\t{\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\telse if (isLaser(creditCardNumber))\n+\t\t\t{\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\telse if (isMaestro(creditCardNumber))\n+\t\t\t{\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\telse if (isMastercard(creditCardNumber))\n+\t\t\t{\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\telse if (isSolo(creditCardNumber))\n+\t\t\t{\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\telse if (isSwitch(creditCardNumber))\n+\t\t\t{\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\telse if (isVisa(creditCardNumber))\n+\t\t\t{\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\telse if (isVisaElectron(creditCardNumber))\n+\t\t\t{\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\telse if (isUnknown(creditCardNumber))\n+\t\t\t{\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * Can be used (subclassed) to extend the test with a credit card not yet known by the\n+\t * validator.\n+\t * \n+\t * @param creditCardNumber\n+\t *            the credit card number as a string\n+\t * @return <code>TRUE</code> if the credit card number seems to be a valid American Express\n+\t *         number. Else <code>FALSE</code> will be returned\n+\t */\n+\tprotected boolean isUnknown(String creditCardNumber)\n+\t{\n+\t\treturn false;\n+\t}\n+\n+\t/**\n+\t * Check if the credit card is an American Express. An American Express number has to start with\n+\t * 34 or 37 and has to have a length of 15. The number has to be validated with the Luhn\n+\t * alorithm.\n+\t * \n+\t * @param creditCardNumber\n+\t *            the credit card number as a string\n+\t * @return <code>TRUE</code> if the credit card number seems to be a valid American Express\n+\t *         number. Else <code>FALSE</code> will be returned\n+\t */\n+\tprivate boolean isAmericanExpress(String creditCardNumber)\n+\t{\n+\t\tcardId = CreditCardValidator.INVALID;\n+\t\tboolean returnValue = false;\n+\n+\t\tif (creditCardNumber.length() == 15 &&\n+\t\t\t(creditCardNumber.startsWith(\"34\") || creditCardNumber.startsWith(\"37\")))\n+\t\t{\n+\t\t\tif (isChecksumCorrect(creditCardNumber))\n+\t\t\t{\n+\t\t\t\tcardId = CreditCardValidator.AMERICAN_EXPRESS;\n+\t\t\t\treturnValue = true;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn returnValue;\n+\t}\n+\n+\t/**\n+\t * Check if the credit card is a China UnionPay. A China UnionPay number has to start with 622\n+\t * (622126-622925) and has to have a length between 16 and 19. No further validation takes\n+\t * place.<br/>\n+\t * <br/>\n+\t * \n+\t * @param creditCardNumber\n+\t *            the credit card number as a string\n+\t * @return <code>TRUE</code> if the credit card number seems to be a valid China UnionPay\n+\t *         number. Else <code>FALSE</code> will be returned.\n+\t */\n+\tprivate boolean isChinaUnionPay(String creditCardNumber)\n+\t{\n+\t\tcardId = CreditCardValidator.INVALID;\n+\t\tboolean returnValue = false;\n+\n+\t\tif ((creditCardNumber.length() >= 16 && creditCardNumber.length() <= 19) &&\n+\t\t\t(creditCardNumber.startsWith(\"622\")))\n+\t\t{\n+\t\t\tint firstDigits = Integer.parseInt(creditCardNumber.substring(0, 5));\n+\t\t\tif (firstDigits >= 622126 && firstDigits <= 622925)\n+\t\t\t{\n+\t\t\t\tcardId = CreditCardValidator.CHINA_UNIONPAY;\n+\t\t\t\treturnValue = true;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn returnValue;\n+\t}\n+\n+\t/**\n+\t * Check if the credit card is a Diners Club Carte Blanche. A Diners Club Carte Blanche number\n+\t * has to start with a number between 300 and 305 and has to have a length of 14. The number has\n+\t * to be validated with the Luhn alorithm.\n+\t * \n+\t * @param creditCardNumber\n+\t *            the credit card number as a string\n+\t * @return <code>TRUE</code> if the credit card number seems to be a valid Diners Club Carte\n+\t *         Blanche number. Else <code>FALSE</code> will be returned\n+\t */\n+\tprivate boolean isDinersClubCarteBlanche(String creditCardNumber)\n+\t{\n+\t\tcardId = CreditCardValidator.INVALID;\n+\t\tboolean returnValue = false;\n+\n+\t\tif (creditCardNumber.length() == 14 && creditCardNumber.startsWith(\"30\"))\n+\t\t{\n+\t\t\tint firstDigits = Integer.parseInt(creditCardNumber.substring(0, 3));\n+\t\t\tif (firstDigits >= 300 && firstDigits <= 305 && isChecksumCorrect(creditCardNumber))\n+\t\t\t{\n+\t\t\t\tcardId = CreditCardValidator.DINERS_CLUB_CARTE_BLANCHE;\n+\t\t\t\treturnValue = true;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn returnValue;\n+\t}\n+\n+\t/**\n+\t * Check if the credit card is a Diners Club International. A Diners Club International number\n+\t * has to start with the number 36 and has to have a length of 14. The number has to be\n+\t * validated with the Luhn alorithm.\n+\t * \n+\t * @param creditCardNumber\n+\t *            the credit card number as a string\n+\t * @return <code>TRUE</code> if the credit card number seems to be a valid Diners Club\n+\t *         International number. Else <code>FALSE</code> will be returned\n+\t */\n+\tprivate boolean isDinersClubInternational(String creditCardNumber)\n+\t{\n+\t\tcardId = CreditCardValidator.INVALID;\n+\t\tboolean returnValue = false;\n+\n+\t\tif (creditCardNumber.length() == 14 && creditCardNumber.startsWith(\"36\") &&\n+\t\t\tisChecksumCorrect(creditCardNumber))\n+\t\t{\n+\t\t\tcardId = CreditCardValidator.DINERS_CLUB_INTERNATIONAL;\n+\t\t\treturnValue = true;\n+\t\t}\n+\n+\t\treturn returnValue;\n+\t}\n+\n+\t/**\n+\t * Check if the credit card is a Diners Club US & Canada. A Diners Club US & Canada number has\n+\t * to start with the number 54 or 55 and has to have a length of 16. The number has to be\n+\t * validated with the Luhn alorithm.\n+\t * \n+\t * @param creditCardNumber\n+\t *            the credit card number as a string\n+\t * @return <code>TRUE</code> if the credit card number seems to be a valid Diners Club US &\n+\t *         Canada number. Else <code>FALSE</code> will be returned\n+\t */\n+\tprivate boolean isDinersClubUsAndCanada(String creditCardNumber)\n+\t{\n+\t\tcardId = CreditCardValidator.INVALID;\n+\t\tboolean returnValue = false;\n+\n+\t\tif (creditCardNumber.length() == 16 &&\n+\t\t\t(creditCardNumber.startsWith(\"54\") || creditCardNumber.startsWith(\"55\")) &&\n+\t\t\tisChecksumCorrect(creditCardNumber))\n+\t\t{\n+\t\t\tcardId = CreditCardValidator.DINERS_CLUB_US_AND_CANADA;\n+\t\t\treturnValue = true;\n+\t\t}\n+\n+\t\treturn returnValue;\n+\t}\n+\n+\t/**\n+\t * Check if the credit card is a Discover Card. A Discover Card number has to start with 6011,\n+\t * 622126-622925, 644-649 or 65 and has to have a length of 16. The number has to be validated\n+\t * with the Luhn alorithm.\n+\t * \n+\t * @param creditCardNumber\n+\t *            the credit card number as a string\n+\t * @return <code>TRUE</code> if the credit card number seems to be a valid Discover Card number.\n+\t *         Else <code>FALSE</code> will be returned\n+\t */\n+\tprivate boolean isDiscoverCard(String creditCardNumber)\n+\t{\n+\t\tcardId = CreditCardValidator.INVALID;\n+\t\tboolean returnValue = false;\n+\n+\t\tif (creditCardNumber.length() == 16 && creditCardNumber.startsWith(\"6\") &&\n+\t\t\tisChecksumCorrect(creditCardNumber))\n+\t\t{\n+\t\t\tint firstThreeDigits = Integer.parseInt(creditCardNumber.substring(0, 3));\n+\t\t\tint firstSixDigits = Integer.parseInt(creditCardNumber.substring(0, 6));\n+\t\t\tif (creditCardNumber.startsWith(\"6011\") || creditCardNumber.startsWith(\"65\") ||\n+\t\t\t\t(firstThreeDigits >= 644 && firstThreeDigits <= 649) ||\n+\t\t\t\t(firstSixDigits >= 622126 && firstSixDigits <= 622925))\n+\t\t\t{\n+\t\t\t\tcardId = CreditCardValidator.DISCOVER_CARD;\n+\t\t\t\treturnValue = true;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn returnValue;\n+\t}\n+\n+\t/**\n+\t * Check if the credit card is a JCB. A JCB number has to start with a number between 3528 and\n+\t * 3589 and has to have a length of 16. The number has to be validated with the Luhn alorithm.\n+\t * \n+\t * @param creditCardNumber\n+\t *            the credit card number as a string\n+\t * @return <code>TRUE</code> if the credit card number seems to be a valid JCB number. Else\n+\t *         <code>FALSE</code> will be returned\n+\t */\n+\tprivate boolean isJCB(String creditCardNumber)\n+\t{\n+\t\tcardId = CreditCardValidator.INVALID;\n+\t\tboolean returnValue = false;\n+\n+\t\tif (creditCardNumber.length() == 16 && isChecksumCorrect(creditCardNumber))\n+\t\t{\n+\t\t\tint firstFourDigits = Integer.parseInt(creditCardNumber.substring(0, 4));\n+\t\t\tif (firstFourDigits >= 3528 && firstFourDigits <= 3589)\n+\t\t\t{\n+\t\t\t\tcardId = CreditCardValidator.JCB;\n+\t\t\t\treturnValue = true;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn returnValue;\n+\t}\n+\n+\t/**\n+\t * Check if the credit card is a Laser. A Laser number has to start with 6304, 6706, 6771 or\n+\t * 6709 and has to have a length between 16 and 19 digits. The number has to be validated with\n+\t * the Luhn alorithm.\n+\t * \n+\t * @param creditCardNumber\n+\t *            the credit card number as a string\n+\t * @return <code>TRUE</code> if the credit card number seems to be a valid Laser number. Else\n+\t *         <code>FALSE</code> will be returned\n+\t */\n+\tprivate boolean isLaser(String creditCardNumber)\n+\t{\n+\t\tcardId = CreditCardValidator.INVALID;\n+\t\tboolean returnValue = false;\n+\n+\t\tif (creditCardNumber.length() >= 16 && creditCardNumber.length() <= 19 &&\n+\t\t\tisChecksumCorrect(creditCardNumber))\n+\t\t{\n+\t\t\tif (creditCardNumber.startsWith(\"6304\") || creditCardNumber.startsWith(\"6706\") ||\n+\t\t\t\tcreditCardNumber.startsWith(\"6771\") || creditCardNumber.startsWith(\"6709\"))\n+\t\t\t{\n+\t\t\t\tcardId = CreditCardValidator.LASER;\n+\t\t\t\treturnValue = true;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn returnValue;\n+\t}\n+\n+\t/**\n+\t * Check if the credit card is a Maestro. A Maestro number has to start with\n+\t * 5018,5020,5038,6304,6759,6761 or 6763 and has to have a length between 12 and 19 digits. The\n+\t * number has to be validated with the Luhn alorithm.\n+\t * \n+\t * @param creditCardNumber\n+\t *            the credit card number as a string\n+\t * @return <code>TRUE</code> if the credit card number seems to be a valid Maestro number. Else\n+\t *         <code>FALSE</code> will be returned\n+\t */\n+\tprivate boolean isMaestro(String creditCardNumber)\n+\t{\n+\t\tcardId = CreditCardValidator.INVALID;\n+\t\tboolean returnValue = false;\n+\n+\t\tif (creditCardNumber.length() >= 12 && creditCardNumber.length() <= 19 &&\n+\t\t\tisChecksumCorrect(creditCardNumber))\n+\t\t{\n+\t\t\tif (creditCardNumber.startsWith(\"5018\") || creditCardNumber.startsWith(\"5020\") ||\n+\t\t\t\tcreditCardNumber.startsWith(\"5038\") || creditCardNumber.startsWith(\"6304\") ||\n+\t\t\t\tcreditCardNumber.startsWith(\"6759\") || creditCardNumber.startsWith(\"6761\") ||\n+\t\t\t\tcreditCardNumber.startsWith(\"6763\"))\n+\t\t\t{\n+\t\t\t\tcardId = CreditCardValidator.MAESTRO;\n+\t\t\t\treturnValue = true;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn returnValue;\n+\t}\n+\n+\t/**\n+\t * Check if the credit card is a Solo. A Solo number has to start with 6334 or 6767 and has to\n+\t * have a length of 16, 18 or 19 digits. The number has to be validated with the Luhn alorithm.\n+\t * \n+\t * @param creditCardNumber\n+\t *            the credit card number as a string\n+\t * @return <code>TRUE</code> if the credit card number seems to be a valid Solo number. Else\n+\t *         <code>FALSE</code> will be returned\n+\t */\n+\tprivate boolean isSolo(String creditCardNumber)\n+\t{\n+\t\tcardId = CreditCardValidator.INVALID;\n+\t\tboolean returnValue = false;\n+\n+\t\tif ((creditCardNumber.length() == 16 || creditCardNumber.length() == 18 || creditCardNumber.length() == 19) &&\n+\t\t\tisChecksumCorrect(creditCardNumber))\n+\t\t{\n+\t\t\tif (creditCardNumber.startsWith(\"6334\") || creditCardNumber.startsWith(\"6767\"))\n+\t\t\t{\n+\t\t\t\tcardId = CreditCardValidator.SOLO;\n+\t\t\t\treturnValue = true;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn returnValue;\n+\t}\n+\n+\t/**\n+\t * Check if the credit card is a Switch. A Switch number has to start with\n+\t * 4903,4905,4911,4936,564182,633110,6333 or 6759 and has to have a length of 16, 18 or 19\n+\t * digits. The number has to be validated with the Luhn alorithm.\n+\t * \n+\t * @param creditCardNumber\n+\t *            the credit card number as a string\n+\t * @return <code>TRUE</code> if the credit card number seems to be a valid Switch number. Else\n+\t *         <code>FALSE</code> will be returned\n+\t */\n+\tprivate boolean isSwitch(String creditCardNumber)\n+\t{\n+\t\tcardId = CreditCardValidator.INVALID;\n+\t\tboolean returnValue = false;\n+\n+\t\tif ((creditCardNumber.length() == 16 || creditCardNumber.length() == 18 || creditCardNumber.length() == 19) &&\n+\t\t\tisChecksumCorrect(creditCardNumber))\n+\t\t{\n+\t\t\tif (creditCardNumber.startsWith(\"4903\") || creditCardNumber.startsWith(\"4905\") ||\n+\t\t\t\tcreditCardNumber.startsWith(\"4911\") || creditCardNumber.startsWith(\"4936\") ||\n+\t\t\t\tcreditCardNumber.startsWith(\"564182\") || creditCardNumber.startsWith(\"633110\") ||\n+\t\t\t\tcreditCardNumber.startsWith(\"6333\") || creditCardNumber.startsWith(\"6759\"))\n+\t\t\t{\n+\t\t\t\tcardId = CreditCardValidator.SWITCH;\n+\t\t\t\treturnValue = true;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn returnValue;\n+\t}\n+\n+\t/**\n+\t * Check if the credit card is a Visa. A Visa number has to start with a 4 and has to have a\n+\t * length of 13 or 16 digits. The number has to be validated with the Luhn alorithm.\n+\t * \n+\t * @param creditCardNumber\n+\t *            the credit card number as a string\n+\t * @return <code>TRUE</code> if the credit card number seems to be a valid Visa number. Else\n+\t *         <code>FALSE</code> will be returned\n+\t */\n+\tprivate boolean isVisa(String creditCardNumber)\n+\t{\n+\t\tcardId = CreditCardValidator.INVALID;\n+\t\tboolean returnValue = false;\n+\n+\t\tif (creditCardNumber.length() == 13 || creditCardNumber.length() == 16)\n+\t\t{\n+\t\t\tif (creditCardNumber.startsWith(\"4\"))\n+\t\t\t{\n+\t\t\t\tcardId = CreditCardValidator.SWITCH;\n+\t\t\t\treturnValue = true;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn returnValue;\n+\t}\n+\n+\t/**\n+\t * Check if the credit card is a Visa Electron. A Visa Electron number has to start with\n+\t * 417500,4917,4913,4508 or 4844 and has to have a length of 16 digits. The number has to be\n+\t * validated with the Luhn alorithm.\n+\t * \n+\t * @param creditCardNumber\n+\t *            the credit card number as a string\n+\t * @return <code>TRUE</code> if the credit card number seems to be a valid Visa Electron number.\n+\t *         Else <code>FALSE</code> will be returned\n+\t */\n+\tprivate boolean isVisaElectron(String creditCardNumber)\n+\t{\n+\t\tcardId = CreditCardValidator.INVALID;\n+\t\tboolean returnValue = false;\n+\n+\t\tif (creditCardNumber.length() == 16 &&\n+\t\t\t(creditCardNumber.startsWith(\"417500\") || creditCardNumber.startsWith(\"4917\") ||\n+\t\t\t\tcreditCardNumber.startsWith(\"4913\") || creditCardNumber.startsWith(\"4508\") || creditCardNumber.startsWith(\"4844\")))\n+\t\t{\n+\t\t\tcardId = CreditCardValidator.VISA_ELECTRON;\n+\t\t\treturnValue = true;\n+\t\t}\n+\n+\t\treturn returnValue;\n+\t}\n+\n+\t/**\n+\t * Check if the credit card is a Mastercard. A Mastercard number has to start with a number\n+\t * between 51 and 55 and has to have a length of 16. The number has to be validated with the\n+\t * Luhn alorithm.\n+\t * \n+\t * @param creditCardNumber\n+\t *            the credit card number as a string\n+\t * @return <code>TRUE</code> if the credit card number seems to be a valid Mastercard number.\n+\t *         Else <code>FALSE</code> will be returned\n+\t */\n+\tprivate boolean isMastercard(String creditCardNumber)\n+\t{\n+\t\tcardId = CreditCardValidator.INVALID;\n+\t\tboolean returnValue = false;\n+\n+\t\tif (creditCardNumber.length() == 16 && isChecksumCorrect(creditCardNumber))\n+\t\t{\n+\t\t\tint firstTwoDigits = Integer.parseInt(creditCardNumber.substring(0, 2));\n+\t\t\tif (firstTwoDigits >= 51 && firstTwoDigits <= 55)\n+\t\t\t{\n+\t\t\t\tcardId = CreditCardValidator.MASTERCARD;\n+\t\t\t\treturnValue = true;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn returnValue;\n+\t}\n+\n+\t/**\n+\t * Just used for debugging purposes.<br>\n+\t * Due to re-branding (e.g. Switch was re-branded as Maestro in mid 2007) some rules might\n+\t * overlap, but those overlappings are not considered. So it might happen, that a Switch-card is\n+\t * identified as a Maestro. <br>\n+\t * So you shouldn't rely on the name which is returned here.\n+\t * \n+\t * @return the name of the credit card if it could be determined, else an empty string\n+\t */\n+\tprivate String getCardName()\n+\t{\n+\t\treturn (cardId > -1 && cardId < creditCardNames.length ? creditCardNames[cardId] : \"\");\n+\t}\n+\n+\t/**\n+\t * Calculates the checksum of a credit card number using the Luhn algorithm (the so-called\n+\t * \"mod 10\" algorithm).\n+\t * \n+\t * @param creditCardNumber\n+\t *            the credit card number for which the checksum should be calculated\n+\t * @return <code>TRUE</code> if the checksum for the given credit card number is valid, else\n+\t *         return <code>FALSE</code>\n+\t * @see <a href=\"http://en.wikipedia.org/wiki/Luhn_algorithm\">Wikipedie - Luhn algorithm</a>\n+\t */\n+\tprivate boolean isChecksumCorrect(String creditCardNumber)\n+\t{\n+\t\tString input = creditCardNumber;\n \t\tString numberToCheck = input.replaceAll(\"[ -]\", \"\");\n \t\tint nulOffset = '0';\n \t\tint sum = 0;\n@@ -57,9 +616,7 @@ protected void onValidate(IValidatable<String> validatable)\n \t\t\t\tsum += currentDigit;\n \t\t\t}\n \t\t}\n-\t\tif (!((sum % 10) == 0))\n-\t\t{\n-\t\t\terror(validatable);\n-\t\t}\n+\n+\t\treturn (sum % 10) == 0;\n \t}\n }\n", 
  "project": "wicket", 
  "linesAdd": 567, 
  "jira_id": "2552", 
  "nb_skipped": 0, 
  "commit": "12e1f39b", 
  "nb_failure": 0, 
  "linesRem": 10
}