{
  "files": 1, 
  "nb_test": 88, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.wicket.request.UrlTest"
  ], 
  "patch": "diff --git a/wicket-request/src/main/java/org/apache/wicket/request/Url.java b/wicket-request/src/main/java/org/apache/wicket/request/Url.java\nindex 364b5d36e6..9fb454cb63 100755\n--- a/wicket-request/src/main/java/org/apache/wicket/request/Url.java\n+++ b/wicket-request/src/main/java/org/apache/wicket/request/Url.java\n@@ -81,8 +81,7 @@\n \t * \n \t * @author igor\n \t */\n-\tpublic static enum StringMode \n-\t{\n+\tpublic static enum StringMode {\n \t\t/** local urls are rendered without the host name */\n \t\tLOCAL,\n \t\t/**\n@@ -123,13 +122,13 @@ public Url(final Url url)\n \t{\n \t\tArgs.notNull(url, \"url\");\n \n-\t\tthis.protocol = url.protocol;\n-\t\tthis.host = url.host;\n-\t\tthis.port = url.port;\n-\t\tthis.segments = new ArrayList<String>(url.segments);\n-\t\tthis.parameters = new ArrayList<QueryParameter>(url.parameters);\n-\t\tthis.charsetName = url.charsetName;\n-\t\tthis._charset = url._charset;\n+\t\tprotocol = url.protocol;\n+\t\thost = url.host;\n+\t\tport = url.port;\n+\t\tsegments = new ArrayList<String>(url.segments);\n+\t\tparameters = new ArrayList<QueryParameter>(url.parameters);\n+\t\tcharsetName = url.charsetName;\n+\t\t_charset = url._charset;\n \t}\n \n \t/**\n@@ -938,12 +937,12 @@ public void resolveRelative(final Url relative)\n \t{\n \t\tif (getSegments().size() > 0)\n \t\t{\n-\t\t\t// strip the first non-folder segment\n+\t\t\t// strip the first non-folder segment (if it is not empty)\n \t\t\tgetSegments().remove(getSegments().size() - 1);\n \t\t}\n \n-\t\t// remove leading './' (current folder) and empty segments, process any ../ segments from the\n-\t\t// relative url\n+\t\t// remove leading './' (current folder) and empty segments, process any ../ segments from\n+\t\t// the relative url\n \t\twhile (!relative.getSegments().isEmpty())\n \t\t{\n \t\t\tif (\".\".equals(relative.getSegments().get(0)))\n@@ -968,6 +967,11 @@ else if (\"..\".equals(relative.getSegments().get(0)))\n \t\t\t}\n \t\t}\n \n+\t\tif (!getSegments().isEmpty() && relative.getSegments().isEmpty())\n+\t\t{\n+\t\t\tgetSegments().add(\"\");\n+\t\t}\n+\n \t\t// append the remaining relative segments\n \t\tgetSegments().addAll(relative.getSegments());\n \n@@ -1107,32 +1111,37 @@ public String getQueryString()\n \n \n \t/**\n-\t * Try to reduce url by eliminating '..' and '.' from the path where appropriate\n-\t * (this is somehow similar to {@link java.io.File#getCanonicalPath()}).\n-\t * Either by different / unexpected browser behavior or by malicious attacks it \n-\t * can happen that these kind of redundant urls are processed by wicket. These urls \n-\t * can cause some trouble when mapping the request.\n+\t * Try to reduce url by eliminating '..' and '.' from the path where appropriate (this is\n+\t * somehow similar to {@link java.io.File#getCanonicalPath()}). Either by different / unexpected\n+\t * browser behavior or by malicious attacks it can happen that these kind of redundant urls are\n+\t * processed by wicket. These urls can cause some trouble when mapping the request.\n \t * <p/>\n \t * <strong>example:</strong>\n \t * \n \t * the url\n \t * \n-\t * <pre>  /example/..;jsessionid=234792?0</pre> \n+\t * <pre>\n+\t * /example/..;jsessionid=234792?0\n+\t * </pre>\n \t * \n-\t * will not get normalized by the browser due to the ';jsessionid' string that \n-\t * gets appended by the servlet container. After wicket strips the \n-\t * jsessionid part the resulting internal url will be\n+\t * will not get normalized by the browser due to the ';jsessionid' string that gets appended by\n+\t * the servlet container. After wicket strips the jsessionid part the resulting internal url\n+\t * will be\n \t * \n-\t * <pre>  /example/..</pre>\n+\t * <pre>\n+\t * /example/..\n+\t * </pre>\n \t * \n \t * instead of\n \t * \n-\t * <pre>  /</pre>\n+\t * <pre>\n+\t * /\n+\t * </pre>\n \t * \n \t * <p/>\n \t * \n-\t * This code correlates to \n-\t * <a href=\"https://issues.apache.org/jira/browse/WICKET-4303\">WICKET-4303</a>\n+\t * This code correlates to <a\n+\t * href=\"https://issues.apache.org/jira/browse/WICKET-4303\">WICKET-4303</a>\n \t * \n \t * @return canonical url\n \t */\n@@ -1141,9 +1150,9 @@ public Url canonical()\n \t\tUrl url = new Url(this);\n \t\turl.segments.clear();\n \n-\t\tfor (int i = 0; i < this.segments.size(); i++)\n+\t\tfor (int i = 0; i < segments.size(); i++)\n \t\t{\n-\t\t\tfinal String segment = this.segments.get(i);\n+\t\t\tfinal String segment = segments.get(i);\n \n \t\t\t// drop '.' from path\n \t\t\tif (\".\".equals(segment))\n@@ -1152,7 +1161,7 @@ public Url canonical()\n \t\t\t}\n \n \t\t\t// skip segment if following segment is a '..'\n-\t\t\tif ((i + 1) < this.segments.size() && \"..\".equals(this.segments.get(i + 1)))\n+\t\t\tif ((i + 1) < segments.size() && \"..\".equals(segments.get(i + 1)))\n \t\t\t{\n \t\t\t\ti++;\n \t\t\t\tcontinue;\n", 
  "project": "wicket", 
  "linesAdd": 37, 
  "jira_id": "4789", 
  "nb_skipped": 0, 
  "commit": "6f0863f4", 
  "nb_failure": 2, 
  "linesRem": 28
}