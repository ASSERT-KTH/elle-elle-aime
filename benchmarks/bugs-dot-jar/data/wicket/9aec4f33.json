{
  "files": 2, 
  "nb_test": 24, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.wicket.spring.injection.annot.SpringBeanTest"
  ], 
  "patch": "diff --git a/wicket-spring/src/main/java/org/apache/wicket/spring/SpringBeanLocator.java b/wicket-spring/src/main/java/org/apache/wicket/spring/SpringBeanLocator.java\nindex a0227921c1..a2791260eb 100644\n--- a/wicket-spring/src/main/java/org/apache/wicket/spring/SpringBeanLocator.java\n+++ b/wicket-spring/src/main/java/org/apache/wicket/spring/SpringBeanLocator.java\n@@ -19,6 +19,7 @@\n import java.lang.ref.WeakReference;\n \n import org.apache.wicket.proxy.IProxyTargetLocator;\n+import org.apache.wicket.util.lang.Args;\n import org.apache.wicket.util.lang.Objects;\n import org.apache.wicket.core.util.lang.WicketObjects;\n import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n@@ -73,14 +74,8 @@ public SpringBeanLocator(final Class<?> beanType, final ISpringContextLocator lo\n \tpublic SpringBeanLocator(final String beanName, final Class<?> beanType,\n \t\tfinal ISpringContextLocator locator)\n \t{\n-\t\tif (locator == null)\n-\t\t{\n-\t\t\tthrow new IllegalArgumentException(\"[locator] argument cannot be null\");\n-\t\t}\n-\t\tif (beanType == null)\n-\t\t{\n-\t\t\tthrow new IllegalArgumentException(\"[beanType] argument cannot be null\");\n-\t\t}\n+\t\tArgs.notNull(locator, \"locator\");\n+\t\tArgs.notNull(beanType, \"beanType\");\n \n \t\tbeanTypeCache = new WeakReference<Class<?>>(beanType);\n \t\tbeanTypeName = beanType.getName();\n@@ -122,9 +117,6 @@ public boolean isSingletonBean()\n \t\treturn clazz;\n \t}\n \n-\t/**\n-\t * @see org.apache.wicket.proxy.IProxyTargetLocator#locateProxyTarget()\n-\t */\n \t@Override\n \tpublic Object locateProxyTarget()\n \t{\n@@ -174,11 +166,10 @@ public final ISpringContextLocator getSpringContextLocator()\n \t *            bean name\n \t * @param clazz\n \t *            bean class\n-\t * @throws IllegalStateException\n+\t * @throws java.lang.IllegalStateException\n \t * @return found bean\n \t */\n-\tprivate static Object lookupSpringBean(final ApplicationContext ctx, final String name,\n-\t\tfinal Class<?> clazz)\n+\tprivate Object lookupSpringBean(ApplicationContext ctx, String name, Class<?> clazz)\n \t{\n \t\ttry\n \t\t{\n@@ -194,7 +185,7 @@ private static Object lookupSpringBean(final ApplicationContext ctx, final Strin\n \t\tcatch (NoSuchBeanDefinitionException e)\n \t\t{\n \t\t\tthrow new IllegalStateException(\"bean with name [\" + name + \"] and class [\" +\n-\t\t\t\tclazz.getName() + \"] not found\");\n+\t\t\t\tclazz.getName() + \"] not found\", e);\n \t\t}\n \t}\n \ndiff --git a/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java b/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java\nindex 648d2c7ccc..6b7d071164 100644\n--- a/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java\n+++ b/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java\n@@ -110,7 +110,23 @@ public Object getFieldValue(final Field field, final Object fieldOwner)\n \t{\n \t\tif (supportsField(field))\n \t\t{\n-\t\t\tString beanName = getBeanName(field);\n+\t\t\tSpringBean annot = field.getAnnotation(SpringBean.class);\n+\n+\t\t\tString name;\n+\t\t\tboolean required;\n+\t\t\tif (annot != null)\n+\t\t\t{\n+\t\t\t\tname = annot.name();\n+\t\t\t\trequired = annot.required();\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\tNamed named = field.getAnnotation(Named.class);\n+\t\t\t\tname = named != null ? named.value() : \"\";\n+\t\t\t\trequired = false;\n+\t\t\t}\n+\n+\t\t\tString beanName = getBeanName(field, name, required);\n \n \t\t\tif (beanName == null)\n \t\t\t{\n@@ -128,13 +144,26 @@ public Object getFieldValue(final Field field, final Object fieldOwner)\n \t\t\t}\n \n \t\t\tObject target;\n-\t\t\tif (wrapInProxies)\n+\t\t\ttry\n \t\t\t{\n-\t\t\t\ttarget = LazyInitProxyFactory.createProxy(field.getType(), locator);\n+\t\t\t\t// check whether there is a bean with the provided properties\n+\t\t\t\ttarget = locator.locateProxyTarget();\n+\t\t\t}\n+\t\t\tcatch (IllegalStateException isx)\n+\t\t\t{\n+\t\t\t\tif (required)\n+\t\t\t\t{\n+\t\t\t\t\tthrow isx;\n \t\t\t\t}\n \t\t\t\telse\n \t\t\t\t{\n-\t\t\t\ttarget = locator.locateProxyTarget();\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tif (wrapInProxies)\n+\t\t\t{\n+\t\t\t\ttarget = LazyInitProxyFactory.createProxy(field.getType(), locator);\n \t\t\t}\n \n \t\t\t// only put the proxy into the cache if the bean is a singleton\n@@ -156,31 +185,20 @@ public Object getFieldValue(final Field field, final Object fieldOwner)\n \t * @param field\n \t * @return bean name\n \t */\n-\tprivate String getBeanName(final Field field)\n+\tprivate String getBeanName(final Field field, String name, boolean required)\n \t{\n-\t\tSpringBean annot = field.getAnnotation(SpringBean.class);\n-\t\t\n-\t\tString name;\n-\t\tboolean required;\n-\t\tif (annot != null) {\n-\t\t\tname = annot.name();\n-\t\t\trequired = annot.required();\n-\t\t} else {\n-\t\t\tNamed named = field.getAnnotation(Named.class);\n-\t\t\tname = named != null ? named.value() : \"\";\n-\t\t\trequired = false;\n-\t\t}\n \n \t\tif (Strings.isEmpty(name))\n \t\t{\n-\t\t\tname = beanNameCache.get(field.getType());\n+\t\t\tClass<?> fieldType = field.getType();\n+\t\t\tname = beanNameCache.get(fieldType);\n \t\t\tif (name == null)\n \t\t\t{\n-\t\t\t\tname = getBeanNameOfClass(contextLocator.getSpringContext(), field.getType(), required);\n+\t\t\t\tname = getBeanNameOfClass(contextLocator.getSpringContext(), fieldType, required);\n \n \t\t\t\tif (name != null)\n \t\t\t\t{\n-\t\t\t\t\tString tmpName = beanNameCache.putIfAbsent(field.getType(), name);\n+\t\t\t\t\tString tmpName = beanNameCache.putIfAbsent(fieldType, name);\n \t\t\t\t\tif (tmpName != null)\n \t\t\t\t\t{\n \t\t\t\t\t\tname = tmpName;\n", 
  "project": "wicket", 
  "linesAdd": 44, 
  "jira_id": "5662", 
  "nb_skipped": 0, 
  "commit": "9aec4f33", 
  "nb_failure": 1, 
  "linesRem": 35
}