{
  "files": 2, 
  "nb_test": 15, 
  "nb_error": 6, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.wicket.spring.injection.annot.AnnotProxyFieldValueFactoryTest", 
    "org.apache.wicket.spring.SpringBeanLocatorTest"
  ], 
  "patch": "diff --git a/wicket-spring/src/main/java/org/apache/wicket/spring/SpringBeanLocator.java b/wicket-spring/src/main/java/org/apache/wicket/spring/SpringBeanLocator.java\nindex 35d3be3505..dfa21818f2 100644\n--- a/wicket-spring/src/main/java/org/apache/wicket/spring/SpringBeanLocator.java\n+++ b/wicket-spring/src/main/java/org/apache/wicket/spring/SpringBeanLocator.java\n@@ -26,9 +26,11 @@\n import org.apache.wicket.util.lang.Objects;\n import org.apache.wicket.util.lang.WicketObjects;\n import org.apache.wicket.util.string.Strings;\n+import org.springframework.beans.factory.BeanFactory;\n import org.springframework.beans.factory.BeanFactoryUtils;\n import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.support.AbstractApplicationContext;\n@@ -120,14 +122,17 @@ private final String getBeanNameOfClass(final ApplicationContext ctx, final Clas\n \t\twhile (it.hasNext())\n \t\t{\n \t\t\tfinal String possibility = it.next();\n-\t\t\tBeanDefinition beanDef = ((AbstractApplicationContext)ctx).getBeanFactory()\n-\t\t\t\t\t.getBeanDefinition(possibility);\n+\t\t\tif (ctx instanceof AbstractApplicationContext)\n+\t\t\t{\n+\t\t\t\tBeanDefinition beanDef = getBeanDefinition(((AbstractApplicationContext)ctx)\n+\t\t\t\t\t\t.getBeanFactory(), possibility);\n \t\t\t\tif (BeanFactoryUtils.isFactoryDereference(possibility) ||\n \t\t\t\t\t\tpossibility.startsWith(\"scopedTarget.\") || !beanDef.isAutowireCandidate())\n \t\t\t\t{\n \t\t\t\t\tit.remove();\n \t\t\t\t}\n \t\t\t}\n+\t\t}\n \n \t\tif (names.isEmpty())\n \t\t{\n@@ -137,18 +142,23 @@ else if (names.size() > 1)\n \t\t{\n \t\t\tif (ctx instanceof AbstractApplicationContext)\n \t\t\t{\n+\t\t\t\tList<String> primaries = new ArrayList<String>();\n \t\t\t\tfor (String name : names)\n \t\t\t\t{\n-\t\t\t\t\tBeanDefinition beanDef = ((AbstractApplicationContext)ctx).getBeanFactory()\n-\t\t\t\t\t\t\t.getBeanDefinition(name);\n+\t\t\t\t\tBeanDefinition beanDef = getBeanDefinition(((AbstractApplicationContext)ctx)\n+\t\t\t\t\t\t\t.getBeanFactory(), name);\n \t\t\t\t\tif (beanDef instanceof AbstractBeanDefinition)\n \t\t\t\t\t{\n \t\t\t\t\t\tif (((AbstractBeanDefinition)beanDef).isPrimary())\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\treturn name;\n+\t\t\t\t\t\t\tprimaries.add(name);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n+\t\t\t\tif (primaries.size() == 1)\n+\t\t\t\t{\n+\t\t\t\t\treturn primaries.get(0);\n+\t\t\t\t}\n \t\t\t}\n \n \t\t\tStringBuilder msg = new StringBuilder();\n@@ -166,6 +176,28 @@ else if (names.size() > 1)\n \t\t}\n \t}\n \n+\tprivate BeanDefinition getBeanDefinition(ConfigurableListableBeanFactory beanFactory,\n+\t\t\tString name)\n+\t{\n+\t\tif (beanFactory.containsBeanDefinition(name))\n+\t\t{\n+\t\t\treturn beanFactory.getBeanDefinition(name);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tBeanFactory parent = beanFactory.getParentBeanFactory();\n+\t\t\tif (parent != null && parent instanceof ConfigurableListableBeanFactory)\n+\t\t\t{\n+\t\t\t\treturn getBeanDefinition(beanFactory, name);\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\n \t/**\n \t * @return returns whether the bean (the locator is supposed to istantiate) is a singleton or\n \t *         not\ndiff --git a/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java b/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java\nindex 5cf9d0e445..6b3629582c 100644\n--- a/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java\n+++ b/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java\n@@ -29,8 +29,10 @@\n import org.apache.wicket.spring.SpringBeanLocator;\n import org.apache.wicket.util.lang.Generics;\n import org.apache.wicket.util.string.Strings;\n+import org.springframework.beans.factory.BeanFactory;\n import org.springframework.beans.factory.BeanFactoryUtils;\n import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.support.AbstractApplicationContext;\n@@ -187,14 +189,17 @@ private final String getBeanNameOfClass(ApplicationContext ctx, Class< ? > clazz\n \t\twhile (it.hasNext())\n \t\t{\n \t\t\tfinal String possibility = it.next();\n-\t\t\tBeanDefinition beanDef = ((AbstractApplicationContext)ctx).getBeanFactory()\n-\t\t\t\t\t.getBeanDefinition(possibility);\n+\t\t\tif (ctx instanceof AbstractApplicationContext)\n+\t\t\t{\n+\t\t\t\tBeanDefinition beanDef = getBeanDefinition(((AbstractApplicationContext)ctx)\n+\t\t\t\t\t\t.getBeanFactory(), possibility);\n \t\t\t\tif (BeanFactoryUtils.isFactoryDereference(possibility) ||\n \t\t\t\t\t\tpossibility.startsWith(\"scopedTarget.\") || !beanDef.isAutowireCandidate())\n \t\t\t\t{\n \t\t\t\t\tit.remove();\n \t\t\t\t}\n \t\t\t}\n+\t\t}\n \n \t\tif (names.isEmpty())\n \t\t{\n@@ -204,17 +209,22 @@ else if (names.size() > 1)\n \t\t{\n \t\t\tif (ctx instanceof AbstractApplicationContext)\n \t\t\t{\n+\t\t\t\tList<String> primaries = new ArrayList<String>();\n \t\t\t\tfor (String name : names)\n \t\t\t\t{\n-\t\t\t\t\tBeanDefinition beanDef = ((AbstractApplicationContext)ctx).getBeanFactory()\n-\t\t\t\t\t\t\t.getBeanDefinition(name);\n+\t\t\t\t\tBeanDefinition beanDef = getBeanDefinition(((AbstractApplicationContext)ctx)\n+\t\t\t\t\t\t\t.getBeanFactory(), name);\n \t\t\t\t\tif (beanDef instanceof AbstractBeanDefinition)\n \t\t\t\t\t{\n \t\t\t\t\t\tif (((AbstractBeanDefinition)beanDef).isPrimary())\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\treturn name;\n+\t\t\t\t\t\t\tprimaries.add(name);\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n+\t\t\t\tif (primaries.size() == 1)\n+\t\t\t\t{\n+\t\t\t\t\treturn primaries.get(0);\n \t\t\t\t}\n \t\t\t}\n \t\t\tStringBuilder msg = new StringBuilder();\n@@ -232,6 +242,28 @@ else if (names.size() > 1)\n \t\t}\n \t}\n \n+\tprivate BeanDefinition getBeanDefinition(ConfigurableListableBeanFactory beanFactory,\n+\t\t\tString name)\n+\t{\n+\t\tif (beanFactory.containsBeanDefinition(name))\n+\t\t{\n+\t\t\treturn beanFactory.getBeanDefinition(name);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tBeanFactory parent = beanFactory.getParentBeanFactory();\n+\t\t\tif (parent != null && parent instanceof ConfigurableListableBeanFactory)\n+\t\t\t{\n+\t\t\t\treturn getBeanDefinition(beanFactory, name);\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\n \t/**\n \t * @see org.apache.wicket.injection.IFieldValueFactory#supportsField(java.lang.reflect.Field)\n \t */\n", 
  "project": "wicket", 
  "linesAdd": 74, 
  "jira_id": "2900", 
  "nb_skipped": 0, 
  "commit": "0e70ce39", 
  "nb_failure": 0, 
  "linesRem": 10
}