{
  "files": 1, 
  "nb_test": 50, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.wicket.extensions.markup.html.tabs.TabbedPanelVisibilityTest"
  ], 
  "patch": "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/tabs/TabbedPanel.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/tabs/TabbedPanel.java\nindex 10be55dc91..f70ef2bb3c 100644\n--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/tabs/TabbedPanel.java\n+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/tabs/TabbedPanel.java\n@@ -84,7 +84,7 @@\n \t/** the current tab */\n \tprivate int currentTab = -1;\n \n-\tprivate transient Boolean[] tabsVisibilityCache;\n+\tprivate transient VisibilityCache visibilityCache;\n \n \t/**\n \t * Constructor\n@@ -203,6 +203,14 @@ protected LoopItem newTabContainer(final int tabIndex)\n \t\t{\n \t\t\tprivate static final long serialVersionUID = 1L;\n \n+\t\t\t@Override\n+\t\t\tprotected void onConfigure()\n+\t\t\t{\n+\t\t\t\tsuper.onConfigure();\n+\n+\t\t\t\tsetVisible(getVisiblityCache().isVisible(tabIndex));\n+\t\t\t}\n+\n \t\t\t@Override\n \t\t\tprotected void onComponentTag(final ComponentTag tag)\n \t\t\t{\n@@ -218,18 +227,12 @@ protected void onComponentTag(final ComponentTag tag)\n \t\t\t\t{\n \t\t\t\t\tcssClass += ' ' + getSelectedTabCssClass();\n \t\t\t\t}\n-\t\t\t\tif (getIndex() == getTabs().size() - 1)\n+\t\t\t\tif (getVisiblityCache().getLastVisible() == getIndex())\n \t\t\t\t{\n \t\t\t\t\tcssClass += ' ' + getLastTabCssClass();\n \t\t\t\t}\n \t\t\t\ttag.put(\"class\", cssClass.trim());\n \t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic boolean isVisible()\n-\t\t\t{\n-\t\t\t\treturn getTabs().get(tabIndex).isVisible();\n-\t\t\t}\n \t\t};\n \t}\n \n@@ -238,13 +241,13 @@ protected void onBeforeRender()\n \t{\n \t\tint index = getSelectedTab();\n \n-\t\tif ((index == -1) || (isTabVisible(index) == false))\n+\t\tif ((index == -1) || (getVisiblityCache().isVisible(index) == false))\n \t\t{\n \t\t\t// find first visible tab\n \t\t\tindex = -1;\n \t\t\tfor (int i = 0; i < tabs.size(); i++)\n \t\t\t{\n-\t\t\t\tif (isTabVisible(i))\n+\t\t\t\tif (getVisiblityCache().isVisible(i))\n \t\t\t\t{\n \t\t\t\t\tindex = i;\n \t\t\t\t\tbreak;\n@@ -253,9 +256,7 @@ protected void onBeforeRender()\n \n \t\t\tif (index != -1)\n \t\t\t{\n-\t\t\t\t/*\n-\t\t\t\t * found a visible tab, so select it\n-\t\t\t\t */\n+\t\t\t\t// found a visible tab, so select it\n \t\t\t\tsetSelectedTab(index);\n \t\t\t}\n \t\t}\n@@ -401,7 +402,7 @@ private void setCurrentTab(int index)\n \n \t\tfinal Component component;\n \n-\t\tif (currentTab == -1 || (tabs.size() == 0) || !isTabVisible(currentTab))\n+\t\tif (currentTab == -1 || (tabs.size() == 0) || !getVisiblityCache().isVisible(currentTab))\n \t\t{\n \t\t\t// no tabs or the current tab is not visible\n \t\t\tcomponent = newPanel();\n@@ -443,32 +444,77 @@ public final int getSelectedTab()\n \t\treturn (Integer)getDefaultModelObject();\n \t}\n \n+\t@Override\n+\tprotected void onDetach()\n+\t{\n+\t\tvisibilityCache = null;\n+\n+\t\tsuper.onDetach();\n+\t}\n+\n+\tprivate VisibilityCache getVisiblityCache()\n+\t{\n+\t\tif (visibilityCache == null)\n+\t\t{\n+\t\t\tvisibilityCache = new VisibilityCache();\n+\t\t}\n+\n+\t\treturn visibilityCache;\n+\t}\n+\n \t/**\n-\t * \n-\t * @param tabIndex\n-\t * @return visible\n+\t * A cache for visibilities of {@link ITab}s.\n \t */\n-\tprivate boolean isTabVisible(final int tabIndex)\n+\tprivate class VisibilityCache\n \t{\n-\t\tif (tabsVisibilityCache == null)\n+\n+\t\t/**\n+\t\t * Visibility for each tab.\n+\t\t */\n+\t\tprivate Boolean[] visibilities;\n+\n+\t\t/**\n+\t\t * Last visible tab.\n+\t\t */\n+\t\tprivate int lastVisible = -1;\n+\n+\t\tpublic VisibilityCache()\n \t\t{\n-\t\t\ttabsVisibilityCache = new Boolean[tabs.size()];\n+\t\t\tvisibilities = new Boolean[tabs.size()];\n \t\t}\n \n-\t\tif (tabsVisibilityCache.length < tabIndex + 1)\n+\t\tpublic int getLastVisible()\n+\t\t{\n+\t\t\tif (lastVisible == -1)\n \t\t\t{\n-\t\t\tBoolean[] resized = new Boolean[tabIndex + 1];\n-\t\t\tSystem.arraycopy(tabsVisibilityCache, 0, resized, 0, tabsVisibilityCache.length);\n-\t\t\ttabsVisibilityCache = resized;\n+\t\t\t\tfor (int t = 0; t < tabs.size(); t++)\n+\t\t\t\t{\n+\t\t\t\t\tif (isVisible(t))\n+\t\t\t\t\t{\n+\t\t\t\t\t\tlastVisible = t;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\treturn lastVisible;\n+\t\t}\n+\n+\t\tpublic boolean isVisible(int index)\n+\t\t{\n+\t\t\tif (visibilities.length < index + 1)\n+\t\t\t{\n+\t\t\t\tBoolean[] resized = new Boolean[index + 1];\n+\t\t\t\tSystem.arraycopy(visibilities, 0, resized, 0, visibilities.length);\n+\t\t\t\tvisibilities = resized;\n \t\t\t}\n \n-\t\tif (tabsVisibilityCache.length > 0)\n+\t\t\tif (visibilities.length > 0)\n \t\t\t{\n-\t\t\tBoolean visible = tabsVisibilityCache[tabIndex];\n+\t\t\t\tBoolean visible = visibilities[index];\n \t\t\t\tif (visible == null)\n \t\t\t\t{\n-\t\t\t\tvisible = tabs.get(tabIndex).isVisible();\n-\t\t\t\ttabsVisibilityCache[tabIndex] = visible;\n+\t\t\t\t\tvisible = tabs.get(index).isVisible();\n+\t\t\t\t\tvisibilities[index] = visible;\n \t\t\t\t}\n \t\t\t\treturn visible;\n \t\t\t}\n@@ -477,11 +523,5 @@ private boolean isTabVisible(final int tabIndex)\n \t\t\t\treturn false;\n \t\t\t}\n \t\t}\n-\n-\t@Override\n-\tprotected void onDetach()\n-\t{\n-\t\ttabsVisibilityCache = null;\n-\t\tsuper.onDetach();\n \t}\n }\n\\ No newline at end of file\n", 
  "project": "wicket", 
  "linesAdd": 73, 
  "jira_id": "4658", 
  "nb_skipped": 0, 
  "commit": "ef3adb12", 
  "nb_failure": 1, 
  "linesRem": 34
}