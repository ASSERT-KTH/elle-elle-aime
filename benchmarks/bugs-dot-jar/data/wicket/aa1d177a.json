{
  "files": 1, 
  "nb_test": 12, 
  "nb_error": 2, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.wicket.extensions.markup.html.repeater.data.table.DataTableTest"
  ], 
  "patch": "diff --git a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/DataTable.java b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/DataTable.java\nindex f3146d1f50..d7af5f7281 100644\n--- a/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/DataTable.java\n+++ b/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/repeater/data/table/DataTable.java\n@@ -33,6 +33,8 @@\n import org.apache.wicket.markup.repeater.data.IDataProvider;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.util.string.Strings;\n+import org.apache.wicket.util.visit.IVisit;\n+import org.apache.wicket.util.visit.IVisitor;\n \n \n /**\n@@ -109,9 +111,9 @@ public void onComponentTag(final Component component, final ComponentTag tag)\n \n \tprivate final List<IColumn<T>> columns;\n \n-\tprivate final RepeatingView topToolbars;\n+\tprivate final ToolbarsContainer topToolbars;\n \n-\tprivate final RepeatingView bottomToolbars;\n+\tprivate final ToolbarsContainer bottomToolbars;\n \n \t/**\n \t * Constructor\n@@ -320,14 +322,14 @@ public int getItemCount()\n \t\treturn datagrid.getItemCount();\n \t}\n \n-\tprivate void addToolbar(final AbstractToolbar toolbar, final RepeatingView container)\n+\tprivate void addToolbar(final AbstractToolbar toolbar, final ToolbarsContainer container)\n \t{\n \t\tif (toolbar == null)\n \t\t{\n \t\t\tthrow new IllegalArgumentException(\"argument [toolbar] cannot be null\");\n \t\t}\n \n-\t\tcontainer.add(toolbar);\n+\t\tcontainer.getRepeatingView().add(toolbar);\n \t}\n \n \t/**\n@@ -392,14 +394,18 @@ protected void onPageChanged()\n \t}\n \n \t/**\n-\t * This class acts as a repeater that will contain the toolbar.\n+\t * This class acts as a repeater that will contain the toolbar. It makes sure that the table row\n+\t * group (e.g. thead) tags are only visible when they contain rows in accordance with the HTML\n+\t * specification.\n \t * \n \t * @author igor.vaynberg\n \t */\n-\tprivate static class ToolbarsContainer extends RepeatingView\n+\tprivate static class ToolbarsContainer extends WebMarkupContainer\n \t{\n \t\tprivate static final long serialVersionUID = 1L;\n \n+\t\tprivate final RepeatingView toolbars;\n+\n \t\t/**\n \t\t * Constructor\n \t\t * \n@@ -408,6 +414,41 @@ protected void onPageChanged()\n \t\tprivate ToolbarsContainer(final String id)\n \t\t{\n \t\t\tsuper(id);\n+\t\t\ttoolbars = new RepeatingView(\"toolbars\");\n+\t\t\tadd(toolbars);\n+\t\t}\n+\n+\t\tpublic RepeatingView getRepeatingView()\n+\t\t{\n+\t\t\treturn toolbars;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean isVisible()\n+\t\t{\n+\t\t\tif (!super.isVisible())\n+\t\t\t{\n+\t\t\t\treturn false;\n+\t\t\t}\n+\n+\t\t\ttoolbars.configure();\n+\n+\t\t\tBoolean visible = toolbars.visitChildren(new IVisitor<Component, Boolean>()\n+\t\t\t{\n+\t\t\t\tpublic void component(Component object, IVisit<Boolean> visit)\n+\t\t\t\t{\n+\t\t\t\t\tobject.configure();\n+\t\t\t\t\tif (object.isVisible())\n+\t\t\t\t\t{\n+\t\t\t\t\t\tvisit.stop(Boolean.TRUE);\n+\t\t\t\t\t}\n+\t\t\t\t\telse\n+\t\t\t\t\t{\n+\t\t\t\t\t\tvisit.dontGoDeeper();\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t});\n+\t\t\treturn visible == Boolean.TRUE;\n \t\t}\n \t}\n }\n", 
  "project": "wicket", 
  "linesAdd": 47, 
  "jira_id": "3603", 
  "nb_skipped": 0, 
  "commit": "aa1d177a", 
  "nb_failure": 0, 
  "linesRem": 6
}