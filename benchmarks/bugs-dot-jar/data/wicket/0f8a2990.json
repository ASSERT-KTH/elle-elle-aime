{
  "files": 1, 
  "nb_test": 810, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.wicket.markup.html.internal.EnclosureTest"
  ], 
  "patch": "diff --git a/wicket/src/main/java/org/apache/wicket/markup/html/internal/Enclosure.java b/wicket/src/main/java/org/apache/wicket/markup/html/internal/Enclosure.java\nindex 11d40a26e9..b90c80edec 100644\n--- a/wicket/src/main/java/org/apache/wicket/markup/html/internal/Enclosure.java\n+++ b/wicket/src/main/java/org/apache/wicket/markup/html/internal/Enclosure.java\n@@ -180,22 +180,36 @@ protected void onComponentTagBody(final MarkupStream markupStream, ComponentTag\n \t\t}\n \t}\n \n+\t/**\n+\t * \n+\t * @param container\n+\t * @param markupStream\n+\t * @param enclosureOpenTag\n+\t */\n \tprivate void applyEnclosureVisibilityToChildren(final MarkupContainer container,\n-\t\tfinal MarkupStream markupStream, ComponentTag enclosureOpenTag)\n+\t\tfinal MarkupStream markupStream, final ComponentTag enclosureOpenTag)\n \t{\n \t\tDirectChildTagIterator it = new DirectChildTagIterator(markupStream, enclosureOpenTag);\n \t\twhile (it.hasNext())\n \t\t{\n \t\t\tfinal ComponentTag tag = it.next();\n+\t\t\tif (tag.isAutoComponentTag() == false)\n+\t\t\t{\n \t\t\t\tfinal Component child = container.get(tag.getId());\n+\n \t\t\t\t// record original visiblity allowed value, will restore later\n \t\t\t\tchanges.put(child, child.isVisibilityAllowed());\n \t\t\t\tchild.setVisibilityAllowed(isVisible());\n \t\t\t}\n+\t\t}\n \t\tit.rewind();\n \t}\n \n-\tprivate void checkChildComponent(Component controller)\n+\t/**\n+\t * \n+\t * @param controller\n+\t */\n+\tprivate void checkChildComponent(final Component controller)\n \t{\n \t\tif (controller == null)\n \t\t{\n@@ -209,6 +223,12 @@ else if (controller == this)\n \t\t}\n \t}\n \n+\t/**\n+\t * \n+\t * @param container\n+\t * @param markupStream\n+\t * @param enclosureOpenTag\n+\t */\n \tprivate void ensureAllChildrenPresent(final MarkupContainer container,\n \t\tfinal MarkupStream markupStream, ComponentTag enclosureOpenTag)\n \t{\n@@ -217,6 +237,8 @@ private void ensureAllChildrenPresent(final MarkupContainer container,\n \t\t{\n \t\t\tfinal ComponentTag tag = it.next();\n \n+\t\t\tif (tag.isAutoComponentTag() == false)\n+\t\t\t{\n \t\t\t\tComponent child = container.get(tag.getId());\n \t\t\t\tif (child == null)\n \t\t\t\t{\n@@ -224,7 +246,8 @@ private void ensureAllChildrenPresent(final MarkupContainer container,\n \t\t\t\t\t// resolvers\n \t\t\t\t\tfinal int tagIndex = it.getCurrentIndex();\n \n-\t\t\t\t// because the resolvers can auto-add and therefore immediately render the component\n+\t\t\t\t\t// because the resolvers can auto-add and therefore immediately render the\n+\t\t\t\t\t// component\n \t\t\t\t\t// we have to buffer the output since we do not yet know the visibility of the\n \t\t\t\t\t// enclosure\n \t\t\t\t\tCharSequence buffer = new ResponseBufferZone(getRequestCycle(), markupStream)\n@@ -242,7 +265,8 @@ protected void executeInsideBufferedZone()\n \n \t\t\t\t\tif (buffer.length() > 0)\n \t\t\t\t\t{\n-\t\t\t\t\t// we have already rendered this child component, insert a stub component that\n+\t\t\t\t\t\t// we have already rendered this child component, insert a stub component\n+\t\t\t\t\t\t// that\n \t\t\t\t\t\t// will dump the markup during the normal render process if the enclosure is\n \t\t\t\t\t\t// visible\n \t\t\t\t\t\tfinal Component stub = new AutoMarkupLabel(child.getId(), buffer);\n@@ -250,10 +274,13 @@ protected void executeInsideBufferedZone()\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n+\t\t}\n \t\tit.rewind();\n \t}\n \n-\n+\t/**\n+\t * @see org.apache.wicket.Component#onDetach()\n+\t */\n \t@Override\n \tprotected void onDetach()\n \t{\n@@ -261,6 +288,9 @@ protected void onDetach()\n \t\tsuper.onDetach();\n \t}\n \n+\t/**\n+\t * \n+\t */\n \tprivate void restoreOriginalChildVisibility()\n \t{\n \t\tif (changes != null)\n", 
  "project": "wicket", 
  "linesAdd": 35, 
  "jira_id": "2506", 
  "nb_skipped": 0, 
  "commit": "0f8a2990", 
  "nb_failure": 0, 
  "linesRem": 5
}