{
  "files": 1, 
  "nb_test": 1442, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.wicket.protocol.http.HeaderBufferingWebResponseTest"
  ], 
  "patch": "diff --git a/wicket-core/src/main/java/org/apache/wicket/protocol/http/HeaderBufferingWebResponse.java b/wicket-core/src/main/java/org/apache/wicket/protocol/http/HeaderBufferingWebResponse.java\nindex 0ac0c2a5a5..8771dcaf5b 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/protocol/http/HeaderBufferingWebResponse.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/protocol/http/HeaderBufferingWebResponse.java\n@@ -24,20 +24,24 @@\n import org.apache.wicket.util.time.Time;\n \n /**\n- * Response that keeps headers in buffers but writes the content directly to the response.\n+ * Response that keeps headers in buffers until the first content is written.\n  * \n  * This is necessary to get {@link #reset()} working without removing the JSESSIONID cookie. When\n  * {@link HttpServletResponse#reset()} is called it removes all cookies, including the JSESSIONID\n- * cookie.\n+ * cookie - see <a href=\"https://issues.apache.org/bugzilla/show_bug.cgi?id=26183\">Bug 26183</a>.\n  * \n- * Calling {@link #reset()} on this response only clears the buffered headers. If there is any\n- * content written to response it throws {@link IllegalStateException}.\n+ * Calling {@link #reset()} on this response clears the buffered meta data, if there is already any\n+ * content written it throws {@link IllegalStateException}.\n  * \n  * @author Matej Knopp\n  */\n class HeaderBufferingWebResponse extends WebResponse implements IMetaDataBufferingWebResponse\n {\n \tprivate final WebResponse originalResponse;\n+\n+\t/**\n+\t * Buffer of meta data.\n+\t */\n \tprivate final BufferedWebResponse bufferedResponse;\n \n \tpublic HeaderBufferingWebResponse(WebResponse originalResponse)\n@@ -46,113 +51,107 @@ public HeaderBufferingWebResponse(WebResponse originalResponse)\n \t\tbufferedResponse = new BufferedWebResponse(originalResponse);\n \t}\n \n-\tprivate boolean bufferedWritten = false;\n+\tprivate boolean buffering = true;\n \n-\tprivate void writeBuffered()\n+\tprivate void stopBuffering()\n \t{\n-\t\tif (!bufferedWritten)\n+\t\tif (buffering)\n \t\t{\n \t\t\tbufferedResponse.writeTo(originalResponse);\n-\t\t\tbufferedWritten = true;\n+\t\t\tbuffering = false;\n \t\t}\n \t}\n \n-\tprivate void checkHeader()\n+\t/**\n+\t * The response used for meta data.\n+\t * \n+\t * @return buffered response if nothing was written yet, the original response otherwise\n+\t */\n+\tprivate WebResponse getMetaResponse()\n+\t{\n+\t\tif (buffering)\n \t\t{\n-\t\tif (bufferedWritten)\n+\t\t\treturn bufferedResponse;\n+\t\t}\n+\t\telse\n \t\t{\n-\t\t\tthrow new IllegalStateException(\"Header was already written to response!\");\n+\t\t\treturn originalResponse;\n \t\t}\n \t}\n \n \t@Override\n \tpublic void addCookie(Cookie cookie)\n \t{\n-\t\tcheckHeader();\n-\t\tbufferedResponse.addCookie(cookie);\n+\t\tgetMetaResponse().addCookie(cookie);\n \t}\n \n \t@Override\n \tpublic void clearCookie(Cookie cookie)\n \t{\n-\t\tcheckHeader();\n-\t\tbufferedResponse.clearCookie(cookie);\n+\t\tgetMetaResponse().clearCookie(cookie);\n \t}\n \n-\tprivate boolean flushed = false;\n-\n \t@Override\n \tpublic void flush()\n \t{\n-\t\tif (!bufferedWritten)\n-\t\t{\n-\t\t\tbufferedResponse.writeTo(originalResponse);\n-\t\t\tbufferedResponse.reset();\n-\t\t}\n+\t\tstopBuffering();\n+\n \t\toriginalResponse.flush();\n-\t\tflushed = true;\n \t}\n \n \t@Override\n \tpublic boolean isRedirect()\n \t{\n-\t\treturn bufferedResponse.isRedirect();\n+\t\treturn getMetaResponse().isRedirect();\n \t}\n \n \t@Override\n \tpublic void sendError(int sc, String msg)\n \t{\n-\t\tcheckHeader();\n-\t\tbufferedResponse.sendError(sc, msg);\n+\t\tgetMetaResponse().sendError(sc, msg);\n \t}\n \n \t@Override\n \tpublic void sendRedirect(String url)\n \t{\n-\t\tcheckHeader();\n-\t\tbufferedResponse.sendRedirect(url);\n+\t\tgetMetaResponse().sendRedirect(url);\n \t}\n \n \t@Override\n \tpublic void setContentLength(long length)\n \t{\n-\t\tcheckHeader();\n-\t\tbufferedResponse.setContentLength(length);\n+\t\tgetMetaResponse().setContentLength(length);\n \t}\n \n \t@Override\n \tpublic void setContentType(String mimeType)\n \t{\n-\t\tcheckHeader();\n-\t\tbufferedResponse.setContentType(mimeType);\n+\t\tgetMetaResponse().setContentType(mimeType);\n \t}\n \n \t@Override\n \tpublic void setDateHeader(String name, Time date)\n \t{\n \t\tArgs.notNull(date, \"date\");\n-\t\tcheckHeader();\n-\t\tbufferedResponse.setDateHeader(name, date);\n+\t\tgetMetaResponse().setDateHeader(name, date);\n \t}\n \n \t@Override\n \tpublic void setHeader(String name, String value)\n \t{\n-\t\tcheckHeader();\n-\t\tbufferedResponse.setHeader(name, value);\n+\t\tgetMetaResponse().setHeader(name, value);\n \t}\n \n \t@Override\n \tpublic void addHeader(String name, String value)\n \t{\n-\t\tcheckHeader();\n-\t\tbufferedResponse.addHeader(name, value);\n+\t\tgetMetaResponse().addHeader(name, value);\n \t}\n \n \t@Override\n \tpublic void setStatus(int sc)\n \t{\n-\t\tbufferedResponse.setStatus(sc);\n+\t\tgetMetaResponse().setStatus(sc);\n \t}\n \n \t@Override\n@@ -170,14 +169,16 @@ public String encodeRedirectURL(CharSequence url)\n \t@Override\n \tpublic void write(CharSequence sequence)\n \t{\n-\t\twriteBuffered();\n+\t\tstopBuffering();\n+\n \t\toriginalResponse.write(sequence);\n \t}\n \n \t@Override\n \tpublic void write(byte[] array)\n \t{\n-\t\twriteBuffered();\n+\t\tstopBuffering();\n+\n \t\toriginalResponse.write(array);\n \t}\n \n@@ -185,19 +186,24 @@ public void write(byte[] array)\n \t@Override\n \tpublic void write(byte[] array, int offset, int length)\n \t{\n-\t\twriteBuffered();\n+\t\tstopBuffering();\n+\n \t\toriginalResponse.write(array, offset, length);\n \t}\n \n \t@Override\n \tpublic void reset()\n \t{\n-\t\tif (flushed)\n+\t\tif (buffering)\n \t\t{\n-\t\t\tthrow new IllegalStateException(\"Response has already been flushed!\");\n-\t\t}\n+\t\t\t// still buffering so just reset the buffer of meta data\n \t\t\tbufferedResponse.reset();\n-\t\tbufferedWritten = false;\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\t// the original response is never reset (see class javadoc)\n+\t\t\tthrow new IllegalStateException(\"Response is no longer buffering!\");\n+\t\t}\n \t}\n \n \t@Override\n", 
  "project": "wicket", 
  "linesAdd": 51, 
  "jira_id": "4927", 
  "nb_skipped": 5, 
  "commit": "8c827e33", 
  "nb_failure": 1, 
  "linesRem": 46
}