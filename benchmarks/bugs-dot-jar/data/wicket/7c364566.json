{
  "files": 1, 
  "nb_test": 14, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.wicket.datetime.DateConverterTest"
  ], 
  "patch": "diff --git a/wicket-datetime/src/main/java/org/apache/wicket/datetime/StyleDateConverter.java b/wicket-datetime/src/main/java/org/apache/wicket/datetime/StyleDateConverter.java\nindex d68b04aec3..92ade4c2ad 100644\n--- a/wicket-datetime/src/main/java/org/apache/wicket/datetime/StyleDateConverter.java\n+++ b/wicket-datetime/src/main/java/org/apache/wicket/datetime/StyleDateConverter.java\n@@ -16,14 +16,14 @@\n  */\n package org.apache.wicket.datetime;\n \n-import java.util.Locale;\n-\n import org.apache.wicket.datetime.markup.html.form.DateTextField;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n \n+import java.util.Locale;\n+\n \n /**\n  * Date converter that uses Joda Time and can be configured to take the time zone difference between\n@@ -52,15 +52,13 @@\n \n \t/**\n \t * Construct. The dateStyle 'S-' (which is the same as {@link DateTimeFormat#shortDate()}) will\n-\t * be used for constructing the date format for the current locale.\n-\t * </p>\n-\t * When applyTimeZoneDifference is true, the current time is applied on the parsed date, and the\n-\t * date will be corrected for the time zone difference between the server and the client. For\n+\t * be used for constructing the date format for the current locale. </p> When\n+\t * applyTimeZoneDifference is true, the current time is applied on the parsed date, and the date\n+\t * will be corrected for the time zone difference between the server and the client. For\n \t * instance, if I'm in Seattle and the server I'm working on is in Amsterdam, the server is 9\n \t * hours ahead. So, if I'm inputting say 12/24 at a couple of hours before midnight, at the\n \t * server it is already 12/25. If this boolean is true, it will be transformed to 12/25, while\n-\t * the client sees 12/24.\n-\t * </p>\n+\t * the client sees 12/24. </p>\n \t * \n \t * @param applyTimeZoneDifference\n \t *            whether to apply the difference in time zones between client and server\n@@ -72,15 +70,13 @@ public StyleDateConverter(boolean applyTimeZoneDifference)\n \n \t/**\n \t * Construct. The provided pattern will be used as the base format (but they will be localized\n-\t * for the current locale) and if null, {@link DateTimeFormat#shortDate()} will be used.\n-\t * </p>\n+\t * for the current locale) and if null, {@link DateTimeFormat#shortDate()} will be used. </p>\n \t * When applyTimeZoneDifference is true, the current time is applied on the parsed date, and the\n \t * date will be corrected for the time zone difference between the server and the client. For\n \t * instance, if I'm in Seattle and the server I'm working on is in Amsterdam, the server is 9\n \t * hours ahead. So, if I'm inputting say 12/24 at a couple of hours before midnight, at the\n \t * server it is already 12/25. If this boolean is true, it will be transformed to 12/25, while\n-\t * the client sees 12/24.\n-\t * </p>\n+\t * the client sees 12/24. </p>\n \t * \n \t * @param dateStyle\n \t *            Date style to use. The first character is the date style, and the second character\n@@ -119,6 +115,8 @@ public final String getDatePattern(Locale locale)\n \t@Override\n \tprotected DateTimeFormatter getFormat(Locale locale)\n \t{\n-\t\treturn DateTimeFormat.forPattern(getDatePattern(locale)).withPivotYear(2000);\n+\t\treturn DateTimeFormat.forPattern(getDatePattern(locale))\n+\t\t\t.withLocale(locale)\n+\t\t\t.withPivotYear(2000);\n \t}\n }\n\\ No newline at end of file\n", 
  "project": "wicket", 
  "linesAdd": 11, 
  "jira_id": "3598", 
  "nb_skipped": 0, 
  "commit": "7c364566", 
  "nb_failure": 1, 
  "linesRem": 13
}