{
  "files": 3, 
  "nb_test": 1039, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.wicket.response.filter.ResponseFilterTest"
  ], 
  "patch": "diff --git a/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java b/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java\nindex 84ff3f0..c1ff4a5 100644\n--- a/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java\n+++ b/wicket/src/main/java/org/apache/wicket/ajax/AjaxRequestTarget.java\n@@ -51,6 +51,8 @@ import org.apache.wicket.request.http.WebRequest;\n import org.apache.wicket.request.http.WebResponse;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.apache.wicket.request.resource.ResourceReference;\n+import org.apache.wicket.response.StringResponse;\n+import org.apache.wicket.response.filter.IResponseFilter;\n import org.apache.wicket.util.lang.Args;\n import org.apache.wicket.util.string.AppendingStringBuffer;\n import org.apache.wicket.util.string.Strings;\n@@ -603,43 +605,18 @@ public class AjaxRequestTarget implements IPageRequestHandler\n \t\t\t// Make sure it is not cached by a client\n \t\t\tresponse.disableCaching();\n \n-\t\t\tresponse.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"\");\n-\t\t\tresponse.write(encoding);\n-\t\t\tresponse.write(\"\\\"?>\");\n-\t\t\tresponse.write(\"<ajax-response>\");\n-\n-\t\t\t// invoke onbeforerespond event on listeners\n-\t\t\tfireOnBeforeRespondListeners();\n-\n-\t\t\t// normal behavior\n-\t\t\tIterator<CharSequence> it = prependJavaScripts.iterator();\n-\t\t\twhile (it.hasNext())\n-\t\t\t{\n-\t\t\t\tCharSequence js = it.next();\n-\t\t\t\trespondInvocation(response, js);\n-\t\t\t}\n-\n-\t\t\t// process added components\n-\t\t\trespondComponents(response);\n-\n-\t\t\tfireOnAfterRespondListeners(response);\n-\n-\t\t\t// execute the dom ready javascripts as first javascripts\n-\t\t\t// after component replacement\n-\t\t\tit = domReadyJavaScripts.iterator();\n-\t\t\twhile (it.hasNext())\n+\t\t\ttry\n \t\t\t{\n-\t\t\t\tCharSequence js = it.next();\n-\t\t\t\trespondInvocation(response, js);\n+\t\t\t\tfinal StringResponse bodyResponse = new StringResponse();\n+\t\t\t\tcontructResponseBody(bodyResponse, encoding);\n+\t\t\t\tinvokeResponseFilters(bodyResponse);\n+\t\t\t\tresponse.write(bodyResponse.getBuffer());\n \t\t\t}\n-\t\t\tit = appendJavaScripts.iterator();\n-\t\t\twhile (it.hasNext())\n+\t\t\tfinally\n \t\t\t{\n-\t\t\t\tCharSequence js = it.next();\n-\t\t\t\trespondInvocation(response, js);\n+\t\t\t\t// restore the original response\n+\t\t\t\tRequestCycle.get().setResponse(response);\n \t\t\t}\n-\n-\t\t\tresponse.write(\"</ajax-response>\");\n \t\t}\n \t\tfinally\n \t\t{\n@@ -648,6 +625,80 @@ public class AjaxRequestTarget implements IPageRequestHandler\n \t}\n \n \t/**\n+\t * Collects the response body (without the headers) so that it can be pre-processed before\n+\t * written down to the original response.\n+\t * \n+\t * @param bodyResponse\n+\t *            the buffering response\n+\t * @param encoding\n+\t *            the encoding that should be used to encode the body\n+\t */\n+\tprivate void contructResponseBody(final Response bodyResponse, final String encoding)\n+\t{\n+\t\tbodyResponse.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"\");\n+\t\tbodyResponse.write(encoding);\n+\t\tbodyResponse.write(\"\\\"?>\");\n+\t\tbodyResponse.write(\"<ajax-response>\");\n+\n+\t\t// invoke onbeforerespond event on listeners\n+\t\tfireOnBeforeRespondListeners();\n+\n+\t\t// normal behavior\n+\t\tIterator<CharSequence> it = prependJavaScripts.iterator();\n+\t\twhile (it.hasNext())\n+\t\t{\n+\t\t\tCharSequence js = it.next();\n+\t\t\trespondInvocation(bodyResponse, js);\n+\t\t}\n+\n+\t\t// process added components\n+\t\trespondComponents(bodyResponse);\n+\n+\t\tfireOnAfterRespondListeners(bodyResponse);\n+\n+\t\t// execute the dom ready javascripts as first javascripts\n+\t\t// after component replacement\n+\t\tit = domReadyJavaScripts.iterator();\n+\t\twhile (it.hasNext())\n+\t\t{\n+\t\t\tCharSequence js = it.next();\n+\t\t\trespondInvocation(bodyResponse, js);\n+\t\t}\n+\t\tit = appendJavaScripts.iterator();\n+\t\twhile (it.hasNext())\n+\t\t{\n+\t\t\tCharSequence js = it.next();\n+\t\t\trespondInvocation(bodyResponse, js);\n+\t\t}\n+\n+\t\tbodyResponse.write(\"</ajax-response>\");\n+\t}\n+\n+\t/**\n+\t * Runs the configured {@link IResponseFilter}s over the constructed Ajax response\n+\t * \n+\t * @param contentResponse\n+\t *            the Ajax {@link Response} body\n+\t */\n+\tprivate void invokeResponseFilters(final StringResponse contentResponse)\n+\t{\n+\t\tAppendingStringBuffer responseBuffer = new AppendingStringBuffer(\n+\t\t\tcontentResponse.getBuffer());\n+\n+\t\tList<IResponseFilter> responseFilters = Application.get()\n+\t\t\t.getRequestCycleSettings()\n+\t\t\t.getResponseFilters();\n+\n+\t\tif (responseFilters != null)\n+\t\t{\n+\t\t\tfor (IResponseFilter filter : responseFilters)\n+\t\t\t{\n+\t\t\t\tfilter.filter(responseBuffer);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n \t * \n \t */\n \tprivate void fireOnBeforeRespondListeners()\n@@ -667,7 +718,7 @@ public class AjaxRequestTarget implements IPageRequestHandler\n \t * \n \t * @param response\n \t */\n-\tprivate void fireOnAfterRespondListeners(final WebResponse response)\n+\tprivate void fireOnAfterRespondListeners(final Response response)\n \t{\n \t\t// invoke onafterresponse event on listeners\n \t\tif (listeners != null)\n@@ -697,7 +748,7 @@ public class AjaxRequestTarget implements IPageRequestHandler\n \t * \n \t * @param response\n \t */\n-\tprivate void respondComponents(WebResponse response)\n+\tprivate void respondComponents(Response response)\n \t{\n \t\t// TODO: We might need to call prepareRender on all components upfront\n \ndiff --git a/wicket/src/main/java/org/apache/wicket/protocol/http/BufferedWebResponse.java b/wicket/src/main/java/org/apache/wicket/protocol/http/BufferedWebResponse.java\nindex 113e442..1c9debe 100644\n--- a/wicket/src/main/java/org/apache/wicket/protocol/http/BufferedWebResponse.java\n+++ b/wicket/src/main/java/org/apache/wicket/protocol/http/BufferedWebResponse.java\n@@ -24,10 +24,13 @@ import java.util.List;\n \n import javax.servlet.http.Cookie;\n \n+import org.apache.wicket.Application;\n import org.apache.wicket.WicketRuntimeException;\n import org.apache.wicket.request.Response;\n import org.apache.wicket.request.http.WebResponse;\n+import org.apache.wicket.response.filter.IResponseFilter;\n import org.apache.wicket.util.lang.Args;\n+import org.apache.wicket.util.string.AppendingStringBuffer;\n \n /**\n  * Subclass of {@link WebResponse} that buffers the actions and performs those on another response.\n@@ -117,6 +120,20 @@ public class BufferedWebResponse extends WebResponse implements IMetaDataBufferi\n \t\t@Override\n \t\tprotected void invoke(WebResponse response)\n \t\t{\n+\n+\t\t\tAppendingStringBuffer responseBuffer = new AppendingStringBuffer(builder);\n+\n+\t\t\tList<IResponseFilter> responseFilters = Application.get()\n+\t\t\t\t.getRequestCycleSettings()\n+\t\t\t\t.getResponseFilters();\n+\n+\t\t\tif (responseFilters != null)\n+\t\t\t{\n+\t\t\t\tfor (IResponseFilter filter : responseFilters)\n+\t\t\t\t{\n+\t\t\t\t\tfilter.filter(responseBuffer);\n+\t\t\t\t}\n+\t\t\t}\n \t\t\tresponse.write(builder);\n \t\t}\n \t};\n@@ -534,4 +551,5 @@ public class BufferedWebResponse extends WebResponse implements IMetaDataBufferi\n \t{\n \t\treturn charSequenceAction.builder.toString();\n \t}\n+\n }\ndiff --git a/wicket/src/main/java/org/apache/wicket/response/filter/IResponseFilter.java b/wicket/src/main/java/org/apache/wicket/response/filter/IResponseFilter.java\nindex e2f76cc..c106782 100644\n--- a/wicket/src/main/java/org/apache/wicket/response/filter/IResponseFilter.java\n+++ b/wicket/src/main/java/org/apache/wicket/response/filter/IResponseFilter.java\n@@ -21,7 +21,7 @@ import org.apache.wicket.util.string.AppendingStringBuffer;\n /**\n  * A response filter can be added to the\n  * {@link org.apache.wicket.settings.IRequestCycleSettings#addResponseFilter(IResponseFilter)}\n- * object The will be called from the Buffered Response objects right before they would send it to\n+ * object. This will be called from the Buffered Response objects right before they would send it to\n  * the real responses. You have to use the\n  * {@link org.apache.wicket.settings.IRequestCycleSettings#setBufferResponse(boolean)}(to true which\n  * is the default) for this filtering to work.\n", 
  "project": "wicket", 
  "linesAdd": 105, 
  "jira_id": "3280", 
  "nb_skipped": 0, 
  "commit": "295e73bd", 
  "nb_failure": 2, 
  "linesRem": 36
}