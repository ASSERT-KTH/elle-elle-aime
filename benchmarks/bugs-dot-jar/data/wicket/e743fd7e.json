{
  "files": 1, 
  "nb_test": 1199, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.wicket.markup.html.form.AutoFormLabelPickupTest"
  ], 
  "patch": "diff --git a/wicket-core/src/main/java/org/apache/wicket/markup/html/form/AutoLabelTextResolver.java b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/AutoLabelTextResolver.java\nindex 85cf7ce5af..34cfe822d1 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/markup/html/form/AutoLabelTextResolver.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/AutoLabelTextResolver.java\n@@ -28,7 +28,10 @@\n import org.apache.wicket.markup.parser.XmlTag;\r\n import org.apache.wicket.markup.parser.filter.WicketTagIdentifier;\r\n import org.apache.wicket.markup.resolver.IComponentResolver;\r\n+import org.apache.wicket.model.IModel;\r\n+import org.apache.wicket.model.LoadableDetachableModel;\r\n import org.apache.wicket.model.Model;\r\n+import org.apache.wicket.model.StringResourceModel;\r\n import org.apache.wicket.request.cycle.RequestCycle;\r\n import org.apache.wicket.util.string.Strings;\r\n \r\n@@ -130,76 +133,95 @@ protected void onComponentTag(final ComponentTag tag)\n \t\t@Override\r\n \t\tpublic void onComponentTagBody(final MarkupStream markupStream, final ComponentTag openTag)\r\n \t\t{\r\n-\t\t\tboolean storeLabelText = false;\r\n \r\n \t\t\t// try and find some form of label content...\r\n-\t\t\tString labelText = null;\r\n+\t\t\tIModel<String> labelModel = findLabelContent(markupStream, openTag);\r\n+\t\t\t// print the label text\r\n+\t\t\treplaceComponentTagBody(markupStream, openTag,\r\n+\t\t\t\tlabelModel != null ? labelModel.getObject() : \"\");\r\n \r\n-\t\t\t// check if the labeled component is a label provider\r\n+\t\t\t// store the label text in FormComponent's label model so its available to errors\r\n+\t\t\tif (labelModel != null)\r\n+\t\t\t{\r\n+\t\t\t\tif (labeled instanceof FormComponent)\r\n+\t\t\t\t{\r\n+\t\t\t\t\tFormComponent<?> fc = (FormComponent<?>)labeled;\r\n+\t\t\t\t\tfc.setLabel(labelModel);\r\n+\t\t\t\t}\r\n+\t\t\t\telse\r\n+\t\t\t\t{\r\n+\t\t\t\t\t// if we can't hand off the labelmodel to a component, we have to detach it\r\n+\t\t\t\t\tlabelModel.detach();\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t}\r\n \r\n+\t\tprivate IModel<String> findLabelContent(final MarkupStream markupStream,\r\n+\t\t\tfinal ComponentTag tag)\r\n+\t\t{\r\n \t\t\tif (labeled instanceof ILabelProvider)\r\n \t\t\t{\r\n+\t\t\t\t// check if the labeled component is a label provider\r\n \t\t\t\tILabelProvider<String> provider = (ILabelProvider<String>)labeled;\r\n \t\t\t\tif (provider.getLabel() != null)\r\n \t\t\t\t{\r\n-\t\t\t\t\tString text = provider.getLabel().getObject();\r\n-\t\t\t\t\tif (!Strings.isEmpty(text))\r\n+\t\t\t\t\tif (!Strings.isEmpty(provider.getLabel().getObject()))\r\n+\r\n \t\t\t\t\t{\r\n-\t\t\t\t\t\tlabelText = text;\r\n+\t\t\t\t\t\treturn provider.getLabel();\r\n \t\t\t\t\t}\r\n \t\t\t\t}\r\n \t\t\t}\r\n \r\n \t\t\t// check if the labeled component is a form component\r\n-\r\n-\t\t\tif (labelText == null && labeled instanceof FormComponent)\r\n+\t\t\tif (labeled instanceof FormComponent)\r\n \t\t\t{\r\n-\t\t\t\tString text = ((FormComponent<?>)labeled).getDefaultLabel(\"wicket:unknown\");\r\n+\t\t\t\tfinal FormComponent<?> formComponent = (FormComponent<?>)labeled;\r\n+\t\t\t\tString text = formComponent.getDefaultLabel(\"wicket:unknown\");\r\n \t\t\t\tif (!\"wicket:unknown\".equals(text) && !Strings.isEmpty(text))\r\n \t\t\t\t{\r\n-\t\t\t\t\tlabelText = text;\r\n+\t\t\t\t\treturn new LoadableDetachableModel<String>()\r\n+\t\t\t\t\t{\r\n+\t\t\t\t\t\t@Override\r\n+\t\t\t\t\t\tprotected String load()\r\n+\t\t\t\t\t\t{\r\n+\t\t\t\t\t\t\treturn formComponent.getDefaultLabel(\"wicket:unknown\");\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t};\r\n \t\t\t\t}\r\n \t\t\t}\r\n \r\n \t\t\t// check if wicket:label tag has a message key\r\n-\t\t\tif (labelText == null && openTag.getAttribute(\"key\") != null)\r\n \t\t\t{\r\n-\t\t\t\tString text = labeled.getString(openTag.getAttribute(\"key\"));\r\n+\t\t\t\tString resourceKey = tag.getAttribute(\"key\");\r\n+\t\t\t\tif (resourceKey != null)\r\n+\t\t\t\t{\r\n+\t\t\t\t\tString text = labeled.getString(resourceKey);\r\n \t\t\t\t\tif (!Strings.isEmpty(text))\r\n \t\t\t\t\t{\r\n-\t\t\t\t\tlabelText = text;\r\n-\t\t\t\t\tstoreLabelText = true;\r\n+\t\t\t\t\t\treturn new StringResourceModel(resourceKey, labeled, null);\r\n+\t\t\t\t\t}\r\n \t\t\t\t}\r\n \t\t\t}\r\n \r\n \t\t\t// as last resort use the tag body\r\n-\t\t\tif (labelText == null)\r\n \t\t\t{\r\n \t\t\t\tString text = new ResponseBufferZone(RequestCycle.get(), markupStream)\r\n \t\t\t\t{\r\n \t\t\t\t\t@Override\r\n \t\t\t\t\tprotected void executeInsideBufferedZone()\r\n \t\t\t\t\t{\r\n-\t\t\t\t\t\tTextLabel.super.onComponentTagBody(markupStream, openTag);\r\n+\t\t\t\t\t\tTextLabel.super.onComponentTagBody(markupStream, tag);\r\n \t\t\t\t\t}\r\n \t\t\t\t}.execute().toString();\r\n \r\n \t\t\t\tif (!Strings.isEmpty(text))\r\n \t\t\t\t{\r\n-\t\t\t\t\tlabelText = text;\r\n-\t\t\t\t\tstoreLabelText = true;\r\n+\t\t\t\t\treturn Model.of(text);\r\n \t\t\t\t}\r\n \t\t\t}\r\n \r\n-\t\t\t// print the label text\r\n-\t\t\treplaceComponentTagBody(markupStream, openTag, labelText);\r\n-\r\n-\t\t\t// store the label text in FormComponent's label model so its available to errors\r\n-\t\t\tif (labeled instanceof FormComponent)\r\n-\t\t\t{\r\n-\t\t\t\tFormComponent<?> fc = (FormComponent<?>)labeled;\r\n-\t\t\t\tfc.setLabel(Model.of(labelText));\r\n-\t\t\t}\r\n+\t\t\treturn null;\r\n \t\t}\r\n \t}\r\n \r\n", 
  "project": "wicket", 
  "linesAdd": 49, 
  "jira_id": "4102", 
  "nb_skipped": 2, 
  "commit": "e743fd7e", 
  "nb_failure": 2, 
  "linesRem": 27
}