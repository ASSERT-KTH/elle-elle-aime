{
  "files": 4, 
  "nb_test": 887, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.wicket.markup.html.internal.EnclosureTest"
  ], 
  "patch": "diff --git a/wicket/src/main/java/org/apache/wicket/MarkupContainer.java b/wicket/src/main/java/org/apache/wicket/MarkupContainer.java\nindex c2d8431b5e..a7a1964340 100644\n--- a/wicket/src/main/java/org/apache/wicket/MarkupContainer.java\n+++ b/wicket/src/main/java/org/apache/wicket/MarkupContainer.java\n@@ -34,6 +34,7 @@\n import org.apache.wicket.markup.MarkupType;\n import org.apache.wicket.markup.RawMarkup;\n import org.apache.wicket.markup.WicketTag;\n+import org.apache.wicket.markup.html.border.Border;\n import org.apache.wicket.markup.resolver.ComponentResolvers;\n import org.apache.wicket.model.IComponentInheritedModel;\n import org.apache.wicket.model.IModel;\n@@ -138,6 +139,24 @@ public MarkupContainer add(final Component... childs)\n \t\t\t\tthrow new IllegalArgumentException(\"argument child may not be null\");\n \t\t\t}\n \n+\t\t\tMarkupContainer parent = getParent();\n+\t\t\twhile (parent != null)\n+\t\t\t{\n+\t\t\t\tif (child == parent)\n+\t\t\t\t{\n+\t\t\t\t\tString msg = \"You can not add a component's parent as child to the component (loop): Component: \" +\n+\t\t\t\t\t\tthis.toString(false) + \"; parent == child: \" + parent.toString(false);\n+\t\t\t\t\tif (child instanceof Border.BorderBodyContainer)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tmsg += \". Please consider using Border.addToBorder(new \" +\n+\t\t\t\t\t\t\tthis.getClass().getSimpleName() + \"(\\\"\" + this.getId() +\n+\t\t\t\t\t\t\t\"\\\", ...) instead of add(...)\";\n+\t\t\t\t\t}\n+\t\t\t\t\tthrow new WicketRuntimeException(msg);\n+\t\t\t\t}\n+\t\t\t\tparent = parent.getParent();\n+\t\t\t}\n+\n \t\t\tcheckHierarchyChange(child);\n \n \t\t\tif (log.isDebugEnabled())\n@@ -955,10 +973,7 @@ private final void addedComponent(final Component child)\n \t\tif (page != null)\n \t\t{\n \t\t\tchild.initialize();\n-\t\t}\n \n-\t\tif (page != null)\n-\t\t{\n \t\t\t// Tell the page a component has been added\n \t\t\tpage.componentAdded(child);\n \t\t}\ndiff --git a/wicket/src/main/java/org/apache/wicket/markup/html/internal/Enclosure.java b/wicket/src/main/java/org/apache/wicket/markup/html/internal/Enclosure.java\nindex 4398671282..e2f0076fa3 100644\n--- a/wicket/src/main/java/org/apache/wicket/markup/html/internal/Enclosure.java\n+++ b/wicket/src/main/java/org/apache/wicket/markup/html/internal/Enclosure.java\n@@ -23,12 +23,14 @@\n import org.apache.wicket.markup.ComponentTag;\n import org.apache.wicket.markup.MarkupException;\n import org.apache.wicket.markup.MarkupStream;\n-import org.apache.wicket.markup.html.TransparentWebMarkupContainer;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.EnclosureContainer;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.form.FormComponent;\n import org.apache.wicket.markup.html.form.IFormSubmittingComponent;\n import org.apache.wicket.markup.parser.filter.EnclosureHandler;\n+import org.apache.wicket.markup.resolver.ComponentResolvers;\n+import org.apache.wicket.markup.resolver.IComponentResolver;\n import org.apache.wicket.request.Response;\n import org.apache.wicket.request.cycle.RequestCycle;\n import org.apache.wicket.response.NullResponse;\n@@ -82,7 +84,7 @@\n  * @author Juergen Donnerstag\n  * @since 1.3\n  */\n-public class Enclosure extends TransparentWebMarkupContainer\n+public class Enclosure extends WebMarkupContainer implements IComponentResolver\n {\n \tprivate static final long serialVersionUID = 1L;\n \n@@ -113,6 +115,25 @@ public Enclosure(final String id, final CharSequence childId)\n \t\tthis.childId = childId;\n \t}\n \n+\t/**\n+\t * @see org.apache.wicket.Component#onInitialize()\n+\t */\n+\t@Override\n+\tprotected void onInitialize()\n+\t{\n+\t\tsuper.onInitialize();\n+\n+\t\t// enclosure's parent container\n+\t\tMarkupContainer container = getEnclosureParent();\n+\n+\t\t// clear the cache\n+\t\tchildComponent = null;\n+\n+\t\t// get Child Component. If not \"added\", ask a resolver to find it.\n+\t\tchildComponent = getChildComponent(new MarkupStream(getMarkup()), container);\n+\t\tcheckChildComponent(childComponent);\n+\t}\n+\n \t/**\n \t * Get the real parent container\n \t * \n@@ -121,7 +142,7 @@ public Enclosure(final String id, final CharSequence childId)\n \tprivate MarkupContainer getEnclosureParent()\n \t{\n \t\tMarkupContainer parent = getParent();\n-\t\twhile (parent.isAuto())\n+\t\twhile ((parent != null) && parent.isAuto())\n \t\t{\n \t\t\tparent = parent.getParent();\n \t\t}\n@@ -139,16 +160,11 @@ private MarkupContainer getEnclosureParent()\n \t *      org.apache.wicket.markup.ComponentTag)\n \t */\n \t@Override\n-\tprotected void onComponentTagBody(MarkupStream markupStream, ComponentTag openTag)\n+\tprotected void onComponentTagBody(final MarkupStream markupStream, final ComponentTag openTag)\n \t{\n-\t\t// enclosure's parent container\n-\t\tMarkupContainer container = getEnclosureParent();\n-\n-\t\tComponent controller = container.get(childId.toString());\n-\t\tcheckChildComponent(controller);\n-\n+\t\t// TODO this is where I wish we had something like \"enum(TAG, BODY, NONE, ALL) isVisible()\"\n \t\t// set the enclosure visibility\n-\t\tboolean visible = controller.determineVisibility();\n+\t\tboolean visible = childComponent.determineVisibility();\n \n \t\t// We want to know which components are rendered inside the enclosure\n \t\tfinal IComponentOnAfterRenderListener listener = new EnclosureListener(this);\n@@ -185,6 +201,59 @@ protected void onComponentTagBody(MarkupStream markupStream, ComponentTag openTa\n \t\t}\n \t}\n \n+\t/**\n+\t * @param markupStream\n+\t * @param container\n+\t * @return The component associated with the\n+\t */\n+\tprivate Component getChildComponent(final MarkupStream markupStream, MarkupContainer container)\n+\t{\n+\t\tComponent controller = container.get(childId.toString());\n+\t\tif (controller == null)\n+\t\t{\n+\t\t\tint orgIndex = markupStream.getCurrentIndex();\n+\t\t\ttry\n+\t\t\t{\n+\t\t\t\twhile (markupStream.hasMore())\n+\t\t\t\t{\n+\t\t\t\t\tmarkupStream.next();\n+\t\t\t\t\tif (markupStream.skipUntil(ComponentTag.class))\n+\t\t\t\t\t{\n+\t\t\t\t\t\tComponentTag tag = markupStream.getTag();\n+\t\t\t\t\t\tif ((tag != null) && (tag.isOpen() || tag.isOpenClose()))\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\tif (childId.equals(tag.getId()))\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tcontroller = ComponentResolvers.resolveByComponentHierarchy(\n+\t\t\t\t\t\t\t\t\tcontainer, markupStream, tag);\n+\t\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfinally\n+\t\t\t{\n+\t\t\t\tmarkupStream.setCurrentIndex(orgIndex);\n+\t\t\t}\n+\t\t}\n+\t\treturn controller;\n+\t}\n+\n+\t/**\n+\t * \n+\t * @see org.apache.wicket.markup.resolver.IComponentResolver#resolve(org.apache.wicket.MarkupContainer,\n+\t *      org.apache.wicket.markup.MarkupStream, org.apache.wicket.markup.ComponentTag)\n+\t */\n+\tpublic Component resolve(MarkupContainer container, MarkupStream markupStream, ComponentTag tag)\n+\t{\n+\t\tif (childId.equals(tag.getId()))\n+\t\t{\n+\t\t\treturn childComponent;\n+\t\t}\n+\t\treturn getEnclosureParent().get(tag.getId());\n+\t}\n+\n \t/**\n \t * \n \t * @param controller\n@@ -218,6 +287,7 @@ private EnclosureListener(final Enclosure enclosure)\n \t\t/**\n \t\t * @see org.apache.wicket.application.IComponentOnBeforeRenderListener#onBeforeRender(org.apache.wicket.Component)\n \t\t */\n+\t\t@SuppressWarnings(\"unchecked\")\n \t\tpublic void onAfterRender(final Component component)\n \t\t{\n \t\t\tif (log.isWarnEnabled())\ndiff --git a/wicket/src/main/java/org/apache/wicket/markup/resolver/ComponentResolvers.java b/wicket/src/main/java/org/apache/wicket/markup/resolver/ComponentResolvers.java\nindex d94dc482b7..daf1ab6d37 100644\n--- a/wicket/src/main/java/org/apache/wicket/markup/resolver/ComponentResolvers.java\n+++ b/wicket/src/main/java/org/apache/wicket/markup/resolver/ComponentResolvers.java\n@@ -50,34 +50,67 @@ public static Component resolve(final MarkupContainer container,\n \t\tfinal MarkupStream markupStream, final ComponentTag tag)\r\n \t{\r\n \t\t// try to resolve using component hierarchy\r\n+\t\tComponent component = resolveByComponentHierarchy(container, markupStream, tag);\r\n \r\n-\t\tComponent cursor = container;\r\n-\t\twhile (cursor != null)\r\n+\t\tif (component == null)\r\n \t\t{\r\n-\t\t\tif (cursor instanceof IComponentResolver)\r\n+\t\t\t// fallback to application-level resolvers\r\n+\t\t\tcomponent = resolveByApplication(container, markupStream, tag);\r\n+\t\t}\r\n+\r\n+\t\treturn component;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * Attempts to resolve a component via application registered resolvers.\r\n+\t * \r\n+\t * @param container\r\n+\t * @param markupStream\r\n+\t * @param tag\r\n+\t * @return Null, if no component was found\r\n+\t */\r\n+\tpublic static Component resolveByApplication(final MarkupContainer container,\r\n+\t\tfinal MarkupStream markupStream, final ComponentTag tag)\r\n+\t{\r\n+\t\tfor (final IComponentResolver resolver : Application.get()\r\n+\t\t\t.getPageSettings()\r\n+\t\t\t.getComponentResolvers())\r\n \t\t{\r\n-\t\t\t\tIComponentResolver resolver = (IComponentResolver)cursor;\r\n \t\t\tComponent component = resolver.resolve(container, markupStream, tag);\r\n \t\t\tif (component != null)\r\n \t\t\t{\r\n \t\t\t\treturn component;\r\n \t\t\t}\r\n \t\t}\r\n-\t\t\tcursor = cursor.getParent();\r\n-\t\t}\r\n \r\n-\t\t// fallback to application-level resolvers\r\n+\t\treturn null;\r\n+\t}\r\n \r\n-\t\tfor (final IComponentResolver resolver : Application.get()\r\n-\t\t\t.getPageSettings()\r\n-\t\t\t.getComponentResolvers())\r\n+\t/**\r\n+\t * Attempts to resolve a component via the component hierarchy using resolvers.\r\n+\t * \r\n+\t * @param container\r\n+\t * @param markupStream\r\n+\t * @param tag\r\n+\t * @return Null, if no component was found\r\n+\t */\r\n+\tpublic static Component resolveByComponentHierarchy(final MarkupContainer container,\r\n+\t\tfinal MarkupStream markupStream, final ComponentTag tag)\r\n+\t{\r\n+\t\tComponent cursor = container;\r\n+\t\twhile (cursor != null)\r\n \t\t{\r\n+\t\t\tif (cursor instanceof IComponentResolver)\r\n+\t\t\t{\r\n+\t\t\t\tIComponentResolver resolver = (IComponentResolver)cursor;\r\n \t\t\t\tComponent component = resolver.resolve(container, markupStream, tag);\r\n \t\t\t\tif (component != null)\r\n \t\t\t\t{\r\n \t\t\t\t\treturn component;\r\n \t\t\t\t}\r\n \t\t\t}\r\n+\t\t\tcursor = cursor.getParent();\r\n+\t\t}\r\n \r\n \t\treturn null;\r\n \t}\r\ndiff --git a/wicket/src/main/java/org/apache/wicket/protocol/http/BufferedWebResponse.java b/wicket/src/main/java/org/apache/wicket/protocol/http/BufferedWebResponse.java\nindex 983dc58c18..7bb49484be 100644\n--- a/wicket/src/main/java/org/apache/wicket/protocol/http/BufferedWebResponse.java\n+++ b/wicket/src/main/java/org/apache/wicket/protocol/http/BufferedWebResponse.java\n@@ -493,4 +493,13 @@ public void write(byte[] b, int off, int len) throws IOException\n \t\t\tresponse.write(stream.toByteArray());\n \t\t}\n \t}\n+\n+\t/**\n+\t * @see java.lang.Object#toString()\n+\t */\n+\t@Override\n+\tpublic String toString()\n+\t{\n+\t\treturn charSequenceAction.builder.toString();\n+\t}\n }\n", 
  "project": "wicket", 
  "linesAdd": 152, 
  "jira_id": "2882", 
  "nb_skipped": 1, 
  "commit": "ebe56869", 
  "nb_failure": 0, 
  "linesRem": 24
}