{
  "files": 1, 
  "nb_test": 1078, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.wicket.util.resource.locator.CachingResourceStreamLocatorTest"
  ], 
  "patch": "diff --git a/wicket-core/src/main/java/org/apache/wicket/util/resource/locator/CachingResourceStreamLocator.java b/wicket-core/src/main/java/org/apache/wicket/util/resource/locator/CachingResourceStreamLocator.java\nindex 08f5b26c67..dba49765d0 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/util/resource/locator/CachingResourceStreamLocator.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/util/resource/locator/CachingResourceStreamLocator.java\n@@ -22,6 +22,7 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n+import org.apache.wicket.WicketRuntimeException;\n import org.apache.wicket.request.resource.ResourceReference.Key;\n import org.apache.wicket.util.file.File;\n import org.apache.wicket.util.lang.Args;\n@@ -49,7 +50,7 @@\n \t */\n \tprivate static interface IResourceStreamReference\n \t{\n-\t\tString getReference();\n+\t\tIResourceStream getReference();\n \t}\n \n \t/**\n@@ -61,7 +62,7 @@\n \t{\n \t\tprivate final static NullResourceStreamReference INSTANCE = new NullResourceStreamReference();\n \n-\t\tpublic String getReference()\n+\t\tpublic IResourceStream getReference()\n \t\t{\n \t\t\treturn null;\n \t\t}\n@@ -79,9 +80,9 @@ private FileResourceStreamReference(final String fileName)\n \t\t\tthis.fileName = fileName;\n \t\t}\n \n-\t\tpublic String getReference()\n+\t\tpublic FileResourceStream getReference()\n \t\t{\n-\t\t\treturn fileName;\n+\t\t\treturn new FileResourceStream(new File(fileName));\n \t\t}\n \t}\n \n@@ -97,9 +98,18 @@ private UrlResourceStreamReference(final String url)\n \t\t\tthis.url = url;\n \t\t}\n \n-\t\tpublic String getReference()\n+\t\tpublic UrlResourceStream getReference()\n \t\t{\n-\t\t\treturn url;\n+\t\t\ttry\n+\t\t\t{\n+\t\t\t\treturn new UrlResourceStream(new URL(url));\n+\t\t\t}\n+\t\t\tcatch (MalformedURLException e)\n+\t\t\t{\n+\t\t\t\t// should not ever happen. The cached url is created by previously existing URL\n+\t\t\t\t// instance\n+\t\t\t\tthrow new WicketRuntimeException(e);\n+\t\t\t}\n \t\t}\n \t}\n \n@@ -133,16 +143,21 @@ public CachingResourceStreamLocator(final IResourceStreamLocator resourceStreamL\n \tpublic IResourceStream locate(Class<?> clazz, String path)\n \t{\n \t\tKey key = new Key(clazz.getName(), path, null, null, null);\n-\t\tIResourceStream resourceStream = getCopyFromCache(key);\n+\t\tIResourceStreamReference resourceStreamReference = cache.get(key);\n \n-\t\tif (resourceStream == null)\n+\t\tfinal IResourceStream result;\n+\t\tif (resourceStreamReference == null)\n \t\t{\n-\t\t\tresourceStream = delegate.locate(clazz, path);\n+\t\t\tresult = delegate.locate(clazz, path);\n \n-\t\t\tupdateCache(key, resourceStream);\n+\t\t\tupdateCache(key, result);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tresult = resourceStreamReference.getReference();\n \t\t}\n \n-\t\treturn resourceStream;\n+\t\treturn result;\n \t}\n \n \tprivate void updateCache(Key key, IResourceStream stream)\n@@ -165,60 +180,25 @@ else if (stream instanceof UrlResourceStream)\n \t\t}\n \t}\n \n-\t/**\n-\t * Make a copy before returning an item from the cache as resource streams are not thread-safe.\n-\t * \n-\t * @param key\n-\t *            the cache key\n-\t * @return the cached File or Url resource stream\n-\t */\n-\tprivate IResourceStream getCopyFromCache(Key key)\n-\t{\n-\t\tfinal IResourceStreamReference orig = cache.get(key);\n-\t\tif (NullResourceStreamReference.INSTANCE == orig)\n-\t\t{\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\tif (orig instanceof UrlResourceStreamReference)\n-\t\t{\n-\t\t\tUrlResourceStreamReference resourceStreamReference = (UrlResourceStreamReference)orig;\n-\t\t\tString url = resourceStreamReference.getReference();\n-\t\t\ttry\n-\t\t\t{\n-\t\t\t\treturn new UrlResourceStream(new URL(url));\n-\t\t\t}\n-\t\t\tcatch (MalformedURLException e)\n-\t\t\t{\n-\t\t\t\treturn null;\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (orig instanceof FileResourceStreamReference)\n-\t\t{\n-\t\t\tFileResourceStreamReference resourceStreamReference = (FileResourceStreamReference)orig;\n-\t\t\tString absolutePath = resourceStreamReference.getReference();\n-\t\t\treturn new FileResourceStream(new File(absolutePath));\n-\t\t}\n-\n-\t\treturn null;\n-\t}\n-\n \tpublic IResourceStream locate(Class<?> scope, String path, String style, String variation,\n \t\tLocale locale, String extension, boolean strict)\n \t{\n \t\tKey key = new Key(scope.getName(), path, locale, style, variation);\n-\t\tIResourceStream resourceStream = getCopyFromCache(key);\n+\t\tIResourceStreamReference resourceStreamReference = cache.get(key);\n \n-\t\tif (resourceStream == null)\n+\t\tfinal IResourceStream result;\n+\t\tif (resourceStreamReference == null)\n \t\t{\n-\t\t\tresourceStream = delegate.locate(scope, path, style, variation, locale, extension,\n-\t\t\t\tstrict);\n+\t\t\tresult = delegate.locate(scope, path, style, variation, locale, extension, strict);\n \n-\t\t\tupdateCache(key, resourceStream);\n+\t\t\tupdateCache(key, result);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tresult = resourceStreamReference.getReference();\n \t\t}\n \n-\t\treturn resourceStream;\n+\t\treturn result;\n \t}\n \n \tpublic ResourceNameIterator newResourceNameIterator(String path, Locale locale, String style,\n", 
  "project": "wicket", 
  "linesAdd": 36, 
  "jira_id": "3511", 
  "nb_skipped": 0, 
  "commit": "4a875f46", 
  "nb_failure": 1, 
  "linesRem": 56
}