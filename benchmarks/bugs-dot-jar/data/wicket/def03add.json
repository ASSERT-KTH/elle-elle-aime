{
  "files": 1, 
  "nb_test": 1758, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.wicket.model.LoadableDetachableModelTest"
  ], 
  "patch": "diff --git a/wicket-core/src/main/java/org/apache/wicket/model/LoadableDetachableModel.java b/wicket-core/src/main/java/org/apache/wicket/model/LoadableDetachableModel.java\nindex c172678d79..e3a7fc0013 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/model/LoadableDetachableModel.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/model/LoadableDetachableModel.java\n@@ -23,8 +23,8 @@\n \n /**\n  * Model that makes working with detachable models a breeze. LoadableDetachableModel holds a\n- * temporary, transient model object, that is set when {@link #getObject()} is called by\n- * calling abstract method 'load', and that will be reset/ set to null on {@link #detach()}.\n+ * temporary, transient model object, that is set when {@link #getObject()} is called by calling\n+ * abstract method 'load', and that will be reset/ set to null on {@link #detach()}.\n  * \n  * A usage example:\n  * \n@@ -60,8 +60,40 @@\n \t/** Logger. */\n \tprivate static final Logger log = LoggerFactory.getLogger(LoadableDetachableModel.class);\n \n+\tprivate enum AttachingState \n+\t{\n+\t\tDETACHED(false, false),\n+\t\tATTACHING(true, false), \n+\t\tATTACHED(true, true);\n+\n+\t\tprivate boolean attaching;\n+\t\tprivate boolean attached;\n+\n+\t\tprivate AttachingState(boolean attaching, boolean attached)\n+\t\t{\n+\t\t\tthis.attached = attached;\n+\t\t\tthis.attaching = attaching;\n+\t\t}\n+\t\t\n+\t\tpublic boolean isAttached() \n+\t\t{\n+\t\t\treturn attached;\n+\t\t}\n+\n+\t\tpublic boolean isAttaching() \n+\t\t{\n+\t\t\treturn attaching;\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic String toString()\n+\t\t{\n+\t\t\treturn name().toLowerCase();\n+\t\t}\n+\t}\n+\n \t/** keeps track of whether this model is attached or detached */\n-\tprivate transient boolean attached = false;\n+\tprivate transient AttachingState attached = AttachingState.DETACHED;\n \n \t/** temporary, transient object. */\n \tprivate transient T transientModelObject;\n@@ -83,7 +115,7 @@ public LoadableDetachableModel()\n \tpublic LoadableDetachableModel(T object)\n \t{\n \t\tthis.transientModelObject = object;\n-\t\tattached = true;\n+\t\tattached = AttachingState.ATTACHED;\n \t}\n \n \t/**\n@@ -92,7 +124,7 @@ public LoadableDetachableModel(T object)\n \t@Override\n \tpublic void detach()\n \t{\n-\t\tif (attached)\n+\t\tif (attached == AttachingState.ATTACHED)\n \t\t{\n \t\t\ttry\n \t\t\t{\n@@ -100,7 +132,7 @@ public void detach()\n \t\t\t}\n \t\t\tfinally\n \t\t\t{\n-\t\t\t\tattached = false;\n+\t\t\t\tattached = AttachingState.DETACHED;\n \t\t\t\ttransientModelObject = null;\n \n \t\t\t\tlog.debug(\"removed transient object for {}, requestCycle {}\", this,\n@@ -115,8 +147,11 @@ public void detach()\n \t@Override\n \tpublic final T getObject()\n \t{\n-\t\tif (!attached)\n+\t\tif (attached == AttachingState.DETACHED)\n \t\t{\n+\t\t\t// prevent infinite attachment loops\n+\t\t\tattached = AttachingState.ATTACHING;\n+\n \t\t\ttransientModelObject = load();\n \n \t\t\tif (log.isDebugEnabled())\n@@ -125,7 +160,7 @@ public final T getObject()\n \t\t\t\t\t\", requestCycle \" + RequestCycle.get());\n \t\t\t}\n \n-\t\t\tattached = true;\n+\t\t\tattached = AttachingState.ATTACHED;\n \t\t\tonAttach();\n \t\t}\n \t\treturn transientModelObject;\n@@ -138,7 +173,7 @@ public final T getObject()\n \t */\n \tpublic final boolean isAttached()\n \t{\n-\t\treturn attached;\n+\t\treturn attached.isAttached();\n \t}\n \n \t/**\n@@ -148,8 +183,11 @@ public final boolean isAttached()\n \tpublic String toString()\n \t{\n \t\tStringBuilder sb = new StringBuilder(super.toString());\n-\t\tsb.append(\":attached=\").append(attached).append(\":tempModelObject=[\").append(\n-\t\t\tthis.transientModelObject).append(\"]\");\n+\t\tsb.append(\":attached=\")\n+\t\t\t.append(isAttached())\n+\t\t\t.append(\":tempModelObject=[\")\n+\t\t\t.append(this.transientModelObject)\n+\t\t\t.append(\"]\");\n \t\treturn sb.toString();\n \t}\n \n@@ -187,8 +225,7 @@ protected void onDetach()\n \t@Override\n \tpublic void setObject(final T object)\n \t{\n-\t\tattached = true;\n+\t\tattached = AttachingState.ATTACHED;\n \t\ttransientModelObject = object;\n \t}\n-\n }\n", 
  "project": "wicket", 
  "linesAdd": 50, 
  "jira_id": "5916", 
  "nb_skipped": 1, 
  "commit": "def03add", 
  "nb_failure": 0, 
  "linesRem": 13
}