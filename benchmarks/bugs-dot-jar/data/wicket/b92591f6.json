{
  "files": 7, 
  "nb_test": 1692, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.wicket.queueing.transparentresolvers.DequeueingTransparentWebMarkupContainerTest"
  ], 
  "patch": "diff --git a/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java b/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java\nindex b607b4e273..1ec4f02a73 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java\n@@ -1535,7 +1535,7 @@ private void dequeueAutoComponents()\n \t\t\t\tComponentTag.IAutoComponentFactory autoComponentFactory = tag.getAutoComponentFactory();\n \t\t\t\tif (autoComponentFactory != null)\n \t\t\t\t{\n-\t\t\t\t\tqueue(autoComponentFactory.newComponent(tag));\n+\t\t\t\t\tqueue(autoComponentFactory.newComponent(this, tag));\n \t\t\t\t}\n \t\t\t}\n \t\t}\ndiff --git a/wicket-core/src/main/java/org/apache/wicket/markup/ComponentTag.java b/wicket-core/src/main/java/org/apache/wicket/markup/ComponentTag.java\nindex b572677197..bffde4e3ce 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/markup/ComponentTag.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/markup/ComponentTag.java\n@@ -25,6 +25,7 @@\n import java.util.Map;\n \n import org.apache.wicket.Component;\n+import org.apache.wicket.MarkupContainer;\n import org.apache.wicket.behavior.Behavior;\n import org.apache.wicket.markup.parser.XmlTag;\n import org.apache.wicket.markup.parser.XmlTag.TagType;\n@@ -65,7 +66,7 @@\n \t\t/**\n \t\t * Creates a new instance of auto component to be queued\n \t\t */\n-\t\tComponent newComponent(ComponentTag tag);\n+\t\tComponent newComponent(MarkupContainer container, ComponentTag tag);\n \t}\n \n \ndiff --git a/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/EnclosureHandler.java b/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/EnclosureHandler.java\nindex 4a47f38157..098533ca16 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/EnclosureHandler.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/EnclosureHandler.java\n@@ -56,7 +56,7 @@\n \tprivate static final IAutoComponentFactory FACTORY = new IAutoComponentFactory()\n \t{\n \t\t@Override\n-\t\tpublic Component newComponent(ComponentTag tag)\n+\t\tpublic Component newComponent(MarkupContainer container, ComponentTag tag)\n \t\t{\n \t\t\treturn new Enclosure(tag.getId(), tag\n \t\t\t\t.getAttribute(EnclosureHandler.CHILD_ATTRIBUTE));\ndiff --git a/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/HtmlHeaderSectionHandler.java b/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/HtmlHeaderSectionHandler.java\nindex 0f859645ee..6d08c95a52 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/HtmlHeaderSectionHandler.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/HtmlHeaderSectionHandler.java\n@@ -49,8 +49,8 @@\n  */\n public final class HtmlHeaderSectionHandler extends AbstractMarkupFilter\n {\n-\tprivate static final String BODY = \"body\";\n-\tprivate static final String HEAD = \"head\";\n+\tpublic static final String BODY = \"body\";\n+\tpublic static final String HEAD = \"head\";\n \n \t/** The automatically assigned wicket:id to &gt;head&lt; tag */\n \tpublic static final String HEADER_ID = \"_header_\";\ndiff --git a/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/InlineEnclosureHandler.java b/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/InlineEnclosureHandler.java\nindex e3c953a043..0014b92d1a 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/InlineEnclosureHandler.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/InlineEnclosureHandler.java\n@@ -127,7 +127,7 @@ protected MarkupElement onComponentTag(final ComponentTag tag) throws ParseExcep\n \t\t\t\t\ttag.setAutoComponentFactory(new ComponentTag.IAutoComponentFactory()\r\n \t\t\t\t\t{\r\n \t\t\t\t\t\t@Override\r\n-\t\t\t\t\t\tpublic Component newComponent(ComponentTag tag)\r\n+\t\t\t\t\t\tpublic Component newComponent(MarkupContainer container, ComponentTag tag)\r\n \t\t\t\t\t\t{\r\n \t\t\t\t\t\t\tString attributeName = getInlineEnclosureAttributeName(null);\r\n \t\t\t\t\t\t\tString childId = tag.getAttribute(attributeName);\r\ndiff --git a/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java b/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java\nindex 0ae97ee1b3..79edb52a66 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java\n@@ -86,8 +86,8 @@ public void onComponentTag(Component component, ComponentTag tag)\n \t\t\t{\n \t\t\t\tString attrValue = tag.getAttributes().getString(attrName);\n \n-\t\t\t\tif ((attrValue != null) && (attrValue.startsWith(\"/\") == false) &&\n-\t\t\t\t\t(!attrValue.contains(\":\")) && !(attrValue.startsWith(\"#\")))\n+\t\t\t\tif ((attrValue != null) && (attrValue.startsWith(\"/\") == false)\n+\t\t\t\t\t&& (!attrValue.contains(\":\")) && !(attrValue.startsWith(\"#\")))\n \t\t\t\t{\n \t\t\t\t\ttag.getAttributes().put(attrName,\n \t\t\t\t\t\tUrlUtils.rewriteToContextRelative(attrValue, RequestCycle.get()));\n@@ -96,6 +96,14 @@ public void onComponentTag(Component component, ComponentTag tag)\n \t\t}\n \t};\n \t\n+\t/** \n+\t * https://issues.apache.org/jira/browse/WICKET-5724\n+\t * \n+\t * Says if we are inside an head tag or wicket:head tag. \n+\t * \n+\t * */\n+\tprivate boolean insideHead;\n+\n \t/**\n \t * Constructor for the IComponentResolver role.\n \t */\n@@ -106,6 +114,7 @@ public RelativePathPrefixHandler()\n \n \t/**\n \t * Constructor for the IMarkupFilter role\n+\t * \n \t * @param markup\n \t *            The markup created by reading the markup file\n \t */\n@@ -119,14 +128,26 @@ protected final MarkupElement onComponentTag(ComponentTag tag) throws ParseExcep\n \t{\n \t\tif (tag.isClose())\n \t\t{\n+\t\t\tif (isHeadTag(tag))\t\n+\t\t\t{\n+\t\t\t\t//outside head tag\n+\t\t\t\tinsideHead = false;\n+\t\t\t}\n+\t\t\t\n \t\t\treturn tag;\n \t\t}\n \n+\t\tif (isHeadTag(tag))\t\n+\t\t{\n+\t\t\t//inside head tag\n+\t\t\tinsideHead = true;\n+\t\t}\n+\n \t\tString wicketIdAttr = getWicketNamespace() + \":\" + \"id\";\n \n \t\t// Don't touch any wicket:id component and any auto-components\n-\t\tif ((tag instanceof WicketTag) || (tag.isAutolinkEnabled() == true) ||\n-\t\t\t(tag.getAttributes().get(wicketIdAttr) != null))\n+\t\tif ((tag instanceof WicketTag) || (tag.isAutolinkEnabled() == true)\n+\t\t\t|| (tag.getAttributes().get(wicketIdAttr) != null))\n \t\t{\n \t\t\treturn tag;\n \t\t}\n@@ -136,13 +157,33 @@ protected final MarkupElement onComponentTag(ComponentTag tag) throws ParseExcep\n \t\tfor (String attrName : attributeNames)\n \t\t{\n \t\t\tString attrValue = tag.getAttributes().getString(attrName);\n-\t\t\tif ((attrValue != null) && (attrValue.startsWith(\"/\") == false) &&\n-\t\t\t\t(!attrValue.contains(\":\")) && !(attrValue.startsWith(\"#\")))\n+\t\t\tif ((attrValue != null) && (attrValue.startsWith(\"/\") == false)\n+\t\t\t\t&& (!attrValue.contains(\":\")) && !(attrValue.startsWith(\"#\")))\n \t\t\t{\n \t\t\t\tif (tag.getId() == null)\n \t\t\t\t{\n \t\t\t\t\ttag.setId(getWicketRelativePathPrefix(null));\n \t\t\t\t\ttag.setAutoComponentTag(true);\n+\t\t\t\t\t\n+\t\t\t\t\t/**\n+\t\t\t\t\t * https://issues.apache.org/jira/browse/WICKET-5724\n+\t\t\t\t\t * Transparent component inside page body must allow \n+\t\t\t\t\t * queued children components.\n+\t\t\t\t\t */\n+\t\t\t\t\tif(!insideHead)\n+\t\t\t\t\t{\n+\t\t\t\t\t\ttag.setAutoComponentFactory(new ComponentTag.IAutoComponentFactory()\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic Component newComponent(MarkupContainer container, ComponentTag tag)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tString id = tag.getId() + container.getPage().getAutoIndex();\n+\t\t\t\t\t\t\t\ttag.setId(id);\n+\t\n+\t\t\t\t\t\t\t\treturn new TransparentWebMarkupContainer(id);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t});\t\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\ttag.addBehavior(RELATIVE_PATH_BEHAVIOR);\n \t\t\t\ttag.setModified(true);\n@@ -153,6 +194,16 @@ protected final MarkupElement onComponentTag(ComponentTag tag) throws ParseExcep\n \t\treturn tag;\n \t}\n \t\n+\tprivate boolean isHeadTag(ComponentTag tag)\n+\t{\n+\t\tif (HtmlHeaderSectionHandler.HEAD.equalsIgnoreCase(tag.getName()))\n+\t\t{\n+\t\t\treturn true;\n+\t\t}\t\n+\t\t\n+\t\treturn false;\n+\t}\n+\t\n \t@Override\n \tpublic Component resolve(final MarkupContainer container, final MarkupStream markupStream,\n \t\tfinal ComponentTag tag)\ndiff --git a/wicket-core/src/main/java/org/apache/wicket/markup/resolver/IComponentResolver.java b/wicket-core/src/main/java/org/apache/wicket/markup/resolver/IComponentResolver.java\nindex b8d1588e2b..9e83b7182c 100644\n--- a/wicket-core/src/main/java/org/apache/wicket/markup/resolver/IComponentResolver.java\n+++ b/wicket-core/src/main/java/org/apache/wicket/markup/resolver/IComponentResolver.java\n@@ -28,6 +28,8 @@\n  * are first looked up in a component's hierarchy before falling back to a list of\n  * IComponentResolvers maintained in {@link PageSettings}.\n  * \n+ * NOTE: implementations for this interface must be thread-safe!\n+ * \n  * @see ComponentResolvers\n  * \n  * @author Juergen Donnerstag\n", 
  "project": "wicket", 
  "linesAdd": 66, 
  "jira_id": "5724", 
  "nb_skipped": 1, 
  "commit": "b92591f6", 
  "nb_failure": 0, 
  "linesRem": 12
}