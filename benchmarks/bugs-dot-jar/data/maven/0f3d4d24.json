{
  "files": 1, 
  "nb_test": 35, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.maven.model.validation.DefaultModelValidatorTest"
  ], 
  "patch": "diff --git a/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java b/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java\nindex c60c446f4..4e429a4aa 100644\n--- a/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java\n+++ b/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java\n@@ -139,8 +139,7 @@ public void validateEffectiveModel( Model model, ModelBuildingRequest request, M\n \n         validateStringNotEmpty( \"version\", problems, false, model.getVersion() );\n \n-        boolean warnOnBadBoolean = request.getValidationLevel() < ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0;\n-        boolean warnOnBadDependencyScope = request.getValidationLevel() < ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0;\n+        boolean warnOnly = request.getValidationLevel() < ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0;\n \n         for ( Dependency d : model.getDependencies() )\n         {\n@@ -178,12 +177,15 @@ else if ( StringUtils.isNotEmpty( d.getSystemPath() ) )\n \n             if ( request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0 )\n             {\n-                validateBoolean( \"dependencies.dependency.optional\", problems, warnOnBadBoolean, d.getOptional(),\n+                validateVersion( \"dependencies.dependency.version\", problems, warnOnly, d.getVersion(),\n+                                 d.getManagementKey() );\n+\n+                validateBoolean( \"dependencies.dependency.optional\", problems, warnOnly, d.getOptional(),\n                                  d.getManagementKey() );\n \n                 /*\n                  * TODO: Extensions like Flex Mojos use custom scopes like \"merged\", \"internal\", \"external\", etc. In\n-                 * order to don't break backward-compat with those, only warn but don't error our.\n+                 * order to don't break backward-compat with those, only warn but don't error out.\n                  */\n                 validateEnum( \"dependencies.dependency.scope\", problems, true, d.getScope(),\n                               d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\" );\n@@ -227,8 +229,8 @@ else if ( StringUtils.isNotEmpty( d.getSystemPath() ) )\n \n                 if ( request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0 )\n                 {\n-                    validateBoolean( \"dependencyManagement.dependencies.dependency.optional\", problems,\n-                                     warnOnBadBoolean, d.getOptional(), d.getManagementKey() );\n+                    validateBoolean( \"dependencyManagement.dependencies.dependency.optional\", problems, warnOnly,\n+                                     d.getOptional(), d.getManagementKey() );\n                 }\n             }\n         }\n@@ -250,16 +252,16 @@ else if ( StringUtils.isNotEmpty( d.getSystemPath() ) )\n                     validateStringNotEmpty( \"build.plugins.plugin.version\", problems, warnOnMissingPluginVersion,\n                                             p.getVersion(), p.getKey() );\n \n-                    validateBoolean( \"build.plugins.plugin.inherited\", problems, warnOnBadBoolean, p.getInherited(),\n+                    validateBoolean( \"build.plugins.plugin.inherited\", problems, warnOnly, p.getInherited(),\n                                      p.getKey() );\n \n-                    validateBoolean( \"build.plugins.plugin.extensions\", problems, warnOnBadBoolean, p.getExtensions(),\n+                    validateBoolean( \"build.plugins.plugin.extensions\", problems, warnOnly, p.getExtensions(),\n                                      p.getKey() );\n \n                     for ( Dependency d : p.getDependencies() )\n                     {\n                         validateEnum( \"build.plugins.plugin[\" + p.getKey() + \"].dependencies.dependency.scope\",\n-                                      problems, warnOnBadDependencyScope, d.getScope(), d.getManagementKey(),\n+                                      problems, warnOnly, d.getScope(), d.getManagementKey(),\n                                       \"compile\", \"runtime\", \"system\" );\n                     }\n                 }\n@@ -578,11 +580,12 @@ private boolean validateBoolean( String fieldName, ModelProblemCollector problem\n \n         if ( sourceHint != null )\n         {\n-            addViolation( problems, warning, \"'\" + fieldName + \"' must be 'true' or 'false' for \" + sourceHint );\n+            addViolation( problems, warning, \"'\" + fieldName + \"' must be 'true' or 'false' for \" + sourceHint\n+                + \" but is '\" + string + \"'.\" );\n         }\n         else\n         {\n-            addViolation( problems, warning, \"'\" + fieldName + \"' must be 'true' or 'false'.\" );\n+            addViolation( problems, warning, \"'\" + fieldName + \"' must be 'true' or 'false' but is '\" + string + \"'.\" );\n         }\n \n         return false;\n@@ -605,11 +608,39 @@ private boolean validateEnum( String fieldName, ModelProblemCollector problems,\n \n         if ( sourceHint != null )\n         {\n-            addViolation( problems, warning, \"'\" + fieldName + \"' must be one of \" + values + \" for \" + sourceHint );\n+            addViolation( problems, warning, \"'\" + fieldName + \"' must be one of \" + values + \" for \" + sourceHint\n+                + \" but is '\" + string + \"'.\" );\n+        }\n+        else\n+        {\n+            addViolation( problems, warning, \"'\" + fieldName + \"' must be one of \" + values + \" but is '\" + string\n+                + \"'.\" );\n+        }\n+\n+        return false;\n+    }\n+\n+    private boolean validateVersion( String fieldName, ModelProblemCollector problems, boolean warning, String string,\n+                                     String sourceHint )\n+    {\n+        if ( string == null || string.length() <= 0 )\n+        {\n+            return true;\n+        }\n+\n+        if ( !hasExpression( string ) )\n+        {\n+            return true;\n+        }\n+\n+        if ( sourceHint != null )\n+        {\n+            addViolation( problems, warning, \"'\" + fieldName + \"' must be a valid version for \" + sourceHint\n+                + \" but is '\" + string + \"'.\" );\n         }\n         else\n         {\n-            addViolation( problems, warning, \"'\" + fieldName + \"' must be one of \" + values );\n+            addViolation( problems, warning, \"'\" + fieldName + \"' must be a valid version but is '\" + string + \"'.\" );\n         }\n \n         return false;\n", 
  "project": "maven", 
  "linesAdd": 44, 
  "jira_id": "4383", 
  "nb_skipped": 0, 
  "commit": "0f3d4d24", 
  "nb_failure": 1, 
  "linesRem": 13
}