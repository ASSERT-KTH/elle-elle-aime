{
  "files": 1, 
  "nb_test": 82, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.maven.model.validation.DefaultModelValidatorTest"
  ], 
  "patch": "diff --git a/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java b/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java\nindex fa262c89a..bed7b4714 100644\n--- a/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java\n+++ b/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java\n@@ -253,12 +253,7 @@ public void validateEffectiveModel( Model model, ModelBuildingRequest request, M\n                     validateBoolean( \"build.plugins.plugin.extensions\", problems, errOn30, p.getExtensions(),\n                                      p.getKey() );\n \n-                    for ( Dependency d : p.getDependencies() )\n-                    {\n-                        validateEnum( \"build.plugins.plugin[\" + p.getKey() + \"].dependencies.dependency.scope\",\n-                                      problems, errOn30, d.getScope(), d.getManagementKey(),\n-                                      \"compile\", \"runtime\", \"system\" );\n-                    }\n+                    validateEffectivePluginDependencies( problems, p, request );\n                 }\n \n                 validateResources( problems, build.getResources(), \"build.resources.resource\", request );\n@@ -365,24 +360,70 @@ else if ( \"system\".equals( dependency.getScope() ) )\n     }\n \n     private void validateEffectiveDependencies( ModelProblemCollector problems, List<Dependency> dependencies,\n-                                                boolean managed, ModelBuildingRequest request )\n+                                                boolean management, ModelBuildingRequest request )\n     {\n         Severity errOn30 = getSeverity( request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0 );\n \n-        String prefix = managed ? \"dependencyManagement.dependencies.dependency.\" : \"dependencies.dependency.\";\n+        String prefix = management ? \"dependencyManagement.dependencies.dependency.\" : \"dependencies.dependency.\";\n \n         for ( Dependency d : dependencies )\n+        {\n+            validateEffectiveDependency( problems, d, management, prefix, request );\n+\n+            if ( request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0 )\n+            {\n+                validateBoolean( prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey() );\n+\n+                if ( !management )\n+                {\n+                    validateVersion( prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey() );\n+\n+                    /*\n+                     * TODO: Extensions like Flex Mojos use custom scopes like \"merged\", \"internal\", \"external\", etc. In\n+                     * order to don't break backward-compat with those, only warn but don't error out.\n+                     */\n+                    validateEnum( prefix + \"scope\", problems, Severity.WARNING, d.getScope(), d.getManagementKey(),\n+                                  \"provided\", \"compile\", \"runtime\", \"test\", \"system\" );\n+                }\n+            }\n+        }\n+    }\n+\n+    private void validateEffectivePluginDependencies( ModelProblemCollector problems, Plugin plugin,\n+                                                      ModelBuildingRequest request )\n+    {\n+        List<Dependency> dependencies = plugin.getDependencies();\n+\n+        if ( !dependencies.isEmpty() )\n+        {\n+            String prefix = \"build.plugins.plugin[\" + plugin.getKey() + \"].dependencies.dependency.\";\n+\n+            Severity errOn30 = getSeverity( request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0 );\n+\n+            for ( Dependency d : dependencies )\n+            {\n+                validateEffectiveDependency( problems, d, false, prefix, request );\n+\n+                validateVersion( prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey() );\n+\n+                validateEnum( prefix + \"scope\", problems, errOn30, d.getScope(), d.getManagementKey(), \"compile\",\n+                              \"runtime\", \"system\" );\n+            }\n+        }\n+    }\n+\n+    private void validateEffectiveDependency( ModelProblemCollector problems, Dependency d, boolean management,\n+                                              String prefix, ModelBuildingRequest request )\n     {\n         validateId( prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey() );\n \n         validateId( prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey() );\n \n-            if ( !managed )\n+        if ( !management )\n         {\n             validateStringNotEmpty( prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey() );\n \n-                validateStringNotEmpty( prefix + \"version\", problems, Severity.ERROR, d.getVersion(),\n-                                        d.getManagementKey() );\n+            validateStringNotEmpty( prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey() );\n         }\n \n         if ( \"system\".equals( d.getScope() ) )\n@@ -420,24 +461,6 @@ else if ( StringUtils.isNotEmpty( d.getSystemPath() ) )\n             addViolation( problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\"\n                 + \" This field may only be specified for a dependency with system scope.\" );\n         }\n-\n-            if ( request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0 )\n-            {\n-                validateBoolean( prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey() );\n-\n-                if ( !managed )\n-                {\n-                    validateVersion( prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey() );\n-\n-                    /*\n-                     * TODO: Extensions like Flex Mojos use custom scopes like \"merged\", \"internal\", \"external\", etc. In\n-                     * order to don't break backward-compat with those, only warn but don't error out.\n-                     */\n-                    validateEnum( prefix + \"scope\", problems, Severity.WARNING, d.getScope(), d.getManagementKey(),\n-                                  \"provided\", \"compile\", \"runtime\", \"test\", \"system\" );\n-                }\n-            }\n-        }\n     }\n \n     private void validateRepositories( ModelProblemCollector problems, List<Repository> repositories, String prefix,\n", 
  "project": "maven", 
  "linesAdd": 52, 
  "jira_id": "4648", 
  "nb_skipped": 0, 
  "commit": "83389c34", 
  "nb_failure": 4, 
  "linesRem": 29
}