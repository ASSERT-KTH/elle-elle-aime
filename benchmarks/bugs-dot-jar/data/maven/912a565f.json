{
  "files": 1, 
  "nb_test": 198, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.maven.settings.validation.DefaultSettingsValidatorTest"
  ], 
  "patch": "diff --git a/maven-core/src/main/java/org/apache/maven/settings/validation/DefaultSettingsValidator.java b/maven-core/src/main/java/org/apache/maven/settings/validation/DefaultSettingsValidator.java\nindex b44d8d9ba..0b6eaaf8a 100644\n--- a/maven-core/src/main/java/org/apache/maven/settings/validation/DefaultSettingsValidator.java\n+++ b/maven-core/src/main/java/org/apache/maven/settings/validation/DefaultSettingsValidator.java\n@@ -21,12 +21,15 @@\n \n import java.util.List;\n \n+import org.apache.maven.settings.Mirror;\n import org.apache.maven.settings.Profile;\n import org.apache.maven.settings.Repository;\n+import org.apache.maven.settings.Server;\n import org.apache.maven.settings.Settings;\n import org.apache.maven.settings.building.SettingsProblem;\n import org.apache.maven.settings.building.SettingsProblemCollector;\n import org.codehaus.plexus.component.annotations.Component;\n+import org.codehaus.plexus.util.StringUtils;\n \n /**\n  * @author Milos Kleint\n@@ -36,16 +39,69 @@\n     implements SettingsValidator\n {\n \n+    private static final String ID_REGEX = \"[A-Za-z0-9_\\\\-.]+\";\n+\n     public void validate( Settings settings, SettingsProblemCollector problems )\n     {\n+        if ( settings.isUsePluginRegistry() )\n+        {\n+            addWarn( problems, \"'usePluginRegistry' is deprecated and has no effect.\" );\n+        }\n+\n+        List<String> pluginGroups = settings.getPluginGroups();\n+\n+        if ( pluginGroups != null )\n+        {\n+            for ( int i = 0; i < pluginGroups.size(); i++ )\n+            {\n+                String pluginGroup = pluginGroups.get( i ).trim();\n+\n+                if ( StringUtils.isBlank( pluginGroup ) )\n+                {\n+                    addError( problems, \"'pluginGroups.pluginGroup[\" + i + \"]' must not be empty.\" );\n+                }\n+                else if ( !pluginGroup.matches( ID_REGEX ) )\n+                {\n+                    addError( problems, \"'pluginGroups.pluginGroup[\" + i\n+                        + \"]' must denote a valid group id and match the pattern \" + ID_REGEX );\n+                }\n+            }\n+        }\n+\n+        List<Server> servers = settings.getServers();\n+\n+        if ( servers != null )\n+        {\n+            for ( int i = 0; i < servers.size(); i++ )\n+            {\n+                Server server = servers.get( i );\n+\n+                validateStringNotEmpty( problems, \"servers.server[\" + i + \"].id\", server.getId(), null );\n+            }\n+        }\n+\n+        List<Mirror> mirrors = settings.getMirrors();\n+\n+        if ( mirrors != null )\n+        {\n+            for ( Mirror mirror : mirrors )\n+            {\n+                validateStringNotEmpty( problems, \"mirrors.mirror.id\", mirror.getId(), mirror.getUrl() );\n+\n+                validateStringNotEmpty( problems, \"mirrors.mirror.url\", mirror.getUrl(), mirror.getId() );\n+\n+                validateStringNotEmpty( problems, \"mirrors.mirror.mirrorOf\", mirror.getMirrorOf(), mirror.getId() );\n+            }\n+        }\n+\n         List<Profile> profiles = settings.getProfiles();\n \n         if ( profiles != null )\n         {\n-            for ( Profile prof : profiles )\n+            for ( Profile profile : profiles )\n             {\n-                validateRepositories( problems, prof.getRepositories(), \"repositories.repository\" );\n-                validateRepositories( problems, prof.getPluginRepositories(), \"pluginRepositories.pluginRepository\" );\n+                validateRepositories( problems, profile.getRepositories(), \"repositories.repository\" );\n+                validateRepositories( problems, profile.getPluginRepositories(), \"pluginRepositories.pluginRepository\" );\n             }\n         }\n     }\n@@ -54,9 +110,15 @@ private void validateRepositories( SettingsProblemCollector problems, List<Repos\n     {\n         for ( Repository repository : repositories )\n         {\n-            validateStringNotEmpty( problems, prefix + \".id\", repository.getId() );\n+            validateStringNotEmpty( problems, prefix + \".id\", repository.getId(), repository.getUrl() );\n \n-            validateStringNotEmpty( problems, prefix + \".url\", repository.getUrl() );\n+            validateStringNotEmpty( problems, prefix + \".url\", repository.getUrl(), repository.getId() );\n+\n+            if ( \"legacy\".equals( repository.getLayout() ) )\n+            {\n+                addWarn( problems, \"'\" + prefix + \".layout' for \" + repository.getId()\n+                    + \" uses the deprecated value 'legacy'.\" );\n+            }\n         }\n     }\n \n@@ -64,11 +126,6 @@ private void validateRepositories( SettingsProblemCollector problems, List<Repos\n     // Field validation\n     // ----------------------------------------------------------------------\n \n-    private boolean validateStringNotEmpty( SettingsProblemCollector problems, String fieldName, String string )\n-    {\n-        return validateStringNotEmpty( problems, fieldName, string, null );\n-    }\n-\n     /**\n      * Asserts:\n      * <p/>\n@@ -137,4 +194,9 @@ private void addError( SettingsProblemCollector problems, String msg )\n         problems.add( SettingsProblem.Severity.ERROR, msg, -1, -1, null );\n     }\n \n+    private void addWarn( SettingsProblemCollector problems, String msg )\n+    {\n+        problems.add( SettingsProblem.Severity.WARNING, msg, -1, -1, null );\n+    }\n+\n }\n", 
  "project": "maven", 
  "linesAdd": 72, 
  "jira_id": "3616", 
  "nb_skipped": 0, 
  "commit": "912a565f", 
  "nb_failure": 1, 
  "linesRem": 10
}