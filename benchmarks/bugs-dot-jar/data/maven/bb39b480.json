{
  "files": 1, 
  "nb_test": 83, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.maven.model.validation.DefaultModelValidatorTest"
  ], 
  "patch": "diff --git a/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java b/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java\nindex 429144397..73fb915b7 100644\n--- a/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java\n+++ b/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java\n@@ -28,6 +28,7 @@\n import java.util.Set;\n \n import org.apache.maven.model.Build;\n+import org.apache.maven.model.BuildBase;\n import org.apache.maven.model.Dependency;\n import org.apache.maven.model.DependencyManagement;\n import org.apache.maven.model.DistributionManagement;\n@@ -103,12 +104,12 @@ public void validateRawModel( Model model, ModelBuildingRequest request, ModelPr\n             Build build = model.getBuild();\n             if ( build != null )\n             {\n-                validateRawPlugins( problems, build.getPlugins(), false, request );\n+                validateRawPlugins( problems, build.getPlugins(), \"build.plugins.plugin\", request );\n \n                 PluginManagement mngt = build.getPluginManagement();\n                 if ( mngt != null )\n                 {\n-                    validateRawPlugins( problems, mngt.getPlugins(), true, request );\n+                    validateRawPlugins( problems, mngt.getPlugins(), \"build.pluginManagement.plugins.plugin\", request );\n                 }\n             }\n \n@@ -116,38 +117,49 @@ public void validateRawModel( Model model, ModelBuildingRequest request, ModelPr\n \n             for ( Profile profile : model.getProfiles() )\n             {\n+                String prefix = \"profiles.profile[\" + profile.getId() + \"]\";\n+\n                 if ( !profileIds.add( profile.getId() ) )\n                 {\n                     addViolation( problems, errOn30, \"profiles.profile.id\", null,\n                                   \"must be unique but found duplicate profile with id \" + profile.getId(), profile );\n                 }\n \n-                validateRawDependencies( problems, profile.getDependencies(), \"profiles.profile[\" + profile.getId()\n-                    + \"].dependencies.dependency\", request );\n+                validateRawDependencies( problems, profile.getDependencies(), prefix + \".dependencies.dependency\",\n+                                         request );\n \n                 if ( profile.getDependencyManagement() != null )\n                 {\n-                    validateRawDependencies( problems, profile.getDependencyManagement().getDependencies(),\n-                                          \"profiles.profile[\" + profile.getId()\n-                                              + \"].dependencyManagement.dependencies.dependency\", request );\n+                    validateRawDependencies( problems, profile.getDependencyManagement().getDependencies(), prefix\n+                        + \".dependencyManagement.dependencies.dependency\", request );\n                 }\n \n-                validateRepositories( problems, profile.getRepositories(), \"profiles.profile[\" + profile.getId()\n-                    + \"].repositories.repository\", request );\n+                validateRepositories( problems, profile.getRepositories(), prefix + \".repositories.repository\", request );\n+\n+                validateRepositories( problems, profile.getPluginRepositories(), prefix\n+                    + \".pluginRepositories.pluginRepository\", request );\n \n-                validateRepositories( problems, profile.getPluginRepositories(), \"profiles.profile[\" + profile.getId()\n-                    + \"].pluginRepositories.pluginRepository\", request );\n+                BuildBase buildBase = profile.getBuild();\n+                if ( buildBase != null )\n+                {\n+                    validateRawPlugins( problems, buildBase.getPlugins(), prefix + \".plugins.plugin\", request );\n+\n+                    PluginManagement mngt = buildBase.getPluginManagement();\n+                    if ( mngt != null )\n+                    {\n+                        validateRawPlugins( problems, mngt.getPlugins(), prefix + \".pluginManagement.plugins.plugin\",\n+                                            request );\n+                    }\n+                }\n             }\n         }\n     }\n \n-    private void validateRawPlugins( ModelProblemCollector problems, List<Plugin> plugins, boolean managed,\n+    private void validateRawPlugins( ModelProblemCollector problems, List<Plugin> plugins, String prefix,\n                                      ModelBuildingRequest request )\n     {\n         Severity errOn31 = getSeverity( request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1 );\n \n-        String prefix = ( managed ? \"build.pluginManagement.\" : \"build.\" ) + \"plugins.plugin.\";\n-\n         Map<String, Plugin> index = new HashMap<String, Plugin>();\n \n         for ( Plugin plugin : plugins )\n@@ -158,7 +170,7 @@ private void validateRawPlugins( ModelProblemCollector problems, List<Plugin> pl\n \n             if ( existing != null )\n             {\n-                addViolation( problems, errOn31, prefix + \"(groupId:artifactId)\", null,\n+                addViolation( problems, errOn31, prefix + \".(groupId:artifactId)\", null,\n                               \"must be unique but found duplicate declaration of plugin \" + key, plugin );\n             }\n             else\n@@ -172,7 +184,7 @@ private void validateRawPlugins( ModelProblemCollector problems, List<Plugin> pl\n             {\n                 if ( !executionIds.add( exec.getId() ) )\n                 {\n-                    addViolation( problems, Severity.ERROR, \"build.plugins.plugin[\" + plugin.getKey()\n+                    addViolation( problems, Severity.ERROR, prefix + \"[\" + plugin.getKey()\n                         + \"].executions.execution.id\", null, \"must be unique but found duplicate execution with id \"\n                         + exec.getId(), exec );\n                 }\n", 
  "project": "maven", 
  "linesAdd": 28, 
  "jira_id": "4695", 
  "nb_skipped": 0, 
  "commit": "bb39b480", 
  "nb_failure": 2, 
  "linesRem": 16
}