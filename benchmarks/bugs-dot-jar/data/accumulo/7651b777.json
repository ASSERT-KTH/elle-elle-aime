{
  "files": 2, 
  "nb_test": 432, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.accumulo.core.util.shell.command.FormatterCommandTest"
  ], 
  "patch": "diff --git a/core/src/main/java/org/apache/accumulo/core/client/mock/MockShell.java b/core/src/main/java/org/apache/accumulo/core/client/mock/MockShell.java\nindex 5ff340b0a..0fbe879d4 100644\n--- a/core/src/main/java/org/apache/accumulo/core/client/mock/MockShell.java\n+++ b/core/src/main/java/org/apache/accumulo/core/client/mock/MockShell.java\n@@ -44,15 +44,19 @@ public MockShell(InputStream in, Writer writer) throws IOException {\n     this.writer = writer;\n   }\n \n+  @Override\n   public boolean config(String... args) {\n-    configError = super.config(args);\n+    // If configuring the shell failed, fail quickly\n+    if (!super.config(args)) {\n+      return false;\n+    }\n \n     // Update the ConsoleReader with the input and output \"redirected\"\n     try {\n       this.reader = new ConsoleReader(in, writer);\n     } catch (Exception e) {\n       printException(e);\n-      configError = true;\n+      return false;\n     }\n \n     // Don't need this for testing purposes\n@@ -61,7 +65,7 @@ public boolean config(String... args) {\n \n     // Make the parsing from the client easier;\n     this.verbose = false;\n-    return configError;\n+    return true;\n   }\n \n   @Override\n@@ -71,9 +75,6 @@ protected void setInstance(CommandLine cl) {\n   }\n \n   public int start() throws IOException {\n-    if (configError)\n-      return 1;\n-\n     String input;\n     if (isVerbose())\n       printInfo();\ndiff --git a/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java b/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\nindex cc2053f6e..808d34025 100644\n--- a/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n+++ b/core/src/main/java/org/apache/accumulo/core/util/shell/Shell.java\n@@ -185,7 +185,6 @@\n   private Token rootToken;\n   public final Map<String,Command> commandFactory = new TreeMap<String,Command>();\n   public final Map<String,Command[]> commandGrouping = new TreeMap<String,Command[]>();\n-  protected boolean configError = false;\n \n   // exit if true\n   private boolean exit = false;\n@@ -215,7 +214,11 @@ public Shell(ConsoleReader reader, PrintWriter writer) {\n     this.writer = writer;\n   }\n \n-  // Not for client use\n+  /**\n+   * Configures the shell using the provided options. Not for client use.\n+   *\n+   * @return true if the shell was successfully configured, false otherwise.\n+   */\n   public boolean config(String... args) {\n \n     CommandLine cl;\n@@ -225,9 +228,9 @@ public boolean config(String... args) {\n         throw new ParseException(\"Unrecognized arguments: \" + cl.getArgList());\n \n       if (cl.hasOption(helpOpt.getOpt())) {\n-        configError = true;\n         printHelp(\"shell\", SHELL_DESCRIPTION, opts);\n-        return true;\n+        exitCode = 0;\n+        return false;\n       }\n \n       setDebugging(cl.hasOption(debugOption.getLongOpt()));\n@@ -238,10 +241,10 @@ public boolean config(String... args) {\n         throw new MissingArgumentException(zooKeeperInstance);\n \n     } catch (Exception e) {\n-      configError = true;\n       printException(e);\n       printHelp(\"shell\", SHELL_DESCRIPTION, opts);\n-      return true;\n+      exitCode = 1;\n+      return false;\n     }\n \n     // get the options that were parsed\n@@ -316,7 +319,8 @@ public void start() {\n \n     } catch (Exception e) {\n       printException(e);\n-      configError = true;\n+      exitCode = 1;\n+      return false;\n     }\n \n     // decide whether to execute commands from a file and quit\n@@ -373,7 +377,7 @@ public void start() {\n     for (Command cmd : otherCommands) {\n       commandFactory.put(cmd.getName(), cmd);\n     }\n-    return configError;\n+    return true;\n   }\n \n   protected void setInstance(CommandLine cl) {\n@@ -408,15 +412,14 @@ public Connector getConnector() {\n \n   public static void main(String args[]) throws IOException {\n     Shell shell = new Shell();\n-    shell.config(args);\n+    if (!shell.config(args)) {\n+      System.exit(shell.getExitCode());\n+    }\n \n     System.exit(shell.start());\n   }\n \n   public int start() throws IOException {\n-    if (configError)\n-      return 1;\n-\n     String input;\n     if (isVerbose())\n       printInfo();\n", 
  "project": "accumulo", 
  "linesAdd": 22, 
  "jira_id": "3475", 
  "nb_skipped": 0, 
  "commit": "7651b777", 
  "nb_failure": 1, 
  "linesRem": 18
}