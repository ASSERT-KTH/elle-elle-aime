{
  "files": 4, 
  "nb_test": 17, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.accumulo.test.replication.StatusCombinerMacTest"
  ], 
  "patch": "diff --git a/server/base/src/main/java/org/apache/accumulo/server/init/Initialize.java b/server/base/src/main/java/org/apache/accumulo/server/init/Initialize.java\nindex 0a681c409..9b952ba44 100644\n--- a/server/base/src/main/java/org/apache/accumulo/server/init/Initialize.java\n+++ b/server/base/src/main/java/org/apache/accumulo/server/init/Initialize.java\n@@ -20,6 +20,7 @@\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Locale;\n@@ -31,6 +32,8 @@\n import org.apache.accumulo.core.Constants;\n import org.apache.accumulo.core.cli.Help;\n import org.apache.accumulo.core.client.AccumuloSecurityException;\n+import org.apache.accumulo.core.client.IteratorSetting;\n+import org.apache.accumulo.core.client.IteratorSetting.Column;\n import org.apache.accumulo.core.client.impl.Namespaces;\n import org.apache.accumulo.core.client.impl.thrift.ThriftSecurityException;\n import org.apache.accumulo.core.conf.AccumuloConfiguration;\n@@ -41,6 +44,8 @@\n import org.apache.accumulo.core.data.Value;\n import org.apache.accumulo.core.file.FileOperations;\n import org.apache.accumulo.core.file.FileSKVWriter;\n+import org.apache.accumulo.core.iterators.Combiner;\n+import org.apache.accumulo.core.iterators.IteratorUtil.IteratorScope;\n import org.apache.accumulo.core.iterators.user.VersioningIterator;\n import org.apache.accumulo.core.master.state.tables.TableState;\n import org.apache.accumulo.core.master.thrift.MasterGoalState;\n@@ -65,10 +70,12 @@\n import org.apache.accumulo.server.fs.VolumeManager;\n import org.apache.accumulo.server.fs.VolumeManagerImpl;\n import org.apache.accumulo.server.iterators.MetadataBulkLoadFilter;\n+import org.apache.accumulo.server.replication.StatusCombiner;\n import org.apache.accumulo.server.security.AuditedSecurityOperation;\n import org.apache.accumulo.server.security.SystemCredentials;\n import org.apache.accumulo.server.tables.TableManager;\n import org.apache.accumulo.server.tablets.TabletTime;\n+import org.apache.accumulo.server.util.ReplicationTableUtil;\n import org.apache.accumulo.server.util.TablePropUtil;\n import org.apache.accumulo.server.zookeeper.ZooReaderWriter;\n import org.apache.hadoop.conf.Configuration;\n@@ -566,6 +573,23 @@ public static void initMetadataConfig(String tableId) throws IOException {\n   protected static void initMetadataConfig() throws IOException {\n     initMetadataConfig(RootTable.ID);\n     initMetadataConfig(MetadataTable.ID);\n+\n+    // ACCUMULO-3077 Set the combiner on accumulo.metadata during init to reduce the likelihood of a race\n+    // condition where a tserver compacts away Status updates because it didn't see the Combiner configured\n+    IteratorSetting setting = new IteratorSetting(9, ReplicationTableUtil.COMBINER_NAME, StatusCombiner.class);\n+    Combiner.setColumns(setting, Collections.singletonList(new Column(MetadataSchema.ReplicationSection.COLF)));\n+    try {\n+      for (IteratorScope scope : IteratorScope.values()) {\n+        String root = String.format(\"%s%s.%s\", Property.TABLE_ITERATOR_PREFIX, scope.name().toLowerCase(), setting.getName());\n+        for (Entry<String,String> prop : setting.getOptions().entrySet()) {\n+          TablePropUtil.setTableProperty(MetadataTable.ID, root + \".opt.\" + prop.getKey(), prop.getValue());\n+        }\n+        TablePropUtil.setTableProperty(MetadataTable.ID, root, setting.getPriority() + \",\" + setting.getIteratorClass());\n+      }\n+    } catch (Exception e) {\n+      log.fatal(\"Error talking to ZooKeeper\", e);\n+      throw new IOException(e);\n+    }\n   }\n \n   private static void setMetadataReplication(int replication, String reason) throws IOException {\ndiff --git a/server/base/src/main/java/org/apache/accumulo/server/util/ReplicationTableUtil.java b/server/base/src/main/java/org/apache/accumulo/server/util/ReplicationTableUtil.java\nindex 2a9774d7f..ab5ee8622 100644\n--- a/server/base/src/main/java/org/apache/accumulo/server/util/ReplicationTableUtil.java\n+++ b/server/base/src/main/java/org/apache/accumulo/server/util/ReplicationTableUtil.java\n@@ -187,7 +187,7 @@ public static void updateLogs(Credentials creds, KeyExtent extent, Collection<Lo\n    */\n   public static void updateFiles(Credentials creds, KeyExtent extent, Collection<String> files, Status stat) {\n     if (log.isDebugEnabled()) {\n-      log.debug(\"Updating replication for \" + extent + \" with \" + files + \" using \" + ProtobufUtil.toString(stat));\n+      log.debug(\"Updating replication status for \" + extent + \" with \" + files + \" using \" + ProtobufUtil.toString(stat));\n     }\n     // TODO could use batch writer, would need to handle failure and retry like update does - ACCUMULO-1294\n     if (files.isEmpty()) {\ndiff --git a/server/tserver/src/main/java/org/apache/accumulo/tserver/log/TabletServerLogger.java b/server/tserver/src/main/java/org/apache/accumulo/tserver/log/TabletServerLogger.java\nindex b4f14ec7b..26e6891d5 100644\n--- a/server/tserver/src/main/java/org/apache/accumulo/tserver/log/TabletServerLogger.java\n+++ b/server/tserver/src/main/java/org/apache/accumulo/tserver/log/TabletServerLogger.java\n@@ -276,8 +276,8 @@ private int write(final Collection<CommitSession> sessions, boolean mincFinish,\n                   logs.add(logger.getFileName());\n                 }\n                 Status status = StatusUtil.fileCreated(System.currentTimeMillis());\n-                log.debug(\"Writing \" + ProtobufUtil.toString(status) + \" to replication table for \" + logs);\n-                // Got some new WALs, note this in the replication table\n+                log.debug(\"Writing \" + ProtobufUtil.toString(status) + \" to metadata table for \" + logs);\n+                // Got some new WALs, note this in the metadata table\n                 ReplicationTableUtil.updateFiles(SystemCredentials.get(), commitSession.getExtent(), logs, status);\n               }\n             }\ndiff --git a/server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/DatafileManager.java b/server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/DatafileManager.java\nindex 5b46b7bd5..78a2ed6d7 100644\n--- a/server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/DatafileManager.java\n+++ b/server/tserver/src/main/java/org/apache/accumulo/tserver/tablet/DatafileManager.java\n@@ -424,6 +424,9 @@ void bringMinorCompactionOnline(FileRef tmpDatafile, FileRef newDatafile, FileRe\n       // This WAL could still be in use by other Tablets *from the same table*, so we can only mark that there is data to replicate,\n       // but it is *not* closed\n       if (replicate) {\n+        if (log.isDebugEnabled()) {\n+          log.debug(\"Recording that data has been ingested into \" + tablet.getExtent() + \" using \" + logFileOnly);\n+        }\n         ReplicationTableUtil.updateFiles(SystemCredentials.get(), tablet.getExtent(), logFileOnly, StatusUtil.openWithUnknownLength());\n       }\n     } finally {\n", 
  "project": "accumulo", 
  "linesAdd": 30, 
  "jira_id": "3077", 
  "nb_skipped": 0, 
  "commit": "17654199", 
  "nb_failure": 1, 
  "linesRem": 3
}