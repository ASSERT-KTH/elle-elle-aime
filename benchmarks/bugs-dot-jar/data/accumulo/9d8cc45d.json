{
  "files": 8, 
  "nb_test": 273, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.accumulo.core.iterators.user.FilterTest", 
    "org.apache.accumulo.core.iterators.user.CombinerTest"
  ], 
  "patch": "diff --git a/src/core/src/main/java/org/apache/accumulo/core/iterators/Combiner.java b/src/core/src/main/java/org/apache/accumulo/core/iterators/Combiner.java\nindex 5281f4dcb..8532e56d6 100644\n--- a/src/core/src/main/java/org/apache/accumulo/core/iterators/Combiner.java\n+++ b/src/core/src/main/java/org/apache/accumulo/core/iterators/Combiner.java\n@@ -227,6 +227,20 @@ public void init(SortedKeyValueIterator<Key,Value> source, Map<String,String> op\n     combiners = new ColumnSet(Arrays.asList(encodedColumns.split(\",\")));\n   }\n   \n+  @Override\n+  public SortedKeyValueIterator<Key,Value> deepCopy(IteratorEnvironment env) {\n+    Combiner newInstance;\n+    try {\n+      newInstance = this.getClass().newInstance();\n+    } catch (Exception e) {\n+      throw new RuntimeException(e);\n+    }\n+    newInstance.setSource(getSource().deepCopy(env));\n+    newInstance.combiners = combiners;\n+    newInstance.combineAllColumns = combineAllColumns;\n+    return newInstance;\n+  }\n+  \n   @Override\n   public IteratorOptions describeOptions() {\n     IteratorOptions io = new IteratorOptions(\"comb\", \"Combiners apply reduce functions to values with identical keys\", null, null);\ndiff --git a/src/core/src/main/java/org/apache/accumulo/core/iterators/TypedValueCombiner.java b/src/core/src/main/java/org/apache/accumulo/core/iterators/TypedValueCombiner.java\nindex 628c9ddf2..7b8d636da 100644\n--- a/src/core/src/main/java/org/apache/accumulo/core/iterators/TypedValueCombiner.java\n+++ b/src/core/src/main/java/org/apache/accumulo/core/iterators/TypedValueCombiner.java\n@@ -145,6 +145,14 @@ protected void testEncoder(V v) {\n     }\n   }\n   \n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  public SortedKeyValueIterator<Key,Value> deepCopy(IteratorEnvironment env) {\n+    TypedValueCombiner<V> newInstance = (TypedValueCombiner<V>) super.deepCopy(env);\n+    newInstance.setEncoder(encoder);\n+    return newInstance;\n+  }\n+  \n   @Override\n   public Value reduce(Key key, Iterator<Value> iter) {\n     return new Value(encoder.encode(typedReduce(key, new VIterator<V>(iter, encoder))));\ndiff --git a/src/core/src/main/java/org/apache/accumulo/core/iterators/VersioningIterator.java b/src/core/src/main/java/org/apache/accumulo/core/iterators/VersioningIterator.java\nindex e38c68e02..9d92db328 100644\n--- a/src/core/src/main/java/org/apache/accumulo/core/iterators/VersioningIterator.java\n+++ b/src/core/src/main/java/org/apache/accumulo/core/iterators/VersioningIterator.java\n@@ -29,6 +29,8 @@\n   public VersioningIterator() {}\n   \n   public VersioningIterator(SortedKeyValueIterator<Key,Value> iterator, int maxVersions) {\n-    super(iterator, maxVersions);\n+    super();\n+    this.setSource(iterator);\n+    this.maxVersions = maxVersions;\n   }\n }\ndiff --git a/src/core/src/main/java/org/apache/accumulo/core/iterators/user/AgeOffFilter.java b/src/core/src/main/java/org/apache/accumulo/core/iterators/user/AgeOffFilter.java\nindex 9feffd81b..486e6cb3a 100644\n--- a/src/core/src/main/java/org/apache/accumulo/core/iterators/user/AgeOffFilter.java\n+++ b/src/core/src/main/java/org/apache/accumulo/core/iterators/user/AgeOffFilter.java\n@@ -37,26 +37,6 @@\n   private long threshold;\n   private long currentTime;\n   \n-  public AgeOffFilter() {}\n-  \n-  /**\n-   * Constructs a filter that omits entries read from a source iterator if the Key's timestamp is less than currentTime - threshold.\n-   * \n-   * @param iterator\n-   *          The source iterator.\n-   * \n-   * @param threshold\n-   *          Maximum age in milliseconds of data to keep.\n-   * \n-   * @param threshold\n-   *          Current time in milliseconds.\n-   */\n-  private AgeOffFilter(SortedKeyValueIterator<Key,Value> iterator, long threshold, long currentTime) {\n-    setSource(iterator);\n-    this.threshold = threshold;\n-    this.currentTime = currentTime;\n-  }\n-  \n   /**\n    * Accepts entries whose timestamps are less than currentTime - threshold.\n    * \n@@ -93,7 +73,10 @@ public void init(SortedKeyValueIterator<Key,Value> source, Map<String,String> op\n   \n   @Override\n   public SortedKeyValueIterator<Key,Value> deepCopy(IteratorEnvironment env) {\n-    return new AgeOffFilter(getSource(), threshold, currentTime);\n+    AgeOffFilter copy = (AgeOffFilter) super.deepCopy(env);\n+    copy.currentTime = currentTime;\n+    copy.threshold = threshold;\n+    return copy;\n   }\n   \n   @Override\ndiff --git a/src/core/src/main/java/org/apache/accumulo/core/iterators/user/ColumnAgeOffFilter.java b/src/core/src/main/java/org/apache/accumulo/core/iterators/user/ColumnAgeOffFilter.java\nindex 4bffbcb41..8c957287c 100644\n--- a/src/core/src/main/java/org/apache/accumulo/core/iterators/user/ColumnAgeOffFilter.java\n+++ b/src/core/src/main/java/org/apache/accumulo/core/iterators/user/ColumnAgeOffFilter.java\n@@ -36,15 +36,6 @@\n  * Different thresholds are set for each column.\n  */\n public class ColumnAgeOffFilter extends Filter {\n-  \n-  public ColumnAgeOffFilter() {}\n-  \n-  private ColumnAgeOffFilter(SortedKeyValueIterator<Key,Value> iterator, TTLSet ttls, long currentTime) {\n-    setSource(iterator);\n-    this.ttls = ttls;\n-    this.currentTime = currentTime;\n-  }\n-  \n   public static class TTLSet extends ColumnToClassMapping<Long> {\n     public TTLSet(Map<String,String> objectStrings) {\n       super();\n@@ -87,7 +78,10 @@ public void init(SortedKeyValueIterator<Key,Value> source, Map<String,String> op\n   \n   @Override\n   public SortedKeyValueIterator<Key,Value> deepCopy(IteratorEnvironment env) {\n-    return new ColumnAgeOffFilter(getSource(), ttls, currentTime);\n+    ColumnAgeOffFilter copy = (ColumnAgeOffFilter) super.deepCopy(env);\n+    copy.currentTime = currentTime;\n+    copy.ttls = ttls;\n+    return copy;\n   }\n   \n   public void overrideCurrentTime(long ts) {\ndiff --git a/src/core/src/main/java/org/apache/accumulo/core/iterators/user/RegExFilter.java b/src/core/src/main/java/org/apache/accumulo/core/iterators/user/RegExFilter.java\nindex fb5380190..e50863127 100644\n--- a/src/core/src/main/java/org/apache/accumulo/core/iterators/user/RegExFilter.java\n+++ b/src/core/src/main/java/org/apache/accumulo/core/iterators/user/RegExFilter.java\n@@ -37,8 +37,7 @@\n   \n   @Override\n   public SortedKeyValueIterator<Key,Value> deepCopy(IteratorEnvironment env) {\n-    RegExFilter result = new RegExFilter();\n-    result.setSource(getSource().deepCopy(env));\n+    RegExFilter result = (RegExFilter) super.deepCopy(env);\n     result.rowMatcher = copyMatcher(rowMatcher);\n     result.colfMatcher = copyMatcher(colfMatcher);\n     result.colqMatcher = copyMatcher(colqMatcher);\ndiff --git a/src/core/src/main/java/org/apache/accumulo/core/iterators/user/TimestampFilter.java b/src/core/src/main/java/org/apache/accumulo/core/iterators/user/TimestampFilter.java\nindex 5b652aa24..2dbfe66fd 100644\n--- a/src/core/src/main/java/org/apache/accumulo/core/iterators/user/TimestampFilter.java\n+++ b/src/core/src/main/java/org/apache/accumulo/core/iterators/user/TimestampFilter.java\n@@ -54,17 +54,6 @@ private static SimpleDateFormat initDateParser() {\n   \n   public TimestampFilter() {}\n   \n-  private TimestampFilter(SortedKeyValueIterator<Key,Value> iterator, boolean hasStart, long start, boolean startInclusive, boolean hasEnd, long end,\n-      boolean endInclusive) {\n-    setSource(iterator);\n-    this.start = start;\n-    this.startInclusive = startInclusive;\n-    this.hasStart = true;\n-    this.end = end;\n-    this.endInclusive = endInclusive;\n-    this.hasEnd = true;\n-  }\n-  \n   @Override\n   public boolean accept(Key k, Value v) {\n     long ts = k.getTimestamp();\n@@ -112,7 +101,14 @@ public void init(SortedKeyValueIterator<Key,Value> source, Map<String,String> op\n   \n   @Override\n   public SortedKeyValueIterator<Key,Value> deepCopy(IteratorEnvironment env) {\n-    return new TimestampFilter(getSource(), hasStart, start, startInclusive, hasEnd, end, endInclusive);\n+    TimestampFilter copy = (TimestampFilter) super.deepCopy(env);\n+    copy.hasStart = hasStart;\n+    copy.start = start;\n+    copy.startInclusive = startInclusive;\n+    copy.hasEnd = hasEnd;\n+    copy.end = end;\n+    copy.endInclusive = endInclusive;\n+    return copy;\n   }\n   \n   @Override\ndiff --git a/src/core/src/main/java/org/apache/accumulo/core/iterators/user/VersioningIterator.java b/src/core/src/main/java/org/apache/accumulo/core/iterators/user/VersioningIterator.java\nindex 0b2c76709..53833f4f5 100644\n--- a/src/core/src/main/java/org/apache/accumulo/core/iterators/user/VersioningIterator.java\n+++ b/src/core/src/main/java/org/apache/accumulo/core/iterators/user/VersioningIterator.java\n@@ -37,25 +37,14 @@\n   \n   private Key currentKey = new Key();\n   private int numVersions;\n-  private int maxVersions;\n+  protected int maxVersions;\n   \n   @Override\n   public VersioningIterator deepCopy(IteratorEnvironment env) {\n-    return new VersioningIterator(this, env);\n-  }\n-  \n-  private VersioningIterator(VersioningIterator other, IteratorEnvironment env) {\n-    setSource(other.getSource().deepCopy(env));\n-    maxVersions = other.maxVersions;\n-  }\n-  \n-  public VersioningIterator() {}\n-  \n-  public VersioningIterator(SortedKeyValueIterator<Key,Value> iterator, int maxVersions) {\n-    if (maxVersions < 1)\n-      throw new IllegalArgumentException(\"maxVersions for versioning iterator must be >= 1\");\n-    this.setSource(iterator);\n-    this.maxVersions = maxVersions;\n+    VersioningIterator copy = new VersioningIterator();\n+    copy.setSource(getSource().deepCopy(env));\n+    copy.maxVersions = maxVersions;\n+    return copy;\n   }\n   \n   @Override\n", 
  "project": "accumulo", 
  "linesAdd": 47, 
  "jira_id": "334", 
  "nb_skipped": 0, 
  "commit": "9d8cc45d", 
  "nb_failure": 1, 
  "linesRem": 62
}