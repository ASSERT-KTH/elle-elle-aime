{
  "files": 1, 
  "nb_test": 281, 
  "nb_error": 2, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.accumulo.core.iterators.FirstEntryInRowTest"
  ], 
  "patch": "diff --git a/core/src/main/java/org/apache/accumulo/core/iterators/FirstEntryInRowIterator.java b/core/src/main/java/org/apache/accumulo/core/iterators/FirstEntryInRowIterator.java\nindex 96c7b80c3..7507bff56 100644\n--- a/core/src/main/java/org/apache/accumulo/core/iterators/FirstEntryInRowIterator.java\n+++ b/core/src/main/java/org/apache/accumulo/core/iterators/FirstEntryInRowIterator.java\n@@ -75,6 +75,8 @@ public void init(SortedKeyValueIterator<Key,Value> source, Map<String,String> op\n   // this is only ever called immediately after getting \"next\" entry\n   @Override\n   protected void consume() throws IOException {\n+    if (lastRowFound == null)\n+      return;\n     int count = 0;\n     while (getSource().hasTop() && lastRowFound.equals(getSource().getTopKey().getRow())) {\n       \n@@ -101,10 +103,17 @@ public void seek(Range range, Collection<ByteSequence> columnFamilies, boolean i\n     latestRange = range;\n     latestColumnFamilies = columnFamilies;\n     latestInclusive = inclusive;\n+    lastRowFound = null;\n     \n-    // seek to first possible pattern in range\n-    super.seek(range, columnFamilies, inclusive);\n-    lastRowFound = getSource().hasTop() ? getSource().getTopKey().getRow() : null;\n+    Key startKey = range.getStartKey();\n+    Range seekRange = new Range(startKey == null ? null : new Key(startKey.getRow()), true, range.getEndKey(), range.isEndKeyInclusive());\n+    super.seek(seekRange, columnFamilies, inclusive);\n+    \n+    if (getSource().hasTop()) {\n+      lastRowFound = getSource().getTopKey().getRow();\n+      if (range.beforeStartKey(getSource().getTopKey()))\n+        consume();\n+    }\n   }\n   \n   @Override\n", 
  "project": "accumulo", 
  "linesAdd": 12, 
  "jira_id": "633", 
  "nb_skipped": 0, 
  "commit": "8dad5e0f", 
  "nb_failure": 0, 
  "linesRem": 3
}