{
  "files": 2, 
  "nb_test": 311, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.accumulo.core.client.mock.MockTableOperationsTest"
  ], 
  "patch": "diff --git a/core/src/main/java/org/apache/accumulo/core/client/mock/MockTable.java b/core/src/main/java/org/apache/accumulo/core/client/mock/MockTable.java\nindex 8fb9f0ec6..c4262c038 100644\n--- a/core/src/main/java/org/apache/accumulo/core/client/mock/MockTable.java\n+++ b/core/src/main/java/org/apache/accumulo/core/client/mock/MockTable.java\n@@ -20,9 +20,11 @@\n import java.util.EnumSet;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Set;\n import java.util.Map.Entry;\n import java.util.SortedMap;\n import java.util.SortedSet;\n+import java.util.TreeMap;\n import java.util.TreeSet;\n import java.util.concurrent.ConcurrentSkipListMap;\n \n@@ -86,6 +88,7 @@ public int compareTo(Key o) {\n   Map<String,EnumSet<TablePermission>> userPermissions = new HashMap<String,EnumSet<TablePermission>>();\n   private TimeType timeType;\n   SortedSet<Text> splits = new TreeSet<Text>();\n+  Map<String,Set<Text>> localityGroups = new TreeMap<String, Set<Text>>();\n   \n   MockTable(boolean limitVersion, TimeType timeType) {\n     this.timeType = timeType;\n@@ -122,4 +125,11 @@ public void addSplits(SortedSet<Text> partitionKeys) {\n   public Collection<Text> getSplits() {\n     return splits;\n   }\n+  \n+  public void setLocalityGroups(Map<String,Set<Text>> groups) {\n+    localityGroups = groups;\n+  }\n+  public Map<String,Set<Text>> getLocalityGroups() {\n+    return localityGroups;\n+  }\n }\ndiff --git a/core/src/main/java/org/apache/accumulo/core/client/mock/MockTableOperations.java b/core/src/main/java/org/apache/accumulo/core/client/mock/MockTableOperations.java\nindex b5ffc7324..5da7d6430 100644\n--- a/core/src/main/java/org/apache/accumulo/core/client/mock/MockTableOperations.java\n+++ b/core/src/main/java/org/apache/accumulo/core/client/mock/MockTableOperations.java\n@@ -40,6 +40,7 @@\n import org.apache.accumulo.core.conf.AccumuloConfiguration;\n import org.apache.accumulo.core.data.Key;\n import org.apache.accumulo.core.data.Mutation;\n+import org.apache.accumulo.core.data.PartialKey;\n import org.apache.accumulo.core.data.Range;\n import org.apache.accumulo.core.data.Value;\n import org.apache.accumulo.core.file.FileOperations;\n@@ -155,17 +156,23 @@ public void removeProperty(String tableName, String property) throws AccumuloExc\n   \n   @Override\n   public void setLocalityGroups(String tableName, Map<String,Set<Text>> groups) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n-    throw new NotImplementedException();\n+    if (!exists(tableName))\n+      throw new TableNotFoundException(tableName, tableName, \"\");\n+    acu.tables.get(tableName).setLocalityGroups(groups);\n   }\n   \n   @Override\n   public Map<String,Set<Text>> getLocalityGroups(String tableName) throws AccumuloException, TableNotFoundException {\n-    throw new NotImplementedException();\n+    if (!exists(tableName))\n+      throw new TableNotFoundException(tableName, tableName, \"\");\n+    return acu.tables.get(tableName).getLocalityGroups();\n   }\n   \n   @Override\n   public Set<Range> splitRangeByTablets(String tableName, Range range, int maxSplits) throws AccumuloException, AccumuloSecurityException,\n       TableNotFoundException {\n+    if (!exists(tableName))\n+      throw new TableNotFoundException(tableName, tableName, \"\");\n     return Collections.singleton(range);\n   }\n   \n@@ -262,15 +269,20 @@ public void importDirectory(String tableName, String dir, String failureDir, boo\n   \n   @Override\n   public void offline(String tableName) throws AccumuloSecurityException, AccumuloException {\n-    throw new NotImplementedException();\n+    if (!exists(tableName))\n+      throw new AccumuloException(tableName + \" does not exists\");\n   }\n   \n   @Override\n-  public void online(String tableName) throws AccumuloSecurityException, AccumuloException {}\n+  public void online(String tableName) throws AccumuloSecurityException, AccumuloException {\n+    if (!exists(tableName))\n+      throw new AccumuloException(tableName + \" does not exists\");\n+  }\n   \n   @Override\n   public void clearLocatorCache(String tableName) throws TableNotFoundException {\n-    throw new NotImplementedException();\n+    if (!exists(tableName))\n+      throw new TableNotFoundException(tableName, tableName, \"\");\n   }\n   \n   @Override\n@@ -284,24 +296,31 @@ public void clearLocatorCache(String tableName) throws TableNotFoundException {\n   \n   @Override\n   public void merge(String tableName, Text start, Text end) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n-    throw new NotImplementedException();\n+    if (!exists(tableName))\n+      throw new TableNotFoundException(tableName, tableName, \"\");\n }\n   \n   @Override\n   public void deleteRows(String tableName, Text start, Text end) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n-    throw new NotImplementedException();\n+    if (!exists(tableName))\n+      throw new TableNotFoundException(tableName, tableName, \"\");\n+    MockTable t = acu.tables.get(tableName);\n+    Set<Key> keep = new TreeSet<Key>(t.table.tailMap(new Key(start)).headMap(new Key(end)).keySet());\n+    t.table.keySet().removeAll(keep);\n   }\n   \n   @Override\n   public void compact(String tableName, Text start, Text end, boolean flush, boolean wait) throws AccumuloSecurityException, TableNotFoundException,\n       AccumuloException {\n-    throw new NotImplementedException();\n+    if (!exists(tableName))\n+      throw new TableNotFoundException(tableName, tableName, \"\");\n   }\n   \n   @Override\n   public void compact(String tableName, Text start, Text end, List<IteratorSetting> iterators, boolean flush, boolean wait) throws AccumuloSecurityException,\n       TableNotFoundException, AccumuloException {\n-    throw new NotImplementedException();\n+    if (!exists(tableName))\n+      throw new TableNotFoundException(tableName, tableName, \"\");\n   }\n   \n   @Override\n@@ -312,7 +331,8 @@ public void clone(String srcTableName, String newTableName, boolean flush, Map<S\n   \n   @Override\n   public void flush(String tableName, Text start, Text end, boolean wait) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n-    throw new NotImplementedException();\n+    if (!exists(tableName))\n+      throw new TableNotFoundException(tableName, tableName, \"\");\n  }\n   \n   @Override\n", 
  "project": "accumulo", 
  "linesAdd": 40, 
  "jira_id": "843", 
  "nb_skipped": 0, 
  "commit": "65390f8c", 
  "nb_failure": 0, 
  "linesRem": 10
}