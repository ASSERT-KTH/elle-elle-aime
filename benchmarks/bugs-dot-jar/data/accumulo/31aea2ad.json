{
  "files": 5, 
  "nb_test": 30, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.accumulo.gc.GarbageCollectWriteAheadLogsTest"
  ], 
  "patch": "diff --git a/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java b/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java\nindex 5c1194a18..d4a2d4f8e 100644\n--- a/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java\n+++ b/server/base/src/main/java/org/apache/accumulo/server/fs/VolumeManagerImpl.java\n@@ -529,8 +529,15 @@ else if (path.startsWith(\"/\"))\n \n   @Override\n   public Path getFullPath(FileType fileType, String path) {\n-    if (path.contains(\":\"))\n+    int colon = path.indexOf(':');\n+    if (colon > -1) {\n+      // Check if this is really an absolute path or if this is a 1.4 style relative path for a WAL\n+      if (fileType == FileType.WAL && path.charAt(colon + 1) != '/') {\n+        path = path.substring(path.indexOf('/'));\n+      } else {\n         return new Path(path);\n+      }\n+    }\n \n     // normalize the path\n     Path fullPath = new Path(defaultVolume.getBasePath(), fileType.getDirectory());\ndiff --git a/server/base/src/main/java/org/apache/accumulo/server/master/recovery/RecoveryPath.java b/server/base/src/main/java/org/apache/accumulo/server/master/recovery/RecoveryPath.java\nindex 1da945d21..4a6638aee 100644\n--- a/server/base/src/main/java/org/apache/accumulo/server/master/recovery/RecoveryPath.java\n+++ b/server/base/src/main/java/org/apache/accumulo/server/master/recovery/RecoveryPath.java\n@@ -34,8 +34,11 @@ public static Path getRecoveryPath(VolumeManager fs, Path walPath) throws IOExce\n       String uuid = walPath.getName();\n       // drop uuid\n       walPath = walPath.getParent();\n+      // recovered 1.4 WALs won't have a server component\n+      if (!walPath.getName().equals(FileType.WAL.getDirectory())) {\n         // drop server\n         walPath = walPath.getParent();\n+      }\n   \n       if (!walPath.getName().equals(FileType.WAL.getDirectory()))\n         throw new IllegalArgumentException(\"Bad path \" + walPath);\ndiff --git a/server/gc/src/main/java/org/apache/accumulo/gc/GarbageCollectWriteAheadLogs.java b/server/gc/src/main/java/org/apache/accumulo/gc/GarbageCollectWriteAheadLogs.java\nindex ae850af12..56a0fd5e0 100644\n--- a/server/gc/src/main/java/org/apache/accumulo/gc/GarbageCollectWriteAheadLogs.java\n+++ b/server/gc/src/main/java/org/apache/accumulo/gc/GarbageCollectWriteAheadLogs.java\n@@ -281,7 +281,9 @@ private int removeMetadataEntries(Map<String,Path>  nameToFileMap, Map<String, P\n \n     while (iterator.hasNext()) {\n       for (String entry : iterator.next().logSet) {\n-        String uuid = new Path(entry).getName();\n+        // old style WALs will have the IP:Port of their logger and new style will either be a Path either absolute or relative, in all cases\n+        // the last \"/\" will mark a UUID file name.\n+        String uuid = entry.substring(entry.lastIndexOf(\"/\") + 1);\n         if (!isUUID(uuid)) {\n           // fully expect this to be a uuid, if its not then something is wrong and walog GC should not proceed!\n           throw new IllegalArgumentException(\"Expected uuid, but got \" + uuid + \" from \" + entry);\n@@ -327,8 +329,8 @@ int scanServers(String[] walDirs, Map<Path,String> fileToServerMap, Map<String,P\n         continue;\n       for (FileStatus status : listing) {\n         String server = status.getPath().getName();\n-        servers.add(server);\n         if (status.isDir()) {\n+          servers.add(server);\n           for (FileStatus file : fs.listStatus(new Path(walRoot, server))) {\n             if (isUUID(file.getPath().getName())) {\n               fileToServerMap.put(file.getPath(), server);\n@@ -339,7 +341,9 @@ int scanServers(String[] walDirs, Map<Path,String> fileToServerMap, Map<String,P\n           }\n         } else if (isUUID(server)) {\n           // old-style WAL are not under a directory\n+          servers.add(\"\");\n           fileToServerMap.put(status.getPath(), \"\");\n+          nameToFileMap.put(server, status.getPath());\n         } else {\n           log.info(\"Ignoring file \" + status.getPath() + \" because it doesn't look like a uuid\");\n         }\ndiff --git a/server/tserver/src/main/java/org/apache/accumulo/tserver/Tablet.java b/server/tserver/src/main/java/org/apache/accumulo/tserver/Tablet.java\nindex f73d4ca87..36b22892a 100644\n--- a/server/tserver/src/main/java/org/apache/accumulo/tserver/Tablet.java\n+++ b/server/tserver/src/main/java/org/apache/accumulo/tserver/Tablet.java\n@@ -1357,6 +1357,8 @@ public void sessionExpired() {\n     tabletResources.setTablet(this, acuTableConf);\n     if (!logEntries.isEmpty()) {\n       log.info(\"Starting Write-Ahead Log recovery for \" + this.extent);\n+      // count[0] = entries used on tablet\n+      // count[1] = track max time from walog entries wihtout timestamps\n       final long[] count = new long[2];\n       final CommitSession commitSession = tabletMemory.getCommitSession();\n       count[1] = Long.MIN_VALUE;\n@@ -1388,6 +1390,7 @@ public void receive(Mutation m) {\n         commitSession.updateMaxCommittedTime(tabletTime.getTime());\n \n         if (count[0] == 0) {\n+          log.debug(\"No replayed mutations applied, removing unused entries for \" + extent);\n           MetadataTableUtil.removeUnusedWALEntries(extent, logEntries, tabletServer.getLock());\n           logEntries.clear();\n         }\n@@ -1403,7 +1406,7 @@ public void receive(Mutation m) {\n       currentLogs = new HashSet<DfsLogger>();\n       for (LogEntry logEntry : logEntries) {\n         for (String log : logEntry.logSet) {\n-          currentLogs.add(new DfsLogger(tabletServer.getServerConfig(), log));\n+          currentLogs.add(new DfsLogger(tabletServer.getServerConfig(), log, logEntry.getColumnQualifier().toString()));\n         }\n       }\n \n@@ -3661,12 +3664,12 @@ public void importMapFiles(long tid, Map<FileRef,MapFileInfo> fileMap, boolean s\n \n       for (DfsLogger logger : otherLogs) {\n         otherLogsCopy.add(logger.toString());\n-        doomed.add(logger.toString());\n+        doomed.add(logger.getMeta());\n       }\n \n       for (DfsLogger logger : currentLogs) {\n         currentLogsCopy.add(logger.toString());\n-        doomed.remove(logger.toString());\n+        doomed.remove(logger.getMeta());\n       }\n \n       otherLogs = Collections.emptySet();\n@@ -3684,6 +3687,10 @@ public void importMapFiles(long tid, Map<FileRef,MapFileInfo> fileMap, boolean s\n       log.debug(\"Logs for current memory: \" + getExtent() + \" \" + logger);\n     }\n \n+    for (String logger : doomed) {\n+      log.debug(\"Logs to be destroyed: \" + getExtent() + \" \" + logger);\n+    }\n+\n     return doomed;\n   }\n \ndiff --git a/server/tserver/src/main/java/org/apache/accumulo/tserver/log/DfsLogger.java b/server/tserver/src/main/java/org/apache/accumulo/tserver/log/DfsLogger.java\nindex cca295343..b152380e3 100644\n--- a/server/tserver/src/main/java/org/apache/accumulo/tserver/log/DfsLogger.java\n+++ b/server/tserver/src/main/java/org/apache/accumulo/tserver/log/DfsLogger.java\n@@ -220,13 +220,21 @@ public int hashCode() {\n   private String logPath;\n   private Daemon syncThread;\n \n+  /* Track what's actually in +r/!0 for this logger ref */\n+  private String metaReference;\n+\n   public DfsLogger(ServerResources conf) throws IOException {\n     this.conf = conf;\n   }\n \n-  public DfsLogger(ServerResources conf, String filename) throws IOException {\n+  /**\n+   * Refernce a pre-existing log file.\n+   * @param meta the cq for the \"log\" entry in +r/!0\n+   */\n+  public DfsLogger(ServerResources conf, String filename, String meta) throws IOException {\n     this.conf = conf;\n     this.logPath = filename;\n+    metaReference = meta;\n   }\n \n   public static DFSLoggerInputStreams readHeaderAndReturnStream(VolumeManager fs, Path path, AccumuloConfiguration conf) throws IOException {\n@@ -315,6 +323,7 @@ public synchronized void open(String address) throws IOException {\n     VolumeManager fs = conf.getFileSystem();\n \n     logPath = fs.choose(ServerConstants.getWalDirs()) + \"/\" + logger + \"/\" + filename;\n+    metaReference = toString();\n     try {\n       short replication = (short) conf.getConfiguration().getCount(Property.TSERV_WAL_REPLICATION);\n       if (replication == 0)\n@@ -400,6 +409,16 @@ public String toString() {\n     return fileName;\n   }\n \n+  /**\n+   * get the cq needed to reference this logger's entry in +r/!0\n+   */\n+  public String getMeta() {\n+    if (null == metaReference) {\n+      throw new IllegalStateException(\"logger doesn't have meta reference. \" + this);\n+    }\n+    return metaReference;\n+  }\n+\n   public String getFileName() {\n     return logPath.toString();\n   }\n", 
  "project": "accumulo", 
  "linesAdd": 47, 
  "jira_id": "2899", 
  "nb_skipped": 0, 
  "commit": "31aea2ad", 
  "nb_failure": 1, 
  "linesRem": 7
}