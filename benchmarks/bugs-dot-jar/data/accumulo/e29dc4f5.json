{
  "files": 2, 
  "nb_test": 25, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.accumulo.proxy.SimpleTest"
  ], 
  "patch": "diff --git a/proxy/src/main/java/org/apache/accumulo/proxy/ProxyServer.java b/proxy/src/main/java/org/apache/accumulo/proxy/ProxyServer.java\nindex ed8c71f4b..859b94851 100644\n--- a/proxy/src/main/java/org/apache/accumulo/proxy/ProxyServer.java\n+++ b/proxy/src/main/java/org/apache/accumulo/proxy/ProxyServer.java\n@@ -104,11 +104,19 @@\n     public Iterator<Map.Entry<Key,Value>> iterator;\n   }\n   \n-  static class CloseWriter implements RemovalListener<UUID,BatchWriter> {\n+  static protected class BatchWriterPlusException {\n+    public BatchWriter writer;\n+    public MutationsRejectedException exception = null;\n+  }\n+  \n+  static class CloseWriter implements RemovalListener<UUID,BatchWriterPlusException> {\n     @Override\n-    public void onRemoval(RemovalNotification<UUID,BatchWriter> notification) {\n+    public void onRemoval(RemovalNotification<UUID,BatchWriterPlusException> notification) {\n       try {\n-        notification.getValue().close();\n+        BatchWriterPlusException value = notification.getValue();\n+        if (value.exception != null)\n+          throw value.exception;\n+        notification.getValue().writer.close();\n       } catch (MutationsRejectedException e) {\n         logger.warn(e, e);\n       }\n@@ -131,7 +139,7 @@ public CloseScanner() {}\n   }\n   \n   protected Cache<UUID,ScannerPlusIterator> scannerCache;\n-  protected Cache<UUID,BatchWriter> writerCache;\n+  protected Cache<UUID,BatchWriterPlusException> writerCache;\n   \n   public ProxyServer(Properties props) {\n \n@@ -904,10 +912,12 @@ public void closeScanner(String uuid) throws TException {\n   @Override\n   public void updateAndFlush(ByteBuffer login, String tableName, Map<ByteBuffer,List<ColumnUpdate>> cells) throws TException {\n     try {\n-      BatchWriter writer = getWriter(login, tableName, null);\n-      addCellsToWriter(cells, writer);\n-      writer.flush();\n-      writer.close();\n+      BatchWriterPlusException bwpe = getWriter(login, tableName, null);\n+      addCellsToWriter(cells, bwpe);\n+      if (bwpe.exception != null)\n+        throw bwpe.exception;\n+      bwpe.writer.flush();\n+      bwpe.writer.close();\n     } catch (Exception e) {\n       throw translateException(e);\n     }\n@@ -915,7 +925,10 @@ public void updateAndFlush(ByteBuffer login, String tableName, Map<ByteBuffer,Li\n   \n   private static final ColumnVisibility EMPTY_VIS = new ColumnVisibility();\n   \n-  private void addCellsToWriter(Map<ByteBuffer,List<ColumnUpdate>> cells, BatchWriter writer) throws MutationsRejectedException {\n+  private void addCellsToWriter(Map<ByteBuffer,List<ColumnUpdate>> cells, BatchWriterPlusException bwpe) throws MutationsRejectedException {\n+    if (bwpe.exception != null)\n+      return;\n+    \n     HashMap<Text,ColumnVisibility> vizMap = new HashMap<Text,ColumnVisibility>();\n     \n     for (Entry<ByteBuffer,List<ColumnUpdate>> entry : cells.entrySet()) {\n@@ -947,14 +960,18 @@ private void addCellsToWriter(Map<ByteBuffer,List<ColumnUpdate>> cells, BatchWri\n           m.put(update.getColFamily(), update.getColQualifier(), viz, value);\n         }\n       }\n-      writer.addMutation(m);\n+      try {\n+        bwpe.writer.addMutation(m);\n+      } catch (MutationsRejectedException mre) {\n+        bwpe.exception = mre;\n+      }\n     }\n   }\n   \n   @Override\n   public String createWriter(ByteBuffer login, String tableName, WriterOptions opts) throws TException {\n     try {\n-      BatchWriter writer = getWriter(login, tableName, opts);\n+      BatchWriterPlusException writer = getWriter(login, tableName, opts);\n       UUID uuid = UUID.randomUUID();\n       writerCache.put(uuid, writer);\n       return uuid.toString();\n@@ -966,11 +983,11 @@ public String createWriter(ByteBuffer login, String tableName, WriterOptions opt\n   @Override\n   public void update(String writer, Map<ByteBuffer,List<ColumnUpdate>> cells) throws TException {\n     try {\n-      BatchWriter batchwriter = writerCache.getIfPresent(UUID.fromString(writer));\n-      if (batchwriter == null) {\n+      BatchWriterPlusException bwpe = writerCache.getIfPresent(UUID.fromString(writer));\n+      if (bwpe == null) {\n         throw new UnknownWriter(\"Writer never existed or no longer exists\");\n       }\n-      addCellsToWriter(cells, batchwriter);\n+      addCellsToWriter(cells, bwpe);\n     } catch (Exception e) {\n       throw translateException(e);\n     }\n@@ -979,11 +996,13 @@ public void update(String writer, Map<ByteBuffer,List<ColumnUpdate>> cells) thro\n   @Override\n   public void flush(String writer) throws TException {\n     try {\n-      BatchWriter batchwriter = writerCache.getIfPresent(UUID.fromString(writer));\n-      if (batchwriter == null) {\n+      BatchWriterPlusException bwpe = writerCache.getIfPresent(UUID.fromString(writer));\n+      if (bwpe == null) {\n         throw new UnknownWriter(\"Writer never existed or no longer exists\");\n       }\n-      batchwriter.flush();\n+      if (bwpe.exception != null)\n+        throw bwpe.exception;\n+      bwpe.writer.flush();\n     } catch (Exception e) {\n       throw translateException(e);\n     }\n@@ -992,18 +1011,20 @@ public void flush(String writer) throws TException {\n   @Override\n   public void closeWriter(String writer) throws TException {\n     try {\n-      BatchWriter batchwriter = writerCache.getIfPresent(UUID.fromString(writer));\n-      if (batchwriter == null) {\n+      BatchWriterPlusException bwpe = writerCache.getIfPresent(UUID.fromString(writer));\n+      if (bwpe == null) {\n         throw new UnknownWriter(\"Writer never existed or no longer exists\");\n       }\n-      batchwriter.close();\n+      if (bwpe.exception != null)\n+        throw bwpe.exception;\n+      bwpe.writer.close();\n       writerCache.invalidate(UUID.fromString(writer));\n     } catch (Exception e) {\n       throw translateException(e);\n     }\n   }\n   \n-  private BatchWriter getWriter(ByteBuffer login, String tableName, WriterOptions opts) throws Exception {\n+  private BatchWriterPlusException getWriter(ByteBuffer login, String tableName, WriterOptions opts) throws Exception {\n     BatchWriterConfig cfg = new BatchWriterConfig();\n     if (opts != null) {\n       if (opts.maxMemory != 0)\n@@ -1015,7 +1036,9 @@ private BatchWriter getWriter(ByteBuffer login, String tableName, WriterOptions\n       if (opts.latencyMs != 0)\n         cfg.setMaxLatency(opts.latencyMs, TimeUnit.MILLISECONDS);\n     }\n-    return getConnector(login).createBatchWriter(tableName, cfg);\n+    BatchWriterPlusException result = new BatchWriterPlusException();\n+    result.writer = getConnector(login).createBatchWriter(tableName, cfg);\n+    return result;\n   }\n   \n   private IteratorSetting getIteratorSetting(org.apache.accumulo.proxy.thrift.IteratorSetting setting) {\ndiff --git a/proxy/src/main/java/org/apache/accumulo/proxy/thrift/AccumuloProxy.java b/proxy/src/main/java/org/apache/accumulo/proxy/thrift/AccumuloProxy.java\nindex 28d7e025e..cc244f3a7 100644\n--- a/proxy/src/main/java/org/apache/accumulo/proxy/thrift/AccumuloProxy.java\n+++ b/proxy/src/main/java/org/apache/accumulo/proxy/thrift/AccumuloProxy.java\n@@ -182,7 +182,7 @@\n \n     public String createWriter(ByteBuffer login, String tableName, WriterOptions opts) throws AccumuloException, AccumuloSecurityException, TableNotFoundException, org.apache.thrift.TException;\n \n-    public void update(String writer, Map<ByteBuffer,List<ColumnUpdate>> cells) throws UnknownWriter, MutationsRejectedException, org.apache.thrift.TException;\n+    public void update(String writer, Map<ByteBuffer,List<ColumnUpdate>> cells) throws org.apache.thrift.TException;\n \n     public void flush(String writer) throws UnknownWriter, MutationsRejectedException, org.apache.thrift.TException;\n \n@@ -2358,10 +2358,9 @@ public String recv_createWriter() throws AccumuloException, AccumuloSecurityExce\n       throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, \"createWriter failed: unknown result\");\n     }\n \n-    public void update(String writer, Map<ByteBuffer,List<ColumnUpdate>> cells) throws UnknownWriter, MutationsRejectedException, org.apache.thrift.TException\n+    public void update(String writer, Map<ByteBuffer,List<ColumnUpdate>> cells) throws org.apache.thrift.TException\n     {\n       send_update(writer, cells);\n-      recv_update();\n     }\n \n     public void send_update(String writer, Map<ByteBuffer,List<ColumnUpdate>> cells) throws org.apache.thrift.TException\n@@ -2372,19 +2371,6 @@ public void send_update(String writer, Map<ByteBuffer,List<ColumnUpdate>> cells)\n       sendBase(\"update\", args);\n     }\n \n-    public void recv_update() throws UnknownWriter, MutationsRejectedException, org.apache.thrift.TException\n-    {\n-      update_result result = new update_result();\n-      receiveBase(result, \"update\");\n-      if (result.ouch1 != null) {\n-        throw result.ouch1;\n-      }\n-      if (result.ouch2 != null) {\n-        throw result.ouch2;\n-      }\n-      return;\n-    }\n-\n     public void flush(String writer) throws UnknownWriter, MutationsRejectedException, org.apache.thrift.TException\n     {\n       send_flush(writer);\n@@ -4994,7 +4980,7 @@ public void update(String writer, Map<ByteBuffer,List<ColumnUpdate>> cells, org.\n       private String writer;\n       private Map<ByteBuffer,List<ColumnUpdate>> cells;\n       public update_call(String writer, Map<ByteBuffer,List<ColumnUpdate>> cells, org.apache.thrift.async.AsyncMethodCallback<update_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {\n-        super(client, protocolFactory, transport, resultHandler, false);\n+        super(client, protocolFactory, transport, resultHandler, true);\n         this.writer = writer;\n         this.cells = cells;\n       }\n@@ -5008,13 +4994,12 @@ public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apa\n         prot.writeMessageEnd();\n       }\n \n-      public void getResult() throws UnknownWriter, MutationsRejectedException, org.apache.thrift.TException {\n+      public void getResult() throws org.apache.thrift.TException {\n         if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {\n           throw new IllegalStateException(\"Method call not finished!\");\n         }\n         org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());\n         org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);\n-        (new Client(prot)).recv_update();\n       }\n     }\n \n@@ -7007,19 +6992,12 @@ public update_args getEmptyArgsInstance() {\n       }\n \n       protected boolean isOneway() {\n-        return false;\n+        return true;\n       }\n \n-      public update_result getResult(I iface, update_args args) throws org.apache.thrift.TException {\n-        update_result result = new update_result();\n-        try {\n+      public org.apache.thrift.TBase getResult(I iface, update_args args) throws org.apache.thrift.TException {\n         iface.update(args.writer, args.cells);\n-        } catch (UnknownWriter ouch1) {\n-          result.ouch1 = ouch1;\n-        } catch (MutationsRejectedException ouch2) {\n-          result.ouch2 = ouch2;\n-        }\n-        return result;\n+        return null;\n       }\n     }\n \n@@ -81630,464 +81608,6 @@ public void read(org.apache.thrift.protocol.TProtocol prot, update_args struct)\n \n   }\n \n-  public static class update_result implements org.apache.thrift.TBase<update_result, update_result._Fields>, java.io.Serializable, Cloneable   {\n-    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"update_result\");\n-\n-    private static final org.apache.thrift.protocol.TField OUCH1_FIELD_DESC = new org.apache.thrift.protocol.TField(\"ouch1\", org.apache.thrift.protocol.TType.STRUCT, (short)1);\n-    private static final org.apache.thrift.protocol.TField OUCH2_FIELD_DESC = new org.apache.thrift.protocol.TField(\"ouch2\", org.apache.thrift.protocol.TType.STRUCT, (short)2);\n-\n-    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();\n-    static {\n-      schemes.put(StandardScheme.class, new update_resultStandardSchemeFactory());\n-      schemes.put(TupleScheme.class, new update_resultTupleSchemeFactory());\n-    }\n-\n-    public UnknownWriter ouch1; // required\n-    public MutationsRejectedException ouch2; // required\n-\n-    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */\n-    @SuppressWarnings(\"all\") public enum _Fields implements org.apache.thrift.TFieldIdEnum {\n-      OUCH1((short)1, \"ouch1\"),\n-      OUCH2((short)2, \"ouch2\");\n-\n-      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();\n-\n-      static {\n-        for (_Fields field : EnumSet.allOf(_Fields.class)) {\n-          byName.put(field.getFieldName(), field);\n-        }\n-      }\n-\n-      /**\n-       * Find the _Fields constant that matches fieldId, or null if its not found.\n-       */\n-      public static _Fields findByThriftId(int fieldId) {\n-        switch(fieldId) {\n-          case 1: // OUCH1\n-            return OUCH1;\n-          case 2: // OUCH2\n-            return OUCH2;\n-          default:\n-            return null;\n-        }\n-      }\n-\n-      /**\n-       * Find the _Fields constant that matches fieldId, throwing an exception\n-       * if it is not found.\n-       */\n-      public static _Fields findByThriftIdOrThrow(int fieldId) {\n-        _Fields fields = findByThriftId(fieldId);\n-        if (fields == null) throw new IllegalArgumentException(\"Field \" + fieldId + \" doesn't exist!\");\n-        return fields;\n-      }\n-\n-      /**\n-       * Find the _Fields constant that matches name, or null if its not found.\n-       */\n-      public static _Fields findByName(String name) {\n-        return byName.get(name);\n-      }\n-\n-      private final short _thriftId;\n-      private final String _fieldName;\n-\n-      _Fields(short thriftId, String fieldName) {\n-        _thriftId = thriftId;\n-        _fieldName = fieldName;\n-      }\n-\n-      public short getThriftFieldId() {\n-        return _thriftId;\n-      }\n-\n-      public String getFieldName() {\n-        return _fieldName;\n-      }\n-    }\n-\n-    // isset id assignments\n-    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;\n-    static {\n-      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);\n-      tmpMap.put(_Fields.OUCH1, new org.apache.thrift.meta_data.FieldMetaData(\"ouch1\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));\n-      tmpMap.put(_Fields.OUCH2, new org.apache.thrift.meta_data.FieldMetaData(\"ouch2\", org.apache.thrift.TFieldRequirementType.DEFAULT, \n-          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));\n-      metaDataMap = Collections.unmodifiableMap(tmpMap);\n-      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_result.class, metaDataMap);\n-    }\n-\n-    public update_result() {\n-    }\n-\n-    public update_result(\n-      UnknownWriter ouch1,\n-      MutationsRejectedException ouch2)\n-    {\n-      this();\n-      this.ouch1 = ouch1;\n-      this.ouch2 = ouch2;\n-    }\n-\n-    /**\n-     * Performs a deep copy on <i>other</i>.\n-     */\n-    public update_result(update_result other) {\n-      if (other.isSetOuch1()) {\n-        this.ouch1 = new UnknownWriter(other.ouch1);\n-      }\n-      if (other.isSetOuch2()) {\n-        this.ouch2 = new MutationsRejectedException(other.ouch2);\n-      }\n-    }\n-\n-    public update_result deepCopy() {\n-      return new update_result(this);\n-    }\n-\n-    @Override\n-    public void clear() {\n-      this.ouch1 = null;\n-      this.ouch2 = null;\n-    }\n-\n-    public UnknownWriter getOuch1() {\n-      return this.ouch1;\n-    }\n-\n-    public update_result setOuch1(UnknownWriter ouch1) {\n-      this.ouch1 = ouch1;\n-      return this;\n-    }\n-\n-    public void unsetOuch1() {\n-      this.ouch1 = null;\n-    }\n-\n-    /** Returns true if field ouch1 is set (has been assigned a value) and false otherwise */\n-    public boolean isSetOuch1() {\n-      return this.ouch1 != null;\n-    }\n-\n-    public void setOuch1IsSet(boolean value) {\n-      if (!value) {\n-        this.ouch1 = null;\n-      }\n-    }\n-\n-    public MutationsRejectedException getOuch2() {\n-      return this.ouch2;\n-    }\n-\n-    public update_result setOuch2(MutationsRejectedException ouch2) {\n-      this.ouch2 = ouch2;\n-      return this;\n-    }\n-\n-    public void unsetOuch2() {\n-      this.ouch2 = null;\n-    }\n-\n-    /** Returns true if field ouch2 is set (has been assigned a value) and false otherwise */\n-    public boolean isSetOuch2() {\n-      return this.ouch2 != null;\n-    }\n-\n-    public void setOuch2IsSet(boolean value) {\n-      if (!value) {\n-        this.ouch2 = null;\n-      }\n-    }\n-\n-    public void setFieldValue(_Fields field, Object value) {\n-      switch (field) {\n-      case OUCH1:\n-        if (value == null) {\n-          unsetOuch1();\n-        } else {\n-          setOuch1((UnknownWriter)value);\n-        }\n-        break;\n-\n-      case OUCH2:\n-        if (value == null) {\n-          unsetOuch2();\n-        } else {\n-          setOuch2((MutationsRejectedException)value);\n-        }\n-        break;\n-\n-      }\n-    }\n-\n-    public Object getFieldValue(_Fields field) {\n-      switch (field) {\n-      case OUCH1:\n-        return getOuch1();\n-\n-      case OUCH2:\n-        return getOuch2();\n-\n-      }\n-      throw new IllegalStateException();\n-    }\n-\n-    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */\n-    public boolean isSet(_Fields field) {\n-      if (field == null) {\n-        throw new IllegalArgumentException();\n-      }\n-\n-      switch (field) {\n-      case OUCH1:\n-        return isSetOuch1();\n-      case OUCH2:\n-        return isSetOuch2();\n-      }\n-      throw new IllegalStateException();\n-    }\n-\n-    @Override\n-    public boolean equals(Object that) {\n-      if (that == null)\n-        return false;\n-      if (that instanceof update_result)\n-        return this.equals((update_result)that);\n-      return false;\n-    }\n-\n-    public boolean equals(update_result that) {\n-      if (that == null)\n-        return false;\n-\n-      boolean this_present_ouch1 = true && this.isSetOuch1();\n-      boolean that_present_ouch1 = true && that.isSetOuch1();\n-      if (this_present_ouch1 || that_present_ouch1) {\n-        if (!(this_present_ouch1 && that_present_ouch1))\n-          return false;\n-        if (!this.ouch1.equals(that.ouch1))\n-          return false;\n-      }\n-\n-      boolean this_present_ouch2 = true && this.isSetOuch2();\n-      boolean that_present_ouch2 = true && that.isSetOuch2();\n-      if (this_present_ouch2 || that_present_ouch2) {\n-        if (!(this_present_ouch2 && that_present_ouch2))\n-          return false;\n-        if (!this.ouch2.equals(that.ouch2))\n-          return false;\n-      }\n-\n-      return true;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-      return 0;\n-    }\n-\n-    public int compareTo(update_result other) {\n-      if (!getClass().equals(other.getClass())) {\n-        return getClass().getName().compareTo(other.getClass().getName());\n-      }\n-\n-      int lastComparison = 0;\n-      update_result typedOther = (update_result)other;\n-\n-      lastComparison = Boolean.valueOf(isSetOuch1()).compareTo(typedOther.isSetOuch1());\n-      if (lastComparison != 0) {\n-        return lastComparison;\n-      }\n-      if (isSetOuch1()) {\n-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch1, typedOther.ouch1);\n-        if (lastComparison != 0) {\n-          return lastComparison;\n-        }\n-      }\n-      lastComparison = Boolean.valueOf(isSetOuch2()).compareTo(typedOther.isSetOuch2());\n-      if (lastComparison != 0) {\n-        return lastComparison;\n-      }\n-      if (isSetOuch2()) {\n-        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch2, typedOther.ouch2);\n-        if (lastComparison != 0) {\n-          return lastComparison;\n-        }\n-      }\n-      return 0;\n-    }\n-\n-    public _Fields fieldForId(int fieldId) {\n-      return _Fields.findByThriftId(fieldId);\n-    }\n-\n-    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {\n-      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);\n-    }\n-\n-    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {\n-      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);\n-      }\n-\n-    @Override\n-    public String toString() {\n-      StringBuilder sb = new StringBuilder(\"update_result(\");\n-      boolean first = true;\n-\n-      sb.append(\"ouch1:\");\n-      if (this.ouch1 == null) {\n-        sb.append(\"null\");\n-      } else {\n-        sb.append(this.ouch1);\n-      }\n-      first = false;\n-      if (!first) sb.append(\", \");\n-      sb.append(\"ouch2:\");\n-      if (this.ouch2 == null) {\n-        sb.append(\"null\");\n-      } else {\n-        sb.append(this.ouch2);\n-      }\n-      first = false;\n-      sb.append(\")\");\n-      return sb.toString();\n-    }\n-\n-    public void validate() throws org.apache.thrift.TException {\n-      // check for required fields\n-      // check for sub-struct validity\n-    }\n-\n-    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n-      try {\n-        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));\n-      } catch (org.apache.thrift.TException te) {\n-        throw new java.io.IOException(te);\n-      }\n-    }\n-\n-    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n-      try {\n-        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));\n-      } catch (org.apache.thrift.TException te) {\n-        throw new java.io.IOException(te);\n-      }\n-    }\n-\n-    private static class update_resultStandardSchemeFactory implements SchemeFactory {\n-      public update_resultStandardScheme getScheme() {\n-        return new update_resultStandardScheme();\n-      }\n-    }\n-\n-    private static class update_resultStandardScheme extends StandardScheme<update_result> {\n-\n-      public void read(org.apache.thrift.protocol.TProtocol iprot, update_result struct) throws org.apache.thrift.TException {\n-        org.apache.thrift.protocol.TField schemeField;\n-        iprot.readStructBegin();\n-        while (true)\n-        {\n-          schemeField = iprot.readFieldBegin();\n-          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { \n-            break;\n-          }\n-          switch (schemeField.id) {\n-            case 1: // OUCH1\n-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n-                struct.ouch1 = new UnknownWriter();\n-                struct.ouch1.read(iprot);\n-                struct.setOuch1IsSet(true);\n-              } else { \n-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n-              }\n-              break;\n-            case 2: // OUCH2\n-              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {\n-                struct.ouch2 = new MutationsRejectedException();\n-                struct.ouch2.read(iprot);\n-                struct.setOuch2IsSet(true);\n-              } else { \n-                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n-              }\n-              break;\n-            default:\n-              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);\n-          }\n-          iprot.readFieldEnd();\n-        }\n-        iprot.readStructEnd();\n-\n-        // check for required fields of primitive type, which can't be checked in the validate method\n-        struct.validate();\n-      }\n-\n-      public void write(org.apache.thrift.protocol.TProtocol oprot, update_result struct) throws org.apache.thrift.TException {\n-        struct.validate();\n-\n-        oprot.writeStructBegin(STRUCT_DESC);\n-        if (struct.ouch1 != null) {\n-          oprot.writeFieldBegin(OUCH1_FIELD_DESC);\n-          struct.ouch1.write(oprot);\n-          oprot.writeFieldEnd();\n-        }\n-        if (struct.ouch2 != null) {\n-          oprot.writeFieldBegin(OUCH2_FIELD_DESC);\n-          struct.ouch2.write(oprot);\n-          oprot.writeFieldEnd();\n-        }\n-        oprot.writeFieldStop();\n-        oprot.writeStructEnd();\n-      }\n-\n-    }\n-\n-    private static class update_resultTupleSchemeFactory implements SchemeFactory {\n-      public update_resultTupleScheme getScheme() {\n-        return new update_resultTupleScheme();\n-      }\n-    }\n-\n-    private static class update_resultTupleScheme extends TupleScheme<update_result> {\n-\n-      @Override\n-      public void write(org.apache.thrift.protocol.TProtocol prot, update_result struct) throws org.apache.thrift.TException {\n-        TTupleProtocol oprot = (TTupleProtocol) prot;\n-        BitSet optionals = new BitSet();\n-        if (struct.isSetOuch1()) {\n-          optionals.set(0);\n-        }\n-        if (struct.isSetOuch2()) {\n-          optionals.set(1);\n-        }\n-        oprot.writeBitSet(optionals, 2);\n-        if (struct.isSetOuch1()) {\n-          struct.ouch1.write(oprot);\n-        }\n-        if (struct.isSetOuch2()) {\n-          struct.ouch2.write(oprot);\n-        }\n-      }\n-\n-      @Override\n-      public void read(org.apache.thrift.protocol.TProtocol prot, update_result struct) throws org.apache.thrift.TException {\n-        TTupleProtocol iprot = (TTupleProtocol) prot;\n-        BitSet incoming = iprot.readBitSet(2);\n-        if (incoming.get(0)) {\n-          struct.ouch1 = new UnknownWriter();\n-          struct.ouch1.read(iprot);\n-          struct.setOuch1IsSet(true);\n-        }\n-        if (incoming.get(1)) {\n-          struct.ouch2 = new MutationsRejectedException();\n-          struct.ouch2.read(iprot);\n-          struct.setOuch2IsSet(true);\n-        }\n-      }\n-    }\n-\n-  }\n-\n   public static class flush_args implements org.apache.thrift.TBase<flush_args, flush_args._Fields>, java.io.Serializable, Cloneable   {\n     private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(\"flush_args\");\n \n", 
  "project": "accumulo", 
  "linesAdd": 52, 
  "jira_id": "1190", 
  "nb_skipped": 0, 
  "commit": "e29dc4f5", 
  "nb_failure": 0, 
  "linesRem": 509
}