{
  "files": 2, 
  "nb_test": 49, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.accumulo.fate.zookeeper.ZooKeeperConnectionInfoTest"
  ], 
  "patch": "diff --git a/fate/src/main/java/org/apache/accumulo/fate/zookeeper/ZooCache.java b/fate/src/main/java/org/apache/accumulo/fate/zookeeper/ZooCache.java\nindex b3dd19ac1..d72ac08ef 100644\n--- a/fate/src/main/java/org/apache/accumulo/fate/zookeeper/ZooCache.java\n+++ b/fate/src/main/java/org/apache/accumulo/fate/zookeeper/ZooCache.java\n@@ -162,7 +162,7 @@ private synchronized void retry(ZooRunnable op) {\n         if (code == Code.NONODE) {\n           log.error(\"Looked up non-existent node in cache \" + e.getPath(), e);\n         } else if (code == Code.CONNECTIONLOSS || code == Code.OPERATIONTIMEOUT || code == Code.SESSIONEXPIRED) {\n-          log.warn(\"Saw (possibly) transient exception communicating with ZooKeeper, wil retry\", e);\n+          log.warn(\"Saw (possibly) transient exception communicating with ZooKeeper, will retry\", e);\n           continue;\n         }\n         log.warn(\"Zookeeper error, will retry\", e);\ndiff --git a/fate/src/main/java/org/apache/accumulo/fate/zookeeper/ZooUtil.java b/fate/src/main/java/org/apache/accumulo/fate/zookeeper/ZooUtil.java\nindex 674c1d808..1a3af6b4e 100644\n--- a/fate/src/main/java/org/apache/accumulo/fate/zookeeper/ZooUtil.java\n+++ b/fate/src/main/java/org/apache/accumulo/fate/zookeeper/ZooUtil.java\n@@ -18,9 +18,11 @@\n \n import java.math.BigInteger;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n \n+import org.apache.commons.lang.builder.HashCodeBuilder;\n import org.apache.log4j.Logger;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n@@ -32,6 +34,8 @@\n import org.apache.zookeeper.data.ACL;\n import org.apache.zookeeper.data.Stat;\n \n+import com.google.common.base.Preconditions;\n+\n public class ZooUtil {\n   private static final Logger log = Logger.getLogger(ZooUtil.class);\n \n@@ -87,11 +91,68 @@ public String toString() {\n     byte[] auth;\n \n     public ZooKeeperConnectionInfo(String keepers, int timeout, String scheme, byte[] auth) {\n+      Preconditions.checkNotNull(keepers);\n       this.keepers = keepers;\n       this.timeout = timeout;\n       this.scheme = scheme;\n       this.auth = auth;\n     }\n+\n+    @Override\n+    public int hashCode() {\n+      final HashCodeBuilder hcb = new HashCodeBuilder(31, 47);\n+      hcb.append(keepers).append(timeout);\n+      if (null != scheme) {\n+        hcb.append(scheme);\n+      }\n+      if (null != auth) {\n+        hcb.append(auth);\n+      }\n+      return hcb.toHashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (o instanceof ZooKeeperConnectionInfo) {\n+        ZooKeeperConnectionInfo other = (ZooKeeperConnectionInfo) o;\n+        if (!keepers.equals(other.keepers) || timeout != other.timeout) {\n+          return false;\n+        }\n+\n+        if (null != scheme) {\n+          if (null == other.scheme) {\n+            // Ours is non-null, theirs is null\n+            return false;\n+          } else if (!scheme.equals(other.scheme)) {\n+            // Both non-null but not equal\n+            return false;\n+          }\n+        }\n+\n+        if (null != auth) {\n+          if (null == other.auth) {\n+            return false;\n+          } else if (!Arrays.equals(auth, other.auth)) {\n+            // both non-null but not equal\n+            return false;\n+          }\n+        }\n+\n+        return true;\n+      }\n+\n+      return false;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      StringBuilder sb = new StringBuilder(64);\n+      sb.append(\"zookeepers=\").append(keepers);\n+      sb.append(\", timeout=\").append(timeout);\n+      sb.append(\", scheme=\").append(scheme);\n+      sb.append(\", auth=\").append(null == auth ? \"null\" : \"REDACTED\");\n+      return sb.toString();\n+    }\n   }\n \n   public static final List<ACL> PRIVATE;\n@@ -206,8 +267,7 @@ public static boolean putPersistentData(ZooKeeperConnectionInfo info, String zPa\n   }\n \n   public static boolean putPersistentData(ZooKeeperConnectionInfo info, String zPath, byte[] data, int version, NodeExistsPolicy policy)\n-      throws KeeperException,\n-      InterruptedException {\n+      throws KeeperException, InterruptedException {\n     return putData(info, zPath, data, CreateMode.PERSISTENT, version, policy, PUBLIC);\n   }\n \n@@ -216,8 +276,7 @@ public static boolean putPersistentData(ZooKeeperConnectionInfo info, String zPa\n     return putData(info, zPath, data, CreateMode.PERSISTENT, version, policy, acls);\n   }\n \n-  private static boolean putData(ZooKeeperConnectionInfo info, String zPath, byte[] data, CreateMode mode, int version,\n-      NodeExistsPolicy policy, List<ACL> acls)\n+  private static boolean putData(ZooKeeperConnectionInfo info, String zPath, byte[] data, CreateMode mode, int version, NodeExistsPolicy policy, List<ACL> acls)\n       throws KeeperException, InterruptedException {\n     if (policy == null)\n       policy = NodeExistsPolicy.FAIL;\n@@ -347,11 +406,12 @@ public static void recursiveCopyPersistent(ZooKeeperConnectionInfo info, String\n           }\n           retry.waitForNextAttempt();\n         }\n-        for (String child : children)\n+        for (String child : children) {\n           recursiveCopyPersistent(info, source + \"/\" + child, destination + \"/\" + child, policy);\n         }\n       }\n     }\n+  }\n \n   public static boolean putPrivatePersistentData(ZooKeeperConnectionInfo info, String zPath, byte[] data, NodeExistsPolicy policy) throws KeeperException,\n       InterruptedException {\n", 
  "project": "accumulo", 
  "linesAdd": 66, 
  "jira_id": "3242", 
  "nb_skipped": 0, 
  "commit": "15e83709", 
  "nb_failure": 1, 
  "linesRem": 6
}