{
  "files": 4, 
  "nb_test": 294, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.accumulo.core.client.mock.MockTableOperationsTest"
  ], 
  "patch": "diff --git a/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperationsImpl.java b/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperationsImpl.java\nindex c35d7fa46..ea4f31142 100644\n--- a/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperationsImpl.java\n+++ b/core/src/main/java/org/apache/accumulo/core/client/admin/TableOperationsImpl.java\n@@ -190,11 +190,7 @@ public void create(String tableName, boolean limitVersion, TimeType timeType) th\n     \n     List<ByteBuffer> args = Arrays.asList(ByteBuffer.wrap(tableName.getBytes()), ByteBuffer.wrap(timeType.name().getBytes()));\n     \n-    Map<String,String> opts;\n-    if (limitVersion) {\n-      opts = IteratorUtil.generateInitialTableProperties();\n-    } else\n-      opts = Collections.emptyMap();\n+    Map<String,String> opts = IteratorUtil.generateInitialTableProperties(limitVersion);\n     \n     try {\n       doTableOperation(TableOperation.CREATE, args, opts);\ndiff --git a/core/src/main/java/org/apache/accumulo/core/client/mock/MockTable.java b/core/src/main/java/org/apache/accumulo/core/client/mock/MockTable.java\nindex f558822b0..9289608df 100644\n--- a/core/src/main/java/org/apache/accumulo/core/client/mock/MockTable.java\n+++ b/core/src/main/java/org/apache/accumulo/core/client/mock/MockTable.java\n@@ -88,9 +88,9 @@ public int compareTo(Key o) {\n   private TimeType timeType;\n   SortedSet<Text> splits = new TreeSet<Text>();\n   \n-  MockTable(boolean useVersions, TimeType timeType) {\n+  MockTable(boolean limitVersion, TimeType timeType) {\n     this.timeType = timeType;\n-    settings = IteratorUtil.generateInitialTableProperties();\n+    settings = IteratorUtil.generateInitialTableProperties(limitVersion);\n     for (Entry<String,String> entry : AccumuloConfiguration.getDefaultConfiguration()) {\n       String key = entry.getKey();\n       if (key.startsWith(Property.TABLE_PREFIX.getKey()))\ndiff --git a/core/src/main/java/org/apache/accumulo/core/iterators/IteratorUtil.java b/core/src/main/java/org/apache/accumulo/core/iterators/IteratorUtil.java\nindex 172fa63ed..9b1ca690e 100644\n--- a/core/src/main/java/org/apache/accumulo/core/iterators/IteratorUtil.java\n+++ b/core/src/main/java/org/apache/accumulo/core/iterators/IteratorUtil.java\n@@ -63,13 +63,22 @@ public int compare(IterInfo o1, IterInfo o2) {\n     \n   }\n   \n-  public static Map<String,String> generateInitialTableProperties() {\n+  /**\n+   * Generate the initial (default) properties for a table\n+   * @param limitVersion\n+   *   include a VersioningIterator at priority 20 that retains a single version of a given K/V pair.\n+   * @return A map of Table properties\n+   */\n+  public static Map<String,String> generateInitialTableProperties(boolean limitVersion) {\n     TreeMap<String,String> props = new TreeMap<String,String>();\n     \n+    if (limitVersion) {\n         for (IteratorScope iterScope : IteratorScope.values()) {\n           props.put(Property.TABLE_ITERATOR_PREFIX + iterScope.name() + \".vers\", \"20,\" + VersioningIterator.class.getName());\n           props.put(Property.TABLE_ITERATOR_PREFIX + iterScope.name() + \".vers.opt.maxVersions\", \"1\");\n         }\n+    }\n+    \n     return props;\n   }\n   \ndiff --git a/core/src/main/java/org/apache/accumulo/core/util/shell/commands/CreateTableCommand.java b/core/src/main/java/org/apache/accumulo/core/util/shell/commands/CreateTableCommand.java\nindex 83829a949..f2495cc56 100644\n--- a/core/src/main/java/org/apache/accumulo/core/util/shell/commands/CreateTableCommand.java\n+++ b/core/src/main/java/org/apache/accumulo/core/util/shell/commands/CreateTableCommand.java\n@@ -110,7 +110,7 @@ public int execute(final String fullCommand, final CommandLine cl, final Shell s\n     // context\n     \n     if (cl.hasOption(createTableNoDefaultIters.getOpt())) {\n-      for (String key : IteratorUtil.generateInitialTableProperties().keySet()) {\n+      for (String key : IteratorUtil.generateInitialTableProperties(true).keySet()) {\n         shellState.getConnector().tableOperations().removeProperty(tableName, key);\n       }\n     }\n", 
  "project": "accumulo", 
  "linesAdd": 14, 
  "jira_id": "795", 
  "nb_skipped": 0, 
  "commit": "9453bcfa", 
  "nb_failure": 1, 
  "linesRem": 9
}