{
  "files": 1, 
  "nb_test": 276, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.accumulo.core.iterators.user.GrepIteratorTest"
  ], 
  "patch": "diff --git a/src/core/src/main/java/org/apache/accumulo/core/iterators/user/GrepIterator.java b/src/core/src/main/java/org/apache/accumulo/core/iterators/user/GrepIterator.java\nindex e768bff54..ab8ca84db 100644\n--- a/src/core/src/main/java/org/apache/accumulo/core/iterators/user/GrepIterator.java\n+++ b/src/core/src/main/java/org/apache/accumulo/core/iterators/user/GrepIterator.java\n@@ -17,35 +17,27 @@\n package org.apache.accumulo.core.iterators.user;\n \n import java.io.IOException;\n+import java.util.Arrays;\n import java.util.Map;\n \n import org.apache.accumulo.core.client.IteratorSetting;\n import org.apache.accumulo.core.data.ByteSequence;\n import org.apache.accumulo.core.data.Key;\n import org.apache.accumulo.core.data.Value;\n+import org.apache.accumulo.core.iterators.Filter;\n import org.apache.accumulo.core.iterators.IteratorEnvironment;\n-import org.apache.accumulo.core.iterators.SkippingIterator;\n import org.apache.accumulo.core.iterators.SortedKeyValueIterator;\n \n /**\n  * This iterator provides exact string matching. It searches both the Key and Value for the string. The string to match is specified by the \"term\" option.\n  */\n-public class GrepIterator extends SkippingIterator {\n+public class GrepIterator extends Filter {\n   \n   private byte term[];\n   \n   @Override\n-  protected void consume() throws IOException {\n-    while (getSource().hasTop()) {\n-      Key k = getSource().getTopKey();\n-      Value v = getSource().getTopValue();\n-      \n-      if (match(v.get()) || match(k.getRowData()) || match(k.getColumnFamilyData()) || match(k.getColumnQualifierData())) {\n-        break;\n-      }\n-      \n-      getSource().next();\n-    }\n+  public boolean accept(Key k, Value v) {\n+    return match(v.get()) || match(k.getRowData()) || match(k.getColumnFamilyData()) || match(k.getColumnQualifierData());\n   }\n   \n   private boolean match(ByteSequence bs) {\n@@ -88,7 +80,9 @@ private static int indexOf(byte[] source, int sourceOffset, int sourceCount, byt\n   \n   @Override\n   public SortedKeyValueIterator<Key,Value> deepCopy(IteratorEnvironment env) {\n-    throw new UnsupportedOperationException();\n+    GrepIterator copy = (GrepIterator) super.deepCopy(env);\n+    copy.term = Arrays.copyOf(term, term.length);\n+    return copy;\n   }\n   \n   @Override\n", 
  "project": "accumulo", 
  "linesAdd": 8, 
  "jira_id": "414", 
  "nb_skipped": 0, 
  "commit": "116d5928", 
  "nb_failure": 1, 
  "linesRem": 14
}