{
  "files": 1, 
  "nb_test": 64, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.accumulo.server.constraints.MetadataConstraintsTest"
  ], 
  "patch": "diff --git a/server/src/main/java/org/apache/accumulo/server/constraints/MetadataConstraints.java b/server/src/main/java/org/apache/accumulo/server/constraints/MetadataConstraints.java\nindex bd19d1fce..463b7b02d 100644\n--- a/server/src/main/java/org/apache/accumulo/server/constraints/MetadataConstraints.java\n+++ b/server/src/main/java/org/apache/accumulo/server/constraints/MetadataConstraints.java\n@@ -34,6 +34,7 @@\n import org.apache.accumulo.server.client.HdfsZooInstance;\n import org.apache.accumulo.server.zookeeper.ZooCache;\n import org.apache.accumulo.server.zookeeper.ZooLock;\n+import org.apache.accumulo.server.zookeeper.TransactionWatcher.ZooArbitrator;\n import org.apache.hadoop.io.Text;\n import org.apache.log4j.Logger;\n \n@@ -72,6 +73,22 @@ private static boolean isValidColumn(ColumnUpdate cu) {\n     return false;\n   }\n   \n+  static private ArrayList<Short> addViolation(ArrayList<Short> lst, int violation) {\n+    if (lst == null)\n+      lst = new ArrayList<Short>();\n+    lst.add((short)violation);\n+    return lst;\n+  }\n+  \n+  static private ArrayList<Short> addIfNotPresent(ArrayList<Short> lst, int intViolation) {\n+    if (lst == null)\n+      return addViolation(lst, intViolation);\n+    short violation = (short)intViolation;\n+    if (!lst.contains(violation))\n+      return addViolation(lst, intViolation);\n+    return lst;\n+  }\n+  \n   public List<Short> check(Environment env, Mutation mutation) {\n     \n     ArrayList<Short> violations = null;\n@@ -96,44 +113,30 @@ private static boolean isValidColumn(ColumnUpdate cu) {\n         break;\n       \n       if (!validTableNameChars[0xff & b]) {\n-        if (violations == null)\n-          violations = new ArrayList<Short>();\n-        if (!violations.contains((short) 4))\n-          violations.add((short) 4);\n+        violations = addIfNotPresent(violations, 4);\n       }\n     }\n     \n     if (!containsSemiC) {\n       // see if last row char is <\n       if (row.length == 0 || row[row.length - 1] != '<') {\n-        if (violations == null)\n-          violations = new ArrayList<Short>();\n-        if (!violations.contains((short) 4))\n-          violations.add((short) 4);\n+        violations = addIfNotPresent(violations, 4);\n       }\n     } else {\n       if (row.length == 0) {\n-        if (violations == null)\n-          violations = new ArrayList<Short>();\n-        if (!violations.contains((short) 4))\n-          violations.add((short) 4);\n+        violations = addIfNotPresent(violations, 4);\n       }\n     }\n     \n     if (row.length > 0 && row[0] == '!') {\n       if (row.length < 3 || row[1] != '0' || (row[2] != '<' && row[2] != ';')) {\n-        if (violations == null)\n-          violations = new ArrayList<Short>();\n-        if (!violations.contains((short) 4))\n-          violations.add((short) 4);\n+        violations = addIfNotPresent(violations, 4);\n       }\n     }\n     \n     // ensure row is not less than Constants.METADATA_TABLE_ID\n     if (new Text(row).compareTo(new Text(Constants.METADATA_TABLE_ID)) < 0) {\n-      if (violations == null)\n-        violations = new ArrayList<Short>();\n-      violations.add((short) 5);\n+      violations = addViolation(violations, 5);\n     }\n     \n     for (ColumnUpdate columnUpdate : colUpdates) {\n@@ -141,17 +144,13 @@ private static boolean isValidColumn(ColumnUpdate cu) {\n       \n       if (columnUpdate.isDeleted()) {\n         if (!isValidColumn(columnUpdate)) {\n-          if (violations == null)\n-            violations = new ArrayList<Short>();\n-          violations.add((short) 2);\n+          violations = addViolation(violations, 2);\n         }\n         continue;\n       }\n       \n       if (columnUpdate.getValue().length == 0 && !columnFamily.equals(Constants.METADATA_SCANFILE_COLUMN_FAMILY)) {\n-        if (violations == null)\n-          violations = new ArrayList<Short>();\n-        violations.add((short) 6);\n+        violations = addViolation(violations, 6);\n       }\n       \n       if (columnFamily.equals(Constants.METADATA_DATAFILE_COLUMN_FAMILY)) {\n@@ -159,26 +158,49 @@ private static boolean isValidColumn(ColumnUpdate cu) {\n           DataFileValue dfv = new DataFileValue(columnUpdate.getValue());\n           \n           if (dfv.getSize() < 0 || dfv.getNumEntries() < 0) {\n-            if (violations == null)\n-              violations = new ArrayList<Short>();\n-            violations.add((short) 1);\n+            violations = addViolation(violations, 1);\n           }\n         } catch (NumberFormatException nfe) {\n-          if (violations == null)\n-            violations = new ArrayList<Short>();\n-          violations.add((short) 1);\n+          violations = addViolation(violations, 1);\n         } catch (ArrayIndexOutOfBoundsException aiooe) {\n-          if (violations == null)\n-            violations = new ArrayList<Short>();\n-          violations.add((short) 1);\n+          violations = addViolation(violations, 1);\n         }\n       } else if (columnFamily.equals(Constants.METADATA_SCANFILE_COLUMN_FAMILY)) {\n         \n+      } else if (columnFamily.equals(Constants.METADATA_BULKFILE_COLUMN_FAMILY)) {\n+        if (!columnUpdate.isDeleted()) {\n+          // splits, which also write the time reference, are allowed to write this reference even when\n+          // the transaction is not running because the other half of the tablet is holding a reference\n+          // to the file.\n+          boolean isSplitMutation = false;\n+          // When a tablet is assigned, it re-writes the metadata.  It should probably only update the location information, \n+          // but it writes everything.  We allow it to re-write the bulk information if it is setting the location. \n+          // See ACCUMULO-1230. \n+          boolean isLocationMutation = false;\n+          for (ColumnUpdate update : mutation.getUpdates()) {\n+            if (new ColumnFQ(update).equals(Constants.METADATA_TIME_COLUMN)) {\n+              isSplitMutation = true;\n+            }\n+            if (update.getColumnFamily().equals(Constants.METADATA_CURRENT_LOCATION_COLUMN_FAMILY)) {\n+              isLocationMutation = true;\n+            }\n+          }\n+          \n+          if (!isSplitMutation && !isLocationMutation) {\n+            String tidString = new String(columnUpdate.getValue());\n+            long tid = Long.parseLong(tidString);\n+            try {\n+              if (!new ZooArbitrator().transactionAlive(Constants.BULK_ARBITRATOR_TYPE, tid)) {\n+                violations = addViolation(violations, 8);\n+              }\n+            } catch (Exception ex) {\n+              violations = addViolation(violations, 8);\n+            }\n+          }\n+        }\n       } else {\n         if (!isValidColumn(columnUpdate)) {\n-          if (violations == null)\n-            violations = new ArrayList<Short>();\n-          violations.add((short) 2);\n+          violations = addViolation(violations, 2);\n         } else if (new ColumnFQ(columnUpdate).equals(Constants.METADATA_PREV_ROW_COLUMN) && columnUpdate.getValue().length > 0\n             && (violations == null || !violations.contains((short) 4))) {\n           KeyExtent ke = new KeyExtent(new Text(mutation.getRow()), (Text) null);\n@@ -188,9 +210,7 @@ private static boolean isValidColumn(ColumnUpdate cu) {\n           boolean prevEndRowLessThanEndRow = per == null || ke.getEndRow() == null || per.compareTo(ke.getEndRow()) < 0;\n           \n           if (!prevEndRowLessThanEndRow) {\n-            if (violations == null)\n-              violations = new ArrayList<Short>();\n-            violations.add((short) 3);\n+            violations = addViolation(violations, 3);\n           }\n         } else if (new ColumnFQ(columnUpdate).equals(Constants.METADATA_LOCK_COLUMN)) {\n           if (zooCache == null) {\n@@ -211,9 +231,7 @@ private static boolean isValidColumn(ColumnUpdate cu) {\n           }\n           \n           if (!lockHeld) {\n-            if (violations == null)\n-              violations = new ArrayList<Short>();\n-            violations.add((short) 7);\n+            violations = addViolation(violations, 7);\n           }\n         }\n         \n@@ -221,7 +239,10 @@ private static boolean isValidColumn(ColumnUpdate cu) {\n     }\n     \n     if (violations != null) {\n-      log.debug(\" violating metadata mutation : \" + mutation);\n+      log.debug(\"violating metadata mutation : \" + new String(mutation.getRow()));\n+      for (ColumnUpdate update : mutation.getUpdates()) {\n+        log.debug(\" update: \" + new String(update.getColumnFamily()) + \":\" + new String(update.getColumnQualifier()) + \" value \" + (update.isDeleted() ? \"[delete]\" : new String(update.getValue())));\n+      }\n     }\n     \n     return violations;\n@@ -243,6 +264,8 @@ public String getViolationDescription(short violationCode) {\n         return \"Empty values are not allowed for any \" + Constants.METADATA_TABLE_NAME + \" column\";\n       case 7:\n         return \"Lock not held in zookeeper by writer\";\n+      case 8:\n+        return \"Bulk load transaction no longer running\";\n     }\n     return null;\n   }\n", 
  "project": "accumulo", 
  "linesAdd": 67, 
  "jira_id": "1044", 
  "nb_skipped": 0, 
  "commit": "ea2f9856", 
  "nb_failure": 1, 
  "linesRem": 44
}