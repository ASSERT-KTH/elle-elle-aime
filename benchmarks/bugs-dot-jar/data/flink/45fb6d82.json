{
  "files": 2, 
  "nb_test": 170, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.flink.compiler.custompartition.CoGroupCustomPartitioningTest", 
    "org.apache.flink.compiler.custompartition.JoinCustomPartitioningTest"
  ], 
  "patch": "diff --git a/flink-compiler/src/main/java/org/apache/flink/compiler/operators/AbstractJoinDescriptor.java b/flink-compiler/src/main/java/org/apache/flink/compiler/operators/AbstractJoinDescriptor.java\nindex cb0e61c308..d8f774669b 100644\n--- a/flink-compiler/src/main/java/org/apache/flink/compiler/operators/AbstractJoinDescriptor.java\n+++ b/flink-compiler/src/main/java/org/apache/flink/compiler/operators/AbstractJoinDescriptor.java\n@@ -19,6 +19,7 @@\n package org.apache.flink.compiler.operators;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n import org.apache.flink.api.common.functions.Partitioner;\n@@ -62,6 +63,33 @@ public void setCustomPartitioner(Partitioner<?> partitioner) {\n \t\t\n \t\tif (repartitionAllowed) {\n \t\t\t// partition both (hash or custom)\n+\t\t\tif (this.customPartitioner == null) {\n+\t\t\t\t\n+\t\t\t\t// we accept compatible partitionings of any type\n+\t\t\t\tRequestedGlobalProperties partitioned_left_any = new RequestedGlobalProperties();\n+\t\t\t\tRequestedGlobalProperties partitioned_right_any = new RequestedGlobalProperties();\n+\t\t\t\tpartitioned_left_any.setAnyPartitioning(this.keys1);\n+\t\t\t\tpartitioned_right_any.setAnyPartitioning(this.keys2);\n+\t\t\t\tpairs.add(new GlobalPropertiesPair(partitioned_left_any, partitioned_right_any));\n+\t\t\t\t\n+\t\t\t\t// we also explicitly add hash partitioning, as a fallback, if the any-pairs do not match\n+\t\t\t\tRequestedGlobalProperties partitioned_left_hash = new RequestedGlobalProperties();\n+\t\t\t\tRequestedGlobalProperties partitioned_right_hash = new RequestedGlobalProperties();\n+\t\t\t\tpartitioned_left_hash.setHashPartitioned(this.keys1);\n+\t\t\t\tpartitioned_right_hash.setHashPartitioned(this.keys2);\n+\t\t\t\tpairs.add(new GlobalPropertiesPair(partitioned_left_hash, partitioned_right_hash));\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tRequestedGlobalProperties partitioned_left = new RequestedGlobalProperties();\n+\t\t\t\tpartitioned_left.setCustomPartitioned(this.keys1, this.customPartitioner);\n+\t\t\t\t\n+\t\t\t\tRequestedGlobalProperties partitioned_right = new RequestedGlobalProperties();\n+\t\t\t\tpartitioned_right.setCustomPartitioned(this.keys2, this.customPartitioner);\n+\t\t\t\t\n+\t\t\t\treturn Collections.singletonList(new GlobalPropertiesPair(partitioned_left, partitioned_right));\n+\t\t\t}\n+\t\t\t\n+\t\t\t\n \t\t\tRequestedGlobalProperties partitioned1 = new RequestedGlobalProperties();\n \t\t\tif (customPartitioner == null) {\n \t\t\t\tpartitioned1.setAnyPartitioning(this.keys1);\ndiff --git a/flink-compiler/src/main/java/org/apache/flink/compiler/operators/CoGroupDescriptor.java b/flink-compiler/src/main/java/org/apache/flink/compiler/operators/CoGroupDescriptor.java\nindex 14f40f37d3..bc83c5174f 100644\n--- a/flink-compiler/src/main/java/org/apache/flink/compiler/operators/CoGroupDescriptor.java\n+++ b/flink-compiler/src/main/java/org/apache/flink/compiler/operators/CoGroupDescriptor.java\n@@ -18,6 +18,7 @@\n \n package org.apache.flink.compiler.operators;\n \n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n \n@@ -98,21 +99,29 @@ public DriverStrategy getStrategy() {\n \n \t@Override\n \tprotected List<GlobalPropertiesPair> createPossibleGlobalProperties() {\n-\t\tRequestedGlobalProperties partitioned1 = new RequestedGlobalProperties();\n \t\tif (this.customPartitioner == null) {\n-\t\t\tpartitioned1.setAnyPartitioning(this.keys1);\n-\t\t} else {\n-\t\t\tpartitioned1.setCustomPartitioned(this.keys1, this.customPartitioner);\n-\t\t}\n+\t\t\tRequestedGlobalProperties partitioned_left_any = new RequestedGlobalProperties();\n+\t\t\tRequestedGlobalProperties partitioned_left_hash = new RequestedGlobalProperties();\n+\t\t\tpartitioned_left_any.setAnyPartitioning(this.keys1);\n+\t\t\tpartitioned_left_hash.setHashPartitioned(this.keys1);\n \t\t\t\n-\t\tRequestedGlobalProperties partitioned2 = new RequestedGlobalProperties();\n-\t\tif (this.customPartitioner == null) {\n-\t\t\tpartitioned2.setAnyPartitioning(this.keys2);\n-\t\t} else {\n-\t\t\tpartitioned2.setCustomPartitioned(this.keys2, this.customPartitioner);\n+\t\t\tRequestedGlobalProperties partitioned_right_any = new RequestedGlobalProperties();\n+\t\t\tRequestedGlobalProperties partitioned_right_hash = new RequestedGlobalProperties();\n+\t\t\tpartitioned_right_any.setAnyPartitioning(this.keys2);\n+\t\t\tpartitioned_right_hash.setHashPartitioned(this.keys2);\n+\t\t\t\n+\t\t\treturn Arrays.asList(new GlobalPropertiesPair(partitioned_left_any, partitioned_right_any),\n+\t\t\t\t\tnew GlobalPropertiesPair(partitioned_left_hash, partitioned_right_hash));\n \t\t}\n+\t\telse {\n+\t\t\tRequestedGlobalProperties partitioned_left = new RequestedGlobalProperties();\n+\t\t\tpartitioned_left.setCustomPartitioned(this.keys1, this.customPartitioner);\n+\t\t\t\n+\t\t\tRequestedGlobalProperties partitioned_right = new RequestedGlobalProperties();\n+\t\t\tpartitioned_right.setCustomPartitioned(this.keys2, this.customPartitioner);\n \t\t\t\n-\t\treturn Collections.singletonList(new GlobalPropertiesPair(partitioned1, partitioned2));\n+\t\t\treturn Collections.singletonList(new GlobalPropertiesPair(partitioned_left, partitioned_right));\n+\t\t}\n \t}\n \t\n \t@Override\n", 
  "project": "flink", 
  "linesAdd": 48, 
  "jira_id": "1290", 
  "nb_skipped": 0, 
  "commit": "45fb6d82", 
  "nb_failure": 2, 
  "linesRem": 11
}