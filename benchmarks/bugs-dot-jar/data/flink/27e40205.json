{
  "files": 1, 
  "nb_test": 455, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "type.extractor.TypeExtractorTest"
  ], 
  "patch": "diff --git a/flink-java/src/main/java/org/apache/flink/api/java/typeutils/TypeExtractor.java b/flink-java/src/main/java/org/apache/flink/api/java/typeutils/TypeExtractor.java\nindex d8e1aedfdf..d5f3619d84 100644\n--- a/flink-java/src/main/java/org/apache/flink/api/java/typeutils/TypeExtractor.java\n+++ b/flink-java/src/main/java/org/apache/flink/api/java/typeutils/TypeExtractor.java\n@@ -201,7 +201,7 @@ private TypeExtractor() {\n \t\t\n \t\t// return type is a variable -> try to get the type info from the input directly\n \t\tif (returnType instanceof TypeVariable<?>) {\n-\t\t\ttypeInfo = (TypeInformation<OUT>) createTypeInfoFromInput((TypeVariable<?>) returnType, typeHierarchy, in1Type, in2Type);\n+\t\t\ttypeInfo = (TypeInformation<OUT>) createTypeInfoFromInputs((TypeVariable<?>) returnType, typeHierarchy, in1Type, in2Type);\n \t\t\t\n \t\t\tif (typeInfo != null) {\n \t\t\t\treturn typeInfo;\n@@ -280,7 +280,7 @@ private TypeExtractor() {\n \t\t\t\t// sub type could not be determined with materializing\n \t\t\t\t// try to derive the type info of the TypeVariable from the immediate base child input as a last attempt\n \t\t\t\tif (subtypes[i] instanceof TypeVariable<?>) {\n-\t\t\t\t\ttupleSubTypes[i] = createTypeInfoFromInput((TypeVariable<?>) subtypes[i], typeHierarchy, in1Type, in2Type);\n+\t\t\t\t\ttupleSubTypes[i] = createTypeInfoFromInputs((TypeVariable<?>) subtypes[i], typeHierarchy, in1Type, in2Type);\n \t\t\t\t\t\n \t\t\t\t\t// variable could not be determined\n \t\t\t\t\tif (tupleSubTypes[i] == null) {\n@@ -315,7 +315,7 @@ else if (t instanceof TypeVariable) {\n \t\t\t}\n \t\t\t// try to derive the type info of the TypeVariable from the immediate base child input as a last attempt\n \t\t\telse {\n-\t\t\t\tTypeInformation<OUT> typeInfo = (TypeInformation<OUT>) createTypeInfoFromInput((TypeVariable<?>) t, typeHierarchy, in1Type, in2Type);\n+\t\t\t\tTypeInformation<OUT> typeInfo = (TypeInformation<OUT>) createTypeInfoFromInputs((TypeVariable<?>) t, typeHierarchy, in1Type, in2Type);\n \t\t\t\tif (typeInfo != null) {\n \t\t\t\t\treturn typeInfo;\n \t\t\t\t} else {\n@@ -371,7 +371,7 @@ else if (t instanceof Class) {\n \t\tthrow new InvalidTypesException(\"Type Information could not be created.\");\n \t}\n \t\n-\tprivate <IN1, IN2> TypeInformation<?> createTypeInfoFromInput(TypeVariable<?> returnTypeVar, ArrayList<Type> returnTypeHierarchy, \n+\tprivate <IN1, IN2> TypeInformation<?> createTypeInfoFromInputs(TypeVariable<?> returnTypeVar, ArrayList<Type> returnTypeHierarchy, \n \t\t\tTypeInformation<IN1> in1TypeInfo, TypeInformation<IN2> in2TypeInfo) {\n \n \t\tType matReturnTypeVar = materializeTypeVariable(returnTypeHierarchy, returnTypeVar);\n@@ -389,20 +389,16 @@ else if (t instanceof Class) {\n \t\t\t// find the deepest type variable that describes the type of input 1\n \t\t\tParameterizedType baseClass = (ParameterizedType) returnTypeHierarchy.get(returnTypeHierarchy.size() - 1);\n \t\t\tType in1Type = baseClass.getActualTypeArguments()[0];\n-\t\t\tif (in1Type instanceof TypeVariable) {\n-\t\t\t\tin1Type = materializeTypeVariable(returnTypeHierarchy, (TypeVariable<?>) in1Type);\n-\t\t\t\tinfo = findCorrespondingInfo(returnTypeVar, in1Type, in1TypeInfo);\n-\t\t\t}\n+\n+\t\t\tinfo = createTypeInfoFromInput(returnTypeVar, returnTypeHierarchy, in1Type, in1TypeInfo);\n \t\t}\n \n \t\tif (info == null && in2TypeInfo != null) {\n \t\t\t// find the deepest type variable that describes the type of input 2\n \t\t\tParameterizedType baseClass = (ParameterizedType) returnTypeHierarchy.get(returnTypeHierarchy.size() - 1);\n \t\t\tType in2Type = baseClass.getActualTypeArguments()[1];\n-\t\t\tif (in2Type instanceof TypeVariable) {\n-\t\t\t\tin2Type = materializeTypeVariable(returnTypeHierarchy, (TypeVariable<?>) in2Type);\n-\t\t\t\tinfo = findCorrespondingInfo(returnTypeVar, in2Type, in2TypeInfo);\n-\t\t\t}\n+\n+\t\t\tinfo = createTypeInfoFromInput(returnTypeVar, returnTypeHierarchy, in2Type, in2TypeInfo);\n \t\t}\n \n \t\tif (info != null) {\n@@ -412,6 +408,31 @@ else if (t instanceof Class) {\n \t\treturn null;\n \t}\n \t\n+\tprivate <IN1> TypeInformation<?> createTypeInfoFromInput(TypeVariable<?> returnTypeVar, ArrayList<Type> returnTypeHierarchy, \n+\t\t\tType inType, TypeInformation<IN1> inTypeInfo) {\n+\t\tTypeInformation<?> info = null;\n+\t\t// the input is a type variable\n+\t\tif (inType instanceof TypeVariable) {\n+\t\t\tinType = materializeTypeVariable(returnTypeHierarchy, (TypeVariable<?>) inType);\n+\t\t\tinfo = findCorrespondingInfo(returnTypeVar, inType, inTypeInfo);\n+\t\t}\n+\t\t// the input is a tuple that may contains type variables\n+\t\telse if (inType instanceof ParameterizedType && Tuple.class.isAssignableFrom(((Class<?>)((ParameterizedType) inType).getRawType()))) {\n+\t\t\tType[] tupleElements = ((ParameterizedType) inType).getActualTypeArguments();\n+\t\t\t// go thru all tuple elements and search for type variables\n+\t\t\tfor(int i = 0; i < tupleElements.length; i++) {\n+\t\t\t\tif(tupleElements[i] instanceof TypeVariable) {\n+\t\t\t\t\tinType = materializeTypeVariable(returnTypeHierarchy, (TypeVariable<?>) tupleElements[i]);\n+\t\t\t\t\tinfo = findCorrespondingInfo(returnTypeVar, inType, ((TupleTypeInfo<?>) inTypeInfo).getTypeAt(i));\n+\t\t\t\t\tif(info != null) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn info;\n+\t}\n+\t\n \t// --------------------------------------------------------------------------------------------\n \t//  Extract type parameters\n \t// --------------------------------------------------------------------------------------------\n", 
  "project": "flink", 
  "linesAdd": 33, 
  "jira_id": "1133", 
  "nb_skipped": 1, 
  "commit": "27e40205", 
  "nb_failure": 0, 
  "linesRem": 12
}