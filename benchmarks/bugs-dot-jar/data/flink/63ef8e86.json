{
  "files": 1, 
  "nb_test": 634, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "type.extractor.PojoTypeExtractionTest"
  ], 
  "patch": "diff --git a/flink-java/src/main/java/org/apache/flink/api/java/typeutils/TypeExtractor.java b/flink-java/src/main/java/org/apache/flink/api/java/typeutils/TypeExtractor.java\nindex e52e2af1b6..b528d00d95 100644\n--- a/flink-java/src/main/java/org/apache/flink/api/java/typeutils/TypeExtractor.java\n+++ b/flink-java/src/main/java/org/apache/flink/api/java/typeutils/TypeExtractor.java\n@@ -989,12 +989,12 @@ private boolean isValidPojoField(Field f, Class<?> clazz, ArrayList<Type> typeHi\n \t\t\t}\n \t\t\tfor(Method m : clazz.getMethods()) {\n \t\t\t\t// check for getter\n-\t\t\t\tif(\t// The name should be \"get<FieldName>\" or \"<fieldName>\" (for scala).\n-\t\t\t\t\t(m.getName().toLowerCase().equals(\"get\"+fieldNameLow) || m.getName().toLowerCase().equals(fieldNameLow)) &&\n+\t\t\t\tif(\t// The name should be \"get<FieldName>\" or \"<fieldName>\" (for scala) or \"is<fieldName>\" for boolean fields.\n+\t\t\t\t\t(m.getName().toLowerCase().equals(\"get\"+fieldNameLow) || m.getName().toLowerCase().equals(\"is\"+fieldNameLow) || m.getName().toLowerCase().equals(fieldNameLow)) &&\n \t\t\t\t\t// no arguments for the getter\n \t\t\t\t\tm.getParameterTypes().length == 0 &&\n \t\t\t\t\t// return type is same as field type (or the generic variant of it)\n-\t\t\t\t\t(m.getReturnType().equals( fieldType ) || (fieldTypeGeneric != null && m.getGenericReturnType().equals(fieldTypeGeneric)) )\n+\t\t\t\t\t(m.getGenericReturnType().equals( fieldType ) || (fieldTypeGeneric != null && m.getGenericReturnType().equals(fieldTypeGeneric)) )\n \t\t\t\t) {\n \t\t\t\t\tif(hasGetter) {\n \t\t\t\t\t\tthrow new IllegalStateException(\"Detected more than one getter\");\n@@ -1004,7 +1004,7 @@ private boolean isValidPojoField(Field f, Class<?> clazz, ArrayList<Type> typeHi\n \t\t\t\t// check for setters (<FieldName>_$eq for scala)\n \t\t\t\tif((m.getName().toLowerCase().equals(\"set\"+fieldNameLow) || m.getName().toLowerCase().equals(fieldNameLow+\"_$eq\")) &&\n \t\t\t\t\tm.getParameterTypes().length == 1 && // one parameter of the field's type\n-\t\t\t\t\t( m.getParameterTypes()[0].equals( fieldType ) || (fieldTypeGeneric != null && m.getGenericParameterTypes()[0].equals(fieldTypeGeneric) ) )&&\n+\t\t\t\t\t( m.getGenericParameterTypes()[0].equals( fieldType ) || (fieldTypeGeneric != null && m.getGenericParameterTypes()[0].equals(fieldTypeGeneric) ) )&&\n \t\t\t\t\t// return type is void.\n \t\t\t\t\tm.getReturnType().equals(Void.TYPE)\n \t\t\t\t) {\n", 
  "project": "flink", 
  "linesAdd": 4, 
  "jira_id": "1333", 
  "nb_skipped": 0, 
  "commit": "63ef8e86", 
  "nb_failure": 1, 
  "linesRem": 4
}