{
  "files": 1, 
  "nb_test": 562, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.flink.runtime.instance.InstanceConnectionInfoTest"
  ], 
  "patch": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/instance/InstanceConnectionInfo.java b/flink-runtime/src/main/java/org/apache/flink/runtime/instance/InstanceConnectionInfo.java\nindex a1eec4d146..ee79c238c0 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/instance/InstanceConnectionInfo.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/instance/InstanceConnectionInfo.java\n@@ -31,7 +31,10 @@\n import org.slf4j.LoggerFactory;\n \n /**\n- * This class encapsulates all connection information necessary to connect to the instance's task manager.\n+ * This class encapsulates the connection information of a TaskManager.\n+ * It describes the host where the TaskManager operates and its server port\n+ * for data exchange. This class also contains utilities to work with the\n+ * TaskManager's host name, which is used to localize work assignments.\n  */\n public class InstanceConnectionInfo implements IOReadableWritable, Comparable<InstanceConnectionInfo>, java.io.Serializable {\n \n@@ -56,16 +59,10 @@\n \tprivate String fqdnHostName;\n \t\n \t/**\n-\t * The hostname\n+\t * The hostname, derived from the fully qualified host name.\n \t */\n \tprivate String hostName;\n \n-\t/**\n-\t * This flag indicates if the FQDN hostname cound not be resolved and is represented\n-\t * as an IP address (string).\n-\t */\n-\tprivate boolean fqdnHostNameIsIP = false;\n-\n \n \t/**\n \t * Constructs a new instance connection info object. The constructor will attempt to retrieve the instance's\n@@ -90,14 +87,24 @@ public InstanceConnectionInfo(InetAddress inetAddress, int dataPort) {\n \t\t// get FQDN hostname on this TaskManager.\n \t\ttry {\n \t\t\tthis.fqdnHostName = this.inetAddress.getCanonicalHostName();\n-\t\t} catch (Throwable t) {\n-\t\t\tLOG.warn(\"Unable to determine hostname for TaskManager. The performance might be degraded since HDFS input split assignment is not possible\");\n-\t\t\tif(LOG.isDebugEnabled()) {\n-\t\t\t\tLOG.debug(\"getCanonicalHostName() Exception\", t);\n \t\t}\n-\t\t\t// could not determine host name, so take IP textual representation\n-\t\t\tthis.fqdnHostName = inetAddress.getHostAddress();\n-\t\t\tthis.fqdnHostNameIsIP = true;\n+\t\tcatch (Throwable t) {\n+\t\t\tLOG.warn(\"Unable to determine the canonical hostname. Input split assignment (such as \" +\n+\t\t\t\t\t\"for HDFS files) may be non-local when the canonical hostname is missing.\");\n+\t\t\tLOG.debug(\"getCanonicalHostName() Exception:\", t);\n+\t\t\tthis.fqdnHostName = this.inetAddress.getHostAddress();\n+\t\t}\n+\n+\t\tif (this.fqdnHostName.equals(this.inetAddress.getHostAddress())) {\n+\t\t\t// this happens when the name lookup fails, either due to an exception,\n+\t\t\t// or because no hostname can be found for the address\n+\t\t\t// take IP textual representation\n+\t\t\tthis.hostName = this.fqdnHostName;\n+\t\t\tLOG.warn(\"No hostname could be resolved for the IP address {}, using IP address as host name. \"\n+\t\t\t\t\t+ \"Local input split assignment (such as for HDFS files) may be impacted.\");\n+\t\t}\n+\t\telse {\n+\t\t\tthis.hostName = NetUtils.getHostnameFromFQDN(this.fqdnHostName);\n \t\t}\n \t}\n \n@@ -126,27 +133,37 @@ public InetAddress address() {\n \t}\n \n \t/**\n-\t * Returns the host name of the instance. If the host name could not be determined, the return value will be a\n-\t * textual representation of the instance's IP address.\n+\t * Returns the fully-qualified domain name the TaskManager. If the name could not be\n+\t * determined, the return value will be a textual representation of the TaskManager's IP address.\n \t * \n-\t * @return the host name of the instance\n+\t * @return The fully-qualified domain name of the TaskManager.\n \t */\n \tpublic String getFQDNHostname() {\n \t\treturn this.fqdnHostName;\n \t}\n \n+\t/**\n+\t * Gets the hostname of the TaskManager. The hostname derives from the fully qualified\n+\t * domain name (FQDN, see {@link #getFQDNHostname()}):\n+\t * <ul>\n+\t *     <li>If the FQDN is the textual IP address, then the hostname is also the IP address</li>\n+\t *     <li>If the FQDN has only one segment (such as \"localhost\", or \"host17\"), then this is\n+\t *         used as the hostname.</li>\n+\t *     <li>If the FQDN has multiple segments (such as \"worker3.subgroup.company.net\"), then the first\n+\t *         segment (here \"worker3\") will be used as the hostname.</li>\n+\t * </ul>\n+\t *\n+\t * @return The hostname of the TaskManager.\n+\t */\n \tpublic String getHostname() {\n-\t\tif(hostName == null) {\n-\t\t\tString fqdn = getFQDNHostname();\n-\t\t\tif(this.fqdnHostNameIsIP) { // fqdn to hostname translation is pointless if FQDN is an ip address.\n-\t\t\t\thostName = fqdn;\n-\t\t\t} else {\n-\t\t\t\thostName = NetUtils.getHostnameFromFQDN(fqdn);\n-\t\t\t}\n-\t\t}\n \t\treturn hostName;\n \t}\n \n+\t/**\n+\t * Gets the IP address where the TaskManager operates.\n+\t *\n+\t * @return The IP address.\n+\t */\n \tpublic String getInetAdress() {\n \t\treturn this.inetAddress.toString();\n \t}\n@@ -166,7 +183,6 @@ public void read(DataInputView in) throws IOException {\n \t\t\n \t\tthis.fqdnHostName = StringUtils.readNullableString(in);\n \t\tthis.hostName = StringUtils.readNullableString(in);\n-\t\tthis.fqdnHostNameIsIP = in.readBoolean();\n \n \t\ttry {\n \t\t\tthis.inetAddress = InetAddress.getByAddress(address);\n@@ -185,7 +201,6 @@ public void write(final DataOutputView out) throws IOException {\n \t\t\n \t\tStringUtils.writeNullableString(fqdnHostName, out);\n \t\tStringUtils.writeNullableString(hostName, out);\n-\t\tout.writeBoolean(fqdnHostNameIsIP);\n \t}\n \n \t// --------------------------------------------------------------------------------------------\n", 
  "project": "flink", 
  "linesAdd": 43, 
  "jira_id": "1705", 
  "nb_skipped": 0, 
  "commit": "5308ac83", 
  "nb_failure": 1, 
  "linesRem": 28
}