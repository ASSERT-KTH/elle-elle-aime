{
  "files": 3, 
  "nb_test": 956, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.flink.types.parser.QuotedStringParserTest", 
    "org.apache.flink.api.common.io.GenericCsvInputFormatTest"
  ], 
  "patch": "diff --git a/flink-core/src/main/java/org/apache/flink/api/common/io/GenericCsvInputFormat.java b/flink-core/src/main/java/org/apache/flink/api/common/io/GenericCsvInputFormat.java\nindex b132ca2db0..8d979bb29c 100644\n--- a/flink-core/src/main/java/org/apache/flink/api/common/io/GenericCsvInputFormat.java\n+++ b/flink-core/src/main/java/org/apache/flink/api/common/io/GenericCsvInputFormat.java\n@@ -53,6 +53,8 @@\n \t\n \tprivate static final byte[] DEFAULT_FIELD_DELIMITER = new byte[] {','};\n \n+\tprivate static final byte BACKSLASH = 92;\n+\n \t// --------------------------------------------------------------------------------------------\n \t//  Variables for internal operation.\n \t//  They are all transient, because we do not want them so be serialized \n@@ -443,9 +445,10 @@ protected int skipFields(byte[] bytes, int startPos, int limit, byte[] delim) {\n \t\tif(quotedStringParsing == true && bytes[i] == quoteCharacter) {\n \n \t\t\t// quoted string parsing enabled and field is quoted\n-\t\t\t// search for ending quote character\n+\t\t\t// search for ending quote character, continue when it is escaped\n \t\t\ti++;\n-\t\t\twhile(i < limit && bytes[i] != quoteCharacter) {\n+\n+\t\t\twhile (i < limit && (bytes[i] != quoteCharacter || bytes[i-1] == BACKSLASH)){\n \t\t\t\ti++;\n \t\t\t}\n \t\t\ti++;\ndiff --git a/flink-core/src/main/java/org/apache/flink/types/parser/StringParser.java b/flink-core/src/main/java/org/apache/flink/types/parser/StringParser.java\nindex 27e49f5be7..47e4494830 100644\n--- a/flink-core/src/main/java/org/apache/flink/types/parser/StringParser.java\n+++ b/flink-core/src/main/java/org/apache/flink/types/parser/StringParser.java\n@@ -27,6 +27,7 @@\n \n \tprivate boolean quotedStringParsing = false;\n \tprivate byte quoteCharacter;\n+\tprivate static final byte BACKSLASH = 92;\n \n \tprivate String result;\n \n@@ -46,8 +47,8 @@ public int parseField(byte[] bytes, int startPos, int limit, byte[] delimiter, S\n \t\t\t// quoted string parsing enabled and first character Vis a quote\n \t\t\ti++;\n \n-\t\t\t// search for ending quote character\n-\t\t\twhile(i < limit && bytes[i] != quoteCharacter) {\n+\t\t\t// search for ending quote character, continue when it is escaped\n+\t\t\twhile (i < limit && (bytes[i] != quoteCharacter || bytes[i-1] == BACKSLASH)){\n \t\t\t\ti++;\n \t\t\t}\n \ndiff --git a/flink-core/src/main/java/org/apache/flink/types/parser/StringValueParser.java b/flink-core/src/main/java/org/apache/flink/types/parser/StringValueParser.java\nindex 086e3e497a..bcb1042d88 100644\n--- a/flink-core/src/main/java/org/apache/flink/types/parser/StringValueParser.java\n+++ b/flink-core/src/main/java/org/apache/flink/types/parser/StringValueParser.java\n@@ -31,6 +31,7 @@\n \n \tprivate boolean quotedStringParsing = false;\n \tprivate byte quoteCharacter;\n+\tprivate static final byte BACKSLASH = 92;\n \n \tprivate StringValue result;\n \n@@ -51,8 +52,8 @@ public int parseField(byte[] bytes, int startPos, int limit, byte[] delimiter, S\n \t\t\t// quoted string parsing enabled and first character is a quote\n \t\t\ti++;\n \n-\t\t\t// search for ending quote character\n-\t\t\twhile(i < limit && bytes[i] != quoteCharacter) {\n+\t\t\t// search for ending quote character, continue when it is escaped\n+\t\t\twhile (i < limit && (bytes[i] != quoteCharacter || bytes[i-1] == BACKSLASH)){\n \t\t\t\ti++;\n \t\t\t}\n \n", 
  "project": "flink", 
  "linesAdd": 11, 
  "jira_id": "2567", 
  "nb_skipped": 0, 
  "commit": "948b6e05", 
  "nb_failure": 6, 
  "linesRem": 6
}