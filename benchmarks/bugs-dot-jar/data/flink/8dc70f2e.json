{
  "files": 4, 
  "nb_test": 335, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.flink.optimizer.IterationsCompilerTest"
  ], 
  "patch": "diff --git a/flink-optimizer/src/main/java/org/apache/flink/optimizer/dag/BulkIterationNode.java b/flink-optimizer/src/main/java/org/apache/flink/optimizer/dag/BulkIterationNode.java\nindex 3d95c22f34..556e2e33c8 100644\n--- a/flink-optimizer/src/main/java/org/apache/flink/optimizer/dag/BulkIterationNode.java\n+++ b/flink-optimizer/src/main/java/org/apache/flink/optimizer/dag/BulkIterationNode.java\n@@ -28,7 +28,6 @@\n import org.apache.flink.api.common.operators.SemanticProperties;\n import org.apache.flink.api.common.operators.SemanticProperties.EmptySemanticProperties;\n import org.apache.flink.api.common.operators.base.BulkIterationBase;\n-import org.apache.flink.api.common.operators.util.FieldList;\n import org.apache.flink.optimizer.CompilerException;\n import org.apache.flink.optimizer.DataStatistics;\n import org.apache.flink.optimizer.traversals.InterestingPropertyVisitor;\n@@ -48,6 +47,7 @@\n import org.apache.flink.optimizer.plan.PlanNode;\n import org.apache.flink.optimizer.plan.SingleInputPlanNode;\n import org.apache.flink.optimizer.plan.PlanNode.FeedbackPropertiesMeetRequirementsReport;\n+import org.apache.flink.optimizer.util.NoOpUnaryUdfOp;\n import org.apache.flink.runtime.operators.DriverStrategy;\n import org.apache.flink.util.Visitor;\n \n@@ -273,7 +273,7 @@ public void computeUnclosedBranchStack() {\n \t\tthis.openBranches = (result == null || result.isEmpty()) ? Collections.<UnclosedBranchDescriptor>emptyList() : result;\n \t}\n \n-\n+\t@SuppressWarnings(\"unchecked\")\n \t@Override\n \tprotected void instantiateCandidate(OperatorDescriptorSingle dps, Channel in, List<Set<? extends NamedChannel>> broadcastPlanChannels, \n \t\t\tList<PlanNode> target, CostEstimator estimator, RequestedGlobalProperties globPropsReq, RequestedLocalProperties locPropsReq)\n@@ -322,7 +322,9 @@ else if (report == FeedbackPropertiesMeetRequirementsReport.NOT_MET) {\n \t\t\t\t\tglobPropsReq.parameterizeChannel(toNoOp, false, rootConnection.getDataExchangeMode(), false);\n \t\t\t\t\tlocPropsReq.parameterizeChannel(toNoOp);\n \n-\t\t\t\t\tUnaryOperatorNode rebuildPropertiesNode = new UnaryOperatorNode(\"Rebuild Partial Solution Properties\", FieldList.EMPTY_LIST);\n+\t\t\t\t\tNoOpUnaryUdfOp noOpUnaryUdfOp = new NoOpUnaryUdfOp<>();\n+\t\t\t\t\tnoOpUnaryUdfOp.setInput(candidate.getProgramOperator());\n+\t\t\t\t\tUnaryOperatorNode rebuildPropertiesNode = new UnaryOperatorNode(\"Rebuild Partial Solution Properties\", noOpUnaryUdfOp, true);\n \t\t\t\t\trebuildPropertiesNode.setParallelism(candidate.getParallelism());\n \t\t\t\t\t\n \t\t\t\t\tSingleInputPlanNode rebuildPropertiesPlanNode = new SingleInputPlanNode(rebuildPropertiesNode, \"Rebuild Partial Solution Properties\", toNoOp, DriverStrategy.UNARY_NO_OP);\n@@ -343,6 +345,8 @@ else if (report == FeedbackPropertiesMeetRequirementsReport.NOT_MET) {\n \t\t\t\t\tplanDeleter.remove();\n \t\t\t\t}\n \t\t\t}\n+\n+\t\t\tcandidates.addAll(newCandidates);\n \t\t}\n \n \t\tif (candidates.isEmpty()) {\ndiff --git a/flink-optimizer/src/main/java/org/apache/flink/optimizer/dag/UnaryOperatorNode.java b/flink-optimizer/src/main/java/org/apache/flink/optimizer/dag/UnaryOperatorNode.java\nindex 0c4803324f..0ec0264085 100644\n--- a/flink-optimizer/src/main/java/org/apache/flink/optimizer/dag/UnaryOperatorNode.java\n+++ b/flink-optimizer/src/main/java/org/apache/flink/optimizer/dag/UnaryOperatorNode.java\n@@ -18,10 +18,12 @@\n \n package org.apache.flink.optimizer.dag;\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n \n import org.apache.flink.api.common.operators.SemanticProperties;\n+import org.apache.flink.api.common.operators.SingleInputOperator;\n import org.apache.flink.api.common.operators.SingleInputSemanticProperties;\n import org.apache.flink.api.common.operators.util.FieldSet;\n import org.apache.flink.optimizer.DataStatistics;\n@@ -30,11 +32,17 @@\n \n public class UnaryOperatorNode extends SingleInputNode {\n \t\n-\tprivate final List<OperatorDescriptorSingle> operator;\n+\tprivate final List<OperatorDescriptorSingle> operators;\n \t\n \tprivate final String name;\n \n+\tpublic UnaryOperatorNode(String name, SingleInputOperator<?, ?, ?> operator, boolean onDynamicPath) {\n+\t\tsuper(operator);\n \n+\t\tthis.name = name;\n+\t\tthis.operators = new ArrayList<>();\n+\t\tthis.onDynamicPath = onDynamicPath;\n+\t}\n \t\n \tpublic UnaryOperatorNode(String name, FieldSet keys, OperatorDescriptorSingle ... operators) {\n \t\tthis(name, keys, Arrays.asList(operators));\n@@ -43,13 +51,13 @@ public UnaryOperatorNode(String name, FieldSet keys, OperatorDescriptorSingle ..\n \tpublic UnaryOperatorNode(String name, FieldSet keys, List<OperatorDescriptorSingle> operators) {\n \t\tsuper(keys);\n \t\t\n-\t\tthis.operator = operators;\n+\t\tthis.operators = operators;\n \t\tthis.name = name;\n \t}\n \n \t@Override\n \tprotected List<OperatorDescriptorSingle> getPossibleProperties() {\n-\t\treturn this.operator;\n+\t\treturn this.operators;\n \t}\n \n \t@Override\ndiff --git a/flink-optimizer/src/main/java/org/apache/flink/optimizer/dag/WorksetIterationNode.java b/flink-optimizer/src/main/java/org/apache/flink/optimizer/dag/WorksetIterationNode.java\nindex 15b9a50b41..7969a94c81 100644\n--- a/flink-optimizer/src/main/java/org/apache/flink/optimizer/dag/WorksetIterationNode.java\n+++ b/flink-optimizer/src/main/java/org/apache/flink/optimizer/dag/WorksetIterationNode.java\n@@ -52,6 +52,7 @@\n import org.apache.flink.optimizer.plan.WorksetPlanNode;\n import org.apache.flink.optimizer.plan.PlanNode.FeedbackPropertiesMeetRequirementsReport;\n import org.apache.flink.optimizer.util.NoOpBinaryUdfOp;\n+import org.apache.flink.optimizer.util.NoOpUnaryUdfOp;\n import org.apache.flink.runtime.operators.DriverStrategy;\n import org.apache.flink.runtime.operators.shipping.ShipStrategyType;\n import org.apache.flink.runtime.operators.util.LocalStrategy;\n@@ -308,6 +309,7 @@ public void clearInterestingProperties() {\n \t\tthis.solutionSetDelta.accept(InterestingPropertiesClearer.INSTANCE);\n \t}\n \n+\t@SuppressWarnings(\"unchecked\")\n \t@Override\n \tprotected void instantiate(OperatorDescriptorDual operator, Channel solutionSetIn, Channel worksetIn,\n \t\t\tList<Set<? extends NamedChannel>> broadcastPlanChannels, List<PlanNode> target, CostEstimator estimator,\n@@ -368,8 +370,13 @@ else if (report == FeedbackPropertiesMeetRequirementsReport.NOT_MET) {\n \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnextWorksetRootConnection.getDataExchangeMode(), false);\n \t\t\t\t\tlocPropsReqWorkset.parameterizeChannel(toNoOp);\n \n-\t\t\t\t\tUnaryOperatorNode rebuildWorksetPropertiesNode = new UnaryOperatorNode(\"Rebuild Workset Properties\",\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tFieldList.EMPTY_LIST);\n+\t\t\t\t\tNoOpUnaryUdfOp noOpUnaryUdfOp = new NoOpUnaryUdfOp<>();\n+\t\t\t\t\tnoOpUnaryUdfOp.setInput(candidate.getProgramOperator());\n+\n+\t\t\t\t\tUnaryOperatorNode rebuildWorksetPropertiesNode = new UnaryOperatorNode(\n+\t\t\t\t\t\t\"Rebuild Workset Properties\",\n+\t\t\t\t\t\tnoOpUnaryUdfOp,\n+\t\t\t\t\t\ttrue);\n \t\t\t\t\t\n \t\t\t\t\trebuildWorksetPropertiesNode.setParallelism(candidate.getParallelism());\n \t\t\t\t\t\ndiff --git a/flink-optimizer/src/main/java/org/apache/flink/optimizer/util/NoOpUnaryUdfOp.java b/flink-optimizer/src/main/java/org/apache/flink/optimizer/util/NoOpUnaryUdfOp.java\nindex cc4a4d655c..8537b9c164 100644\n--- a/flink-optimizer/src/main/java/org/apache/flink/optimizer/util/NoOpUnaryUdfOp.java\n+++ b/flink-optimizer/src/main/java/org/apache/flink/optimizer/util/NoOpUnaryUdfOp.java\n@@ -36,7 +36,7 @@\n \t@SuppressWarnings(\"rawtypes\")\n \tpublic static final NoOpUnaryUdfOp INSTANCE = new NoOpUnaryUdfOp();\n \t\n-\tprivate NoOpUnaryUdfOp() {\n+\tpublic NoOpUnaryUdfOp() {\n \t\t// pass null here because we override getOutputType to return type\n \t\t// of input operator\n \t\tsuper(new UserCodeClassWrapper<NoOpFunction>(NoOpFunction.class), null, \"\");\n", 
  "project": "flink", 
  "linesAdd": 28, 
  "jira_id": "3052", 
  "nb_skipped": 0, 
  "commit": "8dc70f2e", 
  "nb_failure": 2, 
  "linesRem": 9
}