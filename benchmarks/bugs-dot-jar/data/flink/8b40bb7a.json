{
  "files": 3, 
  "nb_test": 275, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.flink.streaming.util.keys.ArrayKeySelectorTest"
  ], 
  "patch": "diff --git a/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/KeyedDataStream.java b/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/KeyedDataStream.java\nindex 7628815150..100e5de264 100644\n--- a/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/KeyedDataStream.java\n+++ b/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/datastream/KeyedDataStream.java\n@@ -35,7 +35,8 @@\n  * @param <T> The type of the elements in the Keyed Stream\n  */\n public class KeyedDataStream<T> extends DataStream<T> {\n-\tKeySelector<T, ?> keySelector;\n+\t\n+\tprotected final KeySelector<T, ?> keySelector;\n \n \t/**\n \t * Creates a new {@link KeyedDataStream} using the given {@link KeySelector}\ndiff --git a/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/StreamExecutionEnvironment.java b/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/StreamExecutionEnvironment.java\nindex c50f23e917..d91afc9add 100644\n--- a/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/StreamExecutionEnvironment.java\n+++ b/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/environment/StreamExecutionEnvironment.java\n@@ -1228,8 +1228,7 @@ public static LocalStreamEnvironment createLocalEnvironment(int parallelism, Con\n \t */\n \tpublic static StreamExecutionEnvironment createRemoteEnvironment(String host, int port,\n \t\t\tString... jarFiles) {\n-\t\tRemoteStreamEnvironment env = new RemoteStreamEnvironment(host, port, jarFiles);\n-\t\treturn env;\n+\t\treturn new RemoteStreamEnvironment(host, port, jarFiles);\n \t}\n \n \t/**\n@@ -1298,8 +1297,7 @@ public StreamGraph getStreamGraph() {\n \t\tif (transformations.size() <= 0) {\n \t\t\tthrow new IllegalStateException(\"No operators defined in streaming topology. Cannot execute.\");\n \t\t}\n-\t\tStreamGraph result = StreamGraphGenerator.generate(this, transformations);\n-\t\treturn result;\n+\t\treturn StreamGraphGenerator.generate(this, transformations);\n \t}\n \n \t/**\ndiff --git a/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/util/keys/KeySelectorUtil.java b/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/util/keys/KeySelectorUtil.java\nindex 89c6142232..cd325484ae 100644\n--- a/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/util/keys/KeySelectorUtil.java\n+++ b/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/util/keys/KeySelectorUtil.java\n@@ -27,41 +27,9 @@\n import org.apache.flink.api.java.functions.KeySelector;\n import org.apache.flink.api.java.operators.Keys;\n import org.apache.flink.api.java.tuple.Tuple;\n-import org.apache.flink.api.java.tuple.Tuple1;\n-import org.apache.flink.api.java.tuple.Tuple10;\n-import org.apache.flink.api.java.tuple.Tuple11;\n-import org.apache.flink.api.java.tuple.Tuple12;\n-import org.apache.flink.api.java.tuple.Tuple13;\n-import org.apache.flink.api.java.tuple.Tuple14;\n-import org.apache.flink.api.java.tuple.Tuple15;\n-import org.apache.flink.api.java.tuple.Tuple16;\n-import org.apache.flink.api.java.tuple.Tuple17;\n-import org.apache.flink.api.java.tuple.Tuple18;\n-import org.apache.flink.api.java.tuple.Tuple19;\n-import org.apache.flink.api.java.tuple.Tuple2;\n-import org.apache.flink.api.java.tuple.Tuple20;\n-import org.apache.flink.api.java.tuple.Tuple21;\n-import org.apache.flink.api.java.tuple.Tuple22;\n-import org.apache.flink.api.java.tuple.Tuple23;\n-import org.apache.flink.api.java.tuple.Tuple24;\n-import org.apache.flink.api.java.tuple.Tuple25;\n-import org.apache.flink.api.java.tuple.Tuple3;\n-import org.apache.flink.api.java.tuple.Tuple4;\n-import org.apache.flink.api.java.tuple.Tuple5;\n-import org.apache.flink.api.java.tuple.Tuple6;\n-import org.apache.flink.api.java.tuple.Tuple7;\n-import org.apache.flink.api.java.tuple.Tuple8;\n-import org.apache.flink.api.java.tuple.Tuple9;\n \n public class KeySelectorUtil {\n \n-\tpublic static Class<?>[] tupleClasses = new Class[] { Tuple1.class, Tuple2.class, Tuple3.class,\n-\t\t\tTuple4.class, Tuple5.class, Tuple6.class, Tuple7.class, Tuple8.class, Tuple9.class,\n-\t\t\tTuple10.class, Tuple11.class, Tuple12.class, Tuple13.class, Tuple14.class,\n-\t\t\tTuple15.class, Tuple16.class, Tuple17.class, Tuple18.class, Tuple19.class,\n-\t\t\tTuple20.class, Tuple21.class, Tuple22.class, Tuple23.class, Tuple24.class,\n-\t\t\tTuple25.class };\n-\n \tpublic static <X> KeySelector<X, ?> getSelectorForKeys(Keys<X> keys, TypeInformation<X> typeInfo, ExecutionConfig executionConfig) {\n \t\tint[] logicalKeyPositions = keys.computeLogicalKeyPositions();\n \t\tint keyLength = logicalKeyPositions.length;\n@@ -129,7 +97,7 @@ public ComparableKeySelector(TypeComparator<IN> comparator, int keyLength) {\n \n \t\t@Override\n \t\tpublic Tuple getKey(IN value) throws Exception {\n-\t\t\tkey = (Tuple) tupleClasses[keyLength - 1].newInstance();\n+\t\t\tkey = Tuple.getTupleClass(keyLength).newInstance();\n \t\t\tcomparator.extractKeys(value, keyArray, 0);\n \t\t\tfor (int i = 0; i < keyLength; i++) {\n \t\t\t\tkey.setField(keyArray[i], i);\n@@ -139,12 +107,11 @@ public Tuple getKey(IN value) throws Exception {\n \n \t}\n \n-\tpublic static class ArrayKeySelector<IN> implements KeySelector<IN, Tuple> {\n+\tpublic static final class ArrayKeySelector<IN> implements KeySelector<IN, Tuple> {\n \n \t\tprivate static final long serialVersionUID = 1L;\n \t\t\n-\t\tTuple key;\n-\t\tint[] fields;\n+\t\tprivate final int[] fields;\n \n \t\tpublic ArrayKeySelector(int... fields) {\n \t\t\tthis.fields = fields;\n@@ -152,10 +119,9 @@ public ArrayKeySelector(int... fields) {\n \n \t\t@Override\n \t\tpublic Tuple getKey(IN value) throws Exception {\n-\t\t\tkey = (Tuple) tupleClasses[fields.length - 1].newInstance();\n+\t\t\tTuple key = Tuple.getTupleClass(fields.length).newInstance();\n \t\t\tfor (int i = 0; i < fields.length; i++) {\n-\t\t\t\tint pos = fields[i];\n-\t\t\t\tkey.setField(Array.get(value, fields[pos]), i);\n+\t\t\t\tkey.setField(Array.get(value, fields[i]), i);\n \t\t\t}\n \t\t\treturn key;\n \t\t}\n", 
  "project": "flink", 
  "linesAdd": 9, 
  "jira_id": "2734", 
  "nb_skipped": 1, 
  "commit": "8b40bb7a", 
  "nb_failure": 2, 
  "linesRem": 44
}