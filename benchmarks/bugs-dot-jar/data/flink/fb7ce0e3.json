{
  "files": 1, 
  "nb_test": 738, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "typeutils.runtime.PojoSerializerTest"
  ], 
  "patch": "diff --git a/flink-java/src/main/java/org/apache/flink/api/java/typeutils/runtime/PojoSerializer.java b/flink-java/src/main/java/org/apache/flink/api/java/typeutils/runtime/PojoSerializer.java\nindex 99b9f65512..1e58b9ddcf 100644\n--- a/flink-java/src/main/java/org/apache/flink/api/java/typeutils/runtime/PojoSerializer.java\n+++ b/flink-java/src/main/java/org/apache/flink/api/java/typeutils/runtime/PojoSerializer.java\n@@ -142,9 +142,15 @@ public T copy(T from) {\n \t\t\n \t\ttry {\n \t\t\tfor (int i = 0; i < numFields; i++) {\n-\t\t\t\tObject copy = fieldSerializers[i].copy(fields[i].get(from));\n+\t\t\t\tObject value = fields[i].get(from);\n+\t\t\t\tif (value != null) {\n+\t\t\t\t\tObject copy = fieldSerializers[i].copy(value);\n \t\t\t\t\tfields[i].set(target, copy);\n \t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tfields[i].set(target, null);\n+\t\t\t\t}\n+\t\t\t}\n \t\t}\n \t\tcatch (IllegalAccessException e) {\n \t\t\tthrow new RuntimeException(\"Error during POJO copy, this should not happen since we check the fields before.\");\n@@ -156,9 +162,15 @@ public T copy(T from) {\n \tpublic T copy(T from, T reuse) {\n \t\ttry {\n \t\t\tfor (int i = 0; i < numFields; i++) {\n+\t\t\t\tObject value = fields[i].get(from);\n+\t\t\t\tif (value != null) {\n \t\t\t\t\tObject copy = fieldSerializers[i].copy(fields[i].get(from), fields[i].get(reuse));\n \t\t\t\t\tfields[i].set(reuse, copy);\n \t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tfields[i].set(reuse, null);\n+\t\t\t\t}\n+\t\t\t}\n \t\t} catch (IllegalAccessException e) {\n \t\t\tthrow new RuntimeException(\"Error during POJO copy, this should not happen since we check the fields\" +\n \t\t\t\t\t\"before.\");\n@@ -257,10 +269,13 @@ public void copy(DataInputView source, DataOutputView target) throws IOException\n \t\t// copy the Non-Null/Null tag\n \t\ttarget.writeBoolean(source.readBoolean());\n \t\tfor (int i = 0; i < numFields; i++) {\n-\t\t\ttarget.writeBoolean(source.readBoolean());\n+\t\t\tboolean isNull = source.readBoolean();\n+\t\t\ttarget.writeBoolean(isNull);\n+\t\t\tif (!isNull) {\n \t\t\t\tfieldSerializers[i].copy(source, target);\n \t\t\t}\n \t\t}\n+\t}\n \t\n \t@Override\n \tpublic int hashCode() {\n", 
  "project": "flink", 
  "linesAdd": 17, 
  "jira_id": "1437", 
  "nb_skipped": 0, 
  "commit": "fb7ce0e3", 
  "nb_failure": 5, 
  "linesRem": 2
}