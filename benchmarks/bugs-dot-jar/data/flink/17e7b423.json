{
  "files": 1, 
  "nb_test": 1062, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "typeutils.PojoTypeInfoTest"
  ], 
  "patch": "diff --git a/flink-java/src/main/java/org/apache/flink/api/java/typeutils/TypeExtractor.java b/flink-java/src/main/java/org/apache/flink/api/java/typeutils/TypeExtractor.java\nindex 1dec90b740..0281da670a 100644\n--- a/flink-java/src/main/java/org/apache/flink/api/java/typeutils/TypeExtractor.java\n+++ b/flink-java/src/main/java/org/apache/flink/api/java/typeutils/TypeExtractor.java\n@@ -30,6 +30,7 @@\n import java.util.List;\n \n import org.apache.avro.specific.SpecificRecordBase;\n+import org.apache.commons.lang3.ClassUtils;\n import org.apache.flink.api.common.functions.CoGroupFunction;\n import org.apache.flink.api.common.functions.CrossFunction;\n import org.apache.flink.api.common.functions.FlatJoinFunction;\n@@ -1299,22 +1300,26 @@ private boolean isValidPojoField(Field f, Class<?> clazz, ArrayList<Type> typeHi\n \t\t\treturn true;\n \t\t} else {\n \t\t\tboolean hasGetter = false, hasSetter = false;\n-\t\t\tfinal String fieldNameLow = f.getName().toLowerCase();\n+\t\t\tfinal String fieldNameLow = f.getName().toLowerCase().replaceAll(\"_\", \"\");\n \n \t\t\tType fieldType = f.getGenericType();\n+\t\t\tClass<?> fieldTypeWrapper = ClassUtils.primitiveToWrapper(f.getType());\n+\n \t\t\tTypeVariable<?> fieldTypeGeneric = null;\n \t\t\tif(fieldType instanceof TypeVariable) {\n \t\t\t\tfieldTypeGeneric = (TypeVariable<?>) fieldType;\n \t\t\t\tfieldType = materializeTypeVariable(typeHierarchy, (TypeVariable<?>)fieldType);\n \t\t\t}\n \t\t\tfor(Method m : clazz.getMethods()) {\n+\t\t\t\tfinal String methodNameLow = m.getName().toLowerCase().replaceAll(\"_\", \"\");\n+\n \t\t\t\t// check for getter\n \t\t\t\tif(\t// The name should be \"get<FieldName>\" or \"<fieldName>\" (for scala) or \"is<fieldName>\" for boolean fields.\n-\t\t\t\t\t(m.getName().toLowerCase().equals(\"get\"+fieldNameLow) || m.getName().toLowerCase().equals(\"is\"+fieldNameLow) || m.getName().toLowerCase().equals(fieldNameLow)) &&\n+\t\t\t\t\t(methodNameLow.equals(\"get\"+fieldNameLow) || methodNameLow.equals(\"is\"+fieldNameLow) || methodNameLow.equals(fieldNameLow)) &&\n \t\t\t\t\t// no arguments for the getter\n \t\t\t\t\tm.getParameterTypes().length == 0 &&\n \t\t\t\t\t// return type is same as field type (or the generic variant of it)\n-\t\t\t\t\t(m.getGenericReturnType().equals( fieldType ) || (fieldTypeGeneric != null && m.getGenericReturnType().equals(fieldTypeGeneric)) )\n+\t\t\t\t\t(m.getGenericReturnType().equals( fieldType ) || (fieldTypeWrapper != null && m.getReturnType().equals( fieldTypeWrapper )) || (fieldTypeGeneric != null && m.getGenericReturnType().equals(fieldTypeGeneric)) )\n \t\t\t\t) {\n \t\t\t\t\tif(hasGetter) {\n \t\t\t\t\t\tthrow new IllegalStateException(\"Detected more than one getter\");\n@@ -1322,9 +1327,9 @@ private boolean isValidPojoField(Field f, Class<?> clazz, ArrayList<Type> typeHi\n \t\t\t\t\thasGetter = true;\n \t\t\t\t}\n \t\t\t\t// check for setters (<FieldName>_$eq for scala)\n-\t\t\t\tif((m.getName().toLowerCase().equals(\"set\"+fieldNameLow) || m.getName().toLowerCase().equals(fieldNameLow+\"_$eq\")) &&\n+\t\t\t\tif((methodNameLow.equals(\"set\"+fieldNameLow) || methodNameLow.equals(fieldNameLow+\"_$eq\")) &&\n \t\t\t\t\tm.getParameterTypes().length == 1 && // one parameter of the field's type\n-\t\t\t\t\t( m.getGenericParameterTypes()[0].equals( fieldType ) || (fieldTypeGeneric != null && m.getGenericParameterTypes()[0].equals(fieldTypeGeneric) ) )&&\n+\t\t\t\t\t(m.getGenericParameterTypes()[0].equals( fieldType ) || (fieldTypeWrapper != null && m.getParameterTypes()[0].equals( fieldTypeWrapper )) || (fieldTypeGeneric != null && m.getGenericParameterTypes()[0].equals(fieldTypeGeneric) ) )&&\n \t\t\t\t\t// return type is void.\n \t\t\t\t\tm.getReturnType().equals(Void.TYPE)\n \t\t\t\t) {\n", 
  "project": "flink", 
  "linesAdd": 10, 
  "jira_id": "2874", 
  "nb_skipped": 0, 
  "commit": "17e7b423", 
  "nb_failure": 2, 
  "linesRem": 5
}