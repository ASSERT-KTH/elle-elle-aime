{
  "files": 2, 
  "nb_test": 150, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.flink.streaming.api.ChainedRuntimeContextTest"
  ], 
  "patch": "diff --git a/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/runtime/tasks/OutputHandler.java b/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/runtime/tasks/OutputHandler.java\nindex c953a9456d..38f12313b1 100644\n--- a/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/runtime/tasks/OutputHandler.java\n+++ b/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/runtime/tasks/OutputHandler.java\n@@ -150,7 +150,11 @@ public void broadcastBarrier(long id, long timestamp) throws IOException, Interr\n \t\t\t// operator which will be returned and set it up using the wrapper\n \t\t\tOneInputStreamOperator chainableOperator =\n \t\t\t\t\tchainedTaskConfig.getStreamOperator(vertex.getUserCodeClassLoader());\n-\t\t\tchainableOperator.setup(wrapper, vertex.context);\n+\t\t\t\n+\t\t\tStreamingRuntimeContext chainedContext = vertex.createRuntimeContext(chainedTaskConfig);\n+\t\t\tvertex.contexts.add(chainedContext);\n+\t\t\t\n+\t\t\tchainableOperator.setup(wrapper, chainedContext);\n \n \t\t\tchainedOperators.add(chainableOperator);\n \t\t\treturn new OperatorCollector<X>(chainableOperator);\ndiff --git a/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java b/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java\nindex d6789229ae..1a3d44fa65 100644\n--- a/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java\n+++ b/flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java\n@@ -62,7 +62,7 @@\n \n \tprotected volatile boolean isRunning = false;\n \n-\tprotected StreamingRuntimeContext context;\n+\tprotected List<StreamingRuntimeContext> contexts;\n \n \tprotected ClassLoader userClassLoader;\n \t\n@@ -73,21 +73,26 @@\n \tpublic StreamTask() {\n \t\tstreamOperator = null;\n \t\tsuperstepListener = new SuperstepEventListener();\n+\t\tcontexts = new ArrayList<StreamingRuntimeContext>();\n \t}\n \n \t@Override\n \tpublic void registerInputOutput() {\n \t\tthis.userClassLoader = getUserCodeClassLoader();\n \t\tthis.configuration = new StreamConfig(getTaskConfiguration());\n-\t\tthis.context = createRuntimeContext(getEnvironment().getTaskName());\n \t\tthis.stateHandleProvider = getStateHandleProvider();\n \n \t\toutputHandler = new OutputHandler<OUT>(this);\n \n \t\tstreamOperator = configuration.getStreamOperator(userClassLoader);\n+\t\t\n \t\tif (streamOperator != null) {\n+\t\t\t//Create context of the head operator\n+\t\t\tStreamingRuntimeContext headContext = createRuntimeContext(configuration);\n+\t\t\tthis.contexts.add(headContext);\n+\n \t\t\t// IterationHead and IterationTail don't have an Operator...\n-\t\t\tstreamOperator.setup(outputHandler.getOutput(), this.context);\n+\t\t\tstreamOperator.setup(outputHandler.getOutput(), headContext);\n \t\t}\n \n \t\thasChainedOperators = !outputHandler.getChainedOperators().isEmpty();\n@@ -97,10 +102,10 @@ public String getName() {\n \t\treturn getEnvironment().getTaskName();\n \t}\n \n-\tpublic StreamingRuntimeContext createRuntimeContext(String taskName) {\n+\tpublic StreamingRuntimeContext createRuntimeContext(StreamConfig conf) {\n \t\tEnvironment env = getEnvironment();\n-\t\treturn new StreamingRuntimeContext(taskName, env, getUserCodeClassLoader(),\n-\t\t\t\tgetExecutionConfig());\n+\t\treturn new StreamingRuntimeContext(conf.getStreamOperator(userClassLoader).getClass()\n+\t\t\t\t.getSimpleName(), env, getUserCodeClassLoader(), getExecutionConfig());\n \t}\n \t\n \tprivate StateHandleProvider<Serializable> getStateHandleProvider() {\n", 
  "project": "flink", 
  "linesAdd": 16, 
  "jira_id": "2082", 
  "nb_skipped": 1, 
  "commit": "0cfa43d7", 
  "nb_failure": 1, 
  "linesRem": 7
}