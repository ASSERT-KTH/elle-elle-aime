{
  "files": 3, 
  "nb_test": 660, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManagerHeaderFooterTest"
  ], 
  "patch": "diff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java\nindex 246abba57..006558549 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/OutputStreamManager.java\n@@ -28,8 +28,7 @@\n public class OutputStreamManager extends AbstractManager {\n \n     private volatile OutputStream os;\n-\n-    private final Layout<?> layout;\n+    protected final Layout<?> layout;\n \n     protected OutputStreamManager(final OutputStream os, final String streamName, final Layout<?> layout) {\n         super(streamName);\n@@ -66,11 +65,21 @@ protected OutputStreamManager(final OutputStream os, final String streamName, fi\n      */\n     @Override\n     public void releaseSub() {\n+        writeFooter();\n+        close();\n+    }\n+\n+    /**\n+     * Writes the footer.\n+     */\n+    protected void writeFooter() {\n+        if (layout == null) {\n+            return;\n+        }\n         byte[] footer = layout.getFooter();\n         if (footer != null) {\n             write(footer);\n         }\n-        close();\n     }\n \n     /**\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java\nindex c58b18cb3..318470219 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingFileManager.java\n@@ -167,6 +167,7 @@ private boolean rollover(final RolloverStrategy strategy) {\n         try {\n             final RolloverDescription descriptor = strategy.rollover(this);\n             if (descriptor != null) {\n+                writeFooter();\n                 close();\n                 if (descriptor.getSynchronous() != null) {\n                     LOGGER.debug(\"RollingFileManager executing synchronous {}\", descriptor.getSynchronous());\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java\nindex cc63bfe5a..992ab0962 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager.java\n@@ -55,6 +55,26 @@ public RollingRandomAccessFileManager(final RandomAccessFile raf, final String f\n         this.randomAccessFile = raf;\n         isEndOfBatch.set(Boolean.FALSE);\n         this.buffer = ByteBuffer.allocate(bufferSize);\n+        writeHeader();\n+    }\n+\n+    /**\n+     * Writes the layout's header to the file if it exists.\n+     */\n+    private void writeHeader() {\n+        if (layout == null) {\n+            return;\n+        }\n+        byte[] header = layout.getHeader();\n+        if (header == null) {\n+            return;\n+        }\n+        try {\n+            // write to the file, not to the buffer: the buffer may not be empty\n+            randomAccessFile.write(header, 0, header.length);\n+        } catch (final IOException ioe) {\n+            LOGGER.error(\"Unable to write header\", ioe);\n+        }\n     }\n \n     public static RollingRandomAccessFileManager getRollingRandomAccessFileManager(final String fileName,\n@@ -99,6 +119,7 @@ protected void createFileAfterRollover() throws IOException {\n         if (isAppend()) {\n             randomAccessFile.seek(randomAccessFile.length());\n         }\n+        writeHeader();\n     }\n \n     @Override\n", 
  "project": "logging-log4j2", 
  "linesAdd": 34, 
  "jira_id": "581", 
  "nb_skipped": 2, 
  "commit": "bb02fa15", 
  "nb_failure": 1, 
  "linesRem": 3
}