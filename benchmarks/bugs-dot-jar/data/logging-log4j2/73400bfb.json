{
  "files": 2, 
  "nb_test": 14, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.logging.log4j.LoggerTest"
  ], 
  "patch": "diff --git a/log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java b/log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java\nindex 5d376294b..e5b2e1fd5 100644\n--- a/log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java\n+++ b/log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jLogger.java\n@@ -29,6 +29,7 @@\n import org.apache.logging.log4j.spi.ExtendedLogger;\n import org.slf4j.Marker;\n import org.slf4j.MarkerFactory;\n+import org.slf4j.impl.StaticMarkerBinder;\n import org.slf4j.spi.LocationAwareLogger;\n \n /**\n@@ -375,7 +376,14 @@ public void log(final Marker marker, final String fqcn, final int level, final S\n     }\n \n     private static org.apache.logging.log4j.Marker getMarker(final Marker marker) {\n-        return marker != null ? ((org.apache.logging.slf4j.Log4jMarker) marker).getLog4jMarker() : null;\n+        if (marker == null) {\n+            return null;\n+        } else if (marker instanceof Log4jMarker) {\n+            return ((Log4jMarker) marker).getLog4jMarker();\n+        } else {\n+            final Log4jMarkerFactory factory = (Log4jMarkerFactory) StaticMarkerBinder.SINGLETON.getMarkerFactory();\n+            return ((Log4jMarker) factory.getMarker(marker)).getLog4jMarker();\n+        }\n     }\n \n     @Override\ndiff --git a/log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jMarkerFactory.java b/log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jMarkerFactory.java\nindex 4efd4d173..4183f2cd9 100644\n--- a/log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jMarkerFactory.java\n+++ b/log4j-slf4j-impl/src/main/java/org/apache/logging/slf4j/Log4jMarkerFactory.java\n@@ -16,6 +16,7 @@\n  */\n package org.apache.logging.slf4j;\n \n+import java.util.Iterator;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n@@ -24,14 +25,14 @@\n import org.slf4j.Marker;\n \n /**\n- *\n+ * Log4j/SLF4J bridge to create SLF4J Markers based on name or based on existing SLF4J Markers.\n  */\n public class Log4jMarkerFactory implements IMarkerFactory {\n \n     private final ConcurrentMap<String, Marker> markerMap = new ConcurrentHashMap<String, Marker>();\n \n     /**\n-     * Return a Log4j Marker that is compatible with SLF4J.\n+     * Returns a Log4j Marker that is compatible with SLF4J.\n      * @param name The name of the Marker.\n      * @return A Marker.\n      */\n@@ -45,11 +46,48 @@ public Marker getMarker(final String name) {\n             return marker;\n         }\n         final org.apache.logging.log4j.Marker log4jMarker = MarkerManager.getMarker(name);\n-        marker = new Log4jMarker(log4jMarker);\n+        return addMarkerIfAbsent(name, log4jMarker);\n+    }\n+\n+    private Marker addMarkerIfAbsent(final String name, final org.apache.logging.log4j.Marker log4jMarker) {\n+        final Marker marker = new Log4jMarker(log4jMarker);\n         final Marker existing = markerMap.putIfAbsent(name, marker);\n         return existing == null ? marker : existing;\n     }\n \n+    /**\n+     * Returns a Log4j Marker converted from an existing custom SLF4J Marker.\n+     * @param marker The SLF4J Marker to convert.\n+     * @return A converted Log4j/SLF4J Marker.\n+     * @since 2.1\n+     */\n+    public Marker getMarker(final Marker marker) {\n+        if (marker == null) {\n+            throw new IllegalArgumentException(\"Marker must not be null\");\n+        }\n+        Marker m = markerMap.get(marker.getName());\n+        if (m != null) {\n+            return m;\n+        }\n+        return addMarkerIfAbsent(marker.getName(), convertMarker(marker));\n+    }\n+\n+    private static org.apache.logging.log4j.Marker convertMarker(final Marker original) {\n+        if (original == null) {\n+            throw new IllegalArgumentException(\"Marker must not be null\");\n+        }\n+        final org.apache.logging.log4j.Marker marker = MarkerManager.getMarker(original.getName());\n+        if (original.hasReferences()) {\n+            final Iterator it = original.iterator();\n+            while (it.hasNext()) {\n+                final Marker next = (Marker) it.next();\n+                // kind of hope nobody uses cycles in their Markers. I mean, why would you do that?\n+                marker.addParents(convertMarker(next));\n+            }\n+        }\n+        return marker;\n+    }\n+\n     /**\n      * Returns true if the Marker exists.\n      * @param name The Marker name.\n", 
  "project": "logging-log4j2", 
  "linesAdd": 50, 
  "jira_id": "793", 
  "nb_skipped": 0, 
  "commit": "73400bfb", 
  "nb_failure": 0, 
  "linesRem": 4
}