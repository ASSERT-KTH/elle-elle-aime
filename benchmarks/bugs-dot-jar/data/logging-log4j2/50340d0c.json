{
  "files": 5, 
  "nb_test": 515, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.logging.log4j.core.HostNameTest"
  ], 
  "patch": "diff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java\nindex 0759bc450..a8af6aec9 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java\n@@ -334,10 +334,9 @@ private synchronized Configuration setConfiguration(final Configuration config)\n         }\n         final Configuration prev = this.config;\n         config.addListener(this);\n-        final Map<String, String> map = new HashMap<String, String>();\n-        map.put(\"hostName\", NetUtils.getLocalHostname());\n-        map.put(\"contextName\", name);\n-        config.addComponent(Configuration.CONTEXT_PROPERTIES, map);\n+        final ConcurrentMap<String, String> map = config.getComponent(Configuration.CONTEXT_PROPERTIES);\n+        map.putIfAbsent(\"hostName\", NetUtils.getLocalHostname());\n+        map.putIfAbsent(\"contextName\", name);\n         config.start();\n         this.config = config;\n         updateLoggers();\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/config/BaseConfiguration.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/config/BaseConfiguration.java\nindex 2b5c41f26..986d2b921 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/config/BaseConfiguration.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/config/BaseConfiguration.java\n@@ -104,7 +104,9 @@\n \n     private ConcurrentMap<String, LoggerConfig> loggers = new ConcurrentHashMap<String, LoggerConfig>();\n \n-    private final StrLookup tempLookup = new Interpolator();\n+    private ConcurrentMap<String, String> properties = new ConcurrentHashMap<String, String>();\n+\n+    private final StrLookup tempLookup = new Interpolator(properties);\n \n     private final StrSubstitutor subst = new StrSubstitutor(tempLookup);\n \n@@ -120,6 +122,7 @@\n      * Constructor.\n      */\n     protected BaseConfiguration() {\n+        componentMap.put(Configuration.CONTEXT_PROPERTIES, properties);\n         pluginManager = new PluginManager(\"Core\");\n         rootNode = new Node();\n     }\n@@ -127,7 +130,7 @@ protected BaseConfiguration() {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public Map<String, String> getProperties() {\n-        return (Map<String, String>) componentMap.get(CONTEXT_PROPERTIES);\n+        return properties;\n     }\n \n     /**\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/PropertiesPlugin.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/PropertiesPlugin.java\nindex b804d4515..6c5c3f3a7 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/PropertiesPlugin.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/config/plugins/PropertiesPlugin.java\n@@ -44,7 +44,7 @@ private PropertiesPlugin() {\n     public static StrLookup configureSubstitutor(@PluginElement(\"Properties\") final Property[] properties,\n                                                  @PluginConfiguration final Configuration config) {\n         if (properties == null) {\n-            return new Interpolator(null);\n+            return new Interpolator(config.getProperties());\n         }\n         final Map<String, String> map = new HashMap<String, String>(config.getProperties());\n \ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java\nindex bf463de8c..a768f4e7d 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java\n@@ -60,7 +60,14 @@ public Interpolator(final StrLookup defaultLookup) {\n      * Create the default Interpolator using only Lookups that work without an event.\n      */\n     public Interpolator() {\n-        this.defaultLookup = new MapLookup(new HashMap<String, String>());\n+        this((Map<String, String>) null);\n+    }\n+\n+    /**\n+     * Create the dInterpolator using only Lookups that work without an event and initial properties.\n+     */\n+    public Interpolator(Map<String, String> properties) {\n+        this.defaultLookup = new MapLookup(properties == null ? new HashMap<String, String>() : properties);\n         lookups.put(\"sys\", new SystemPropertiesLookup());\n         lookups.put(\"env\", new EnvironmentLookup());\n         lookups.put(\"jndi\", new JndiLookup());\ndiff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/web/Log4jWebInitializerImpl.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/web/Log4jWebInitializerImpl.java\nindex 7d14a1406..78708dce8 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/web/Log4jWebInitializerImpl.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/web/Log4jWebInitializerImpl.java\n@@ -17,12 +17,15 @@\n package org.apache.logging.log4j.core.web;\n \n import java.net.URI;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n import javax.servlet.ServletContext;\n import javax.servlet.UnavailableException;\n \n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.core.LoggerContext;\n import org.apache.logging.log4j.core.config.Configurator;\n+import org.apache.logging.log4j.core.helpers.NetUtils;\n import org.apache.logging.log4j.core.impl.ContextAnchor;\n import org.apache.logging.log4j.core.impl.Log4jContextFactory;\n import org.apache.logging.log4j.core.lookup.Interpolator;\n@@ -48,7 +51,8 @@\n         }\n     }\n \n-    private final StrSubstitutor substitutor = new StrSubstitutor(new Interpolator());\n+    private final Map<String, String> map = new ConcurrentHashMap<String, String>();\n+    private final StrSubstitutor substitutor = new StrSubstitutor(new Interpolator(map));\n     private final ServletContext servletContext;\n \n     private String name;\n@@ -60,6 +64,7 @@\n \n     private Log4jWebInitializerImpl(final ServletContext servletContext) {\n         this.servletContext = servletContext;\n+        map.put(\"hostName\", NetUtils.getLocalHostname());\n     }\n \n     @Override\n", 
  "project": "logging-log4j2", 
  "linesAdd": 23, 
  "jira_id": "470", 
  "nb_skipped": 1, 
  "commit": "50340d0c", 
  "nb_failure": 1, 
  "linesRem": 9
}