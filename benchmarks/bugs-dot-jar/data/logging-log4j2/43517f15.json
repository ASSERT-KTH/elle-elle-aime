{
  "files": 1, 
  "nb_test": 740, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.logging.log4j.core.appender.ConsoleAppenderTest"
  ], 
  "patch": "diff --git a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java\nindex 760db2c12..c318d37c6 100644\n--- a/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java\n+++ b/log4j-core/src/main/java/org/apache/logging/log4j/core/appender/ConsoleAppender.java\n@@ -182,23 +182,28 @@ private static OutputStream getOutputStream(final boolean follow, final Target t\n         final String enc = Charset.defaultCharset().name();\n         PrintStream printStream = null;\n         try {\n+            // Cannot use a CloseShieldOutputStream here;\n+            // see org.apache.logging.log4j.core.appender.ConsoleAppenderTest\n+            // @formatter:off\n             printStream = target == Target.SYSTEM_OUT ?\n-            follow ? new PrintStream(new CloseShieldOutputStream(System.out), true, enc) : System.out :\n-            follow ? new PrintStream(new CloseShieldOutputStream(System.err), true, enc) : System.err;\n+            follow ? new PrintStream(new SystemOutStream(), true, enc) : System.out :\n+            follow ? new PrintStream(new SystemErrStream(), true, enc) : System.err;\n+            // @formatter:on\n         } catch (final UnsupportedEncodingException ex) { // should never happen\n             throw new IllegalStateException(\"Unsupported default encoding \" + enc, ex);\n         }\n         final PropertiesUtil propsUtil = PropertiesUtil.getProperties();\n-        if (!propsUtil.getStringProperty(\"os.name\").startsWith(\"Windows\") ||\n-            propsUtil.getBooleanProperty(\"log4j.skipJansi\")) {\n+        if (!propsUtil.getStringProperty(\"os.name\").startsWith(\"Windows\")\n+                || propsUtil.getBooleanProperty(\"log4j.skipJansi\")) {\n             return printStream;\n         }\n         try {\n             // We type the parameter as a wildcard to avoid a hard reference to Jansi.\n             final Class<?> clazz = Loader.loadClass(JANSI_CLASS);\n             final Constructor<?> constructor = clazz.getConstructor(OutputStream.class);\n+            OutputStream newInstance = (OutputStream) constructor.newInstance(printStream);\n             // LOG4J-965\n-            return new CloseShieldOutputStream((OutputStream) constructor.newInstance(printStream));\n+            return follow ? new CloseShieldOutputStream(newInstance) : newInstance;\n         } catch (final ClassNotFoundException cnfe) {\n             LOGGER.debug(\"Jansi is not installed, cannot find {}\", JANSI_CLASS);\n         } catch (final NoSuchMethodException nsme) {\n@@ -209,6 +214,74 @@ private static OutputStream getOutputStream(final boolean follow, final Target t\n         return printStream;\n     }\n \n+    /**\n+     * An implementation of OutputStream that redirects to the current System.err.\n+     */\n+    private static class SystemErrStream extends OutputStream {\n+        public SystemErrStream() {\n+        }\n+\n+        @Override\n+        public void close() {\n+            // do not close sys err!\n+        }\n+\n+        @Override\n+        public void flush() {\n+            System.err.flush();\n+        }\n+\n+        @Override\n+        public void write(final byte[] b) throws IOException {\n+            System.err.write(b);\n+        }\n+\n+        @Override\n+        public void write(final byte[] b, final int off, final int len)\n+            throws IOException {\n+            System.err.write(b, off, len);\n+        }\n+\n+        @Override\n+        public void write(final int b) {\n+            System.err.write(b);\n+        }\n+    }\n+\n+    /**\n+     * An implementation of OutputStream that redirects to the current System.out.\n+     */\n+    private static class SystemOutStream extends OutputStream {\n+        public SystemOutStream() {\n+        }\n+\n+        @Override\n+        public void close() {\n+            // do not close sys out!\n+        }\n+\n+        @Override\n+        public void flush() {\n+            System.out.flush();\n+        }\n+\n+        @Override\n+        public void write(final byte[] b) throws IOException {\n+            System.out.write(b);\n+        }\n+\n+        @Override\n+        public void write(final byte[] b, final int off, final int len)\n+            throws IOException {\n+            System.out.write(b, off, len);\n+        }\n+\n+        @Override\n+        public void write(final int b) throws IOException {\n+            System.out.write(b);\n+        }\n+    }\n+    \n     /**\n      * A delegating OutputStream that does not close its delegate.\n      */\n", 
  "project": "logging-log4j2", 
  "linesAdd": 78, 
  "jira_id": "965", 
  "nb_skipped": 2, 
  "commit": "43517f15", 
  "nb_failure": 1, 
  "linesRem": 5
}