{
  "files": 1, 
  "nb_test": 3733, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.camel.management.EventNotifierRedeliveryEventsTest", 
    "org.apache.camel.processor.async.AsyncEndpointEventNotifierTest", 
    "org.apache.camel.management.JmxInstrumentationWithConnectorTest", 
    "org.apache.camel.management.EventNotifierFailureHandledEventsTest"
  ], 
  "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java b/camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java\nindex e9093a4ccf..c8304d6365 100644\n--- a/camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java\n+++ b/camel-core/src/main/java/org/apache/camel/impl/ProducerCache.java\n@@ -259,11 +259,12 @@ public Exchange send(Endpoint endpoint, ExchangePattern pattern, Processor proce\n      * @param producerCallback the producer template callback to be executed\n      * @return (doneSync) <tt>true</tt> to continue execute synchronously, <tt>false</tt> to continue being executed asynchronously\n      */\n-    public boolean doInAsyncProducer(Endpoint endpoint, Exchange exchange, ExchangePattern pattern, AsyncCallback callback, AsyncProducerCallback producerCallback) {\n+    public boolean doInAsyncProducer(final Endpoint endpoint, final Exchange exchange, final ExchangePattern pattern,\n+                                     final AsyncCallback callback, final AsyncProducerCallback producerCallback) {\n         boolean sync = true;\n \n         // get the producer and we do not mind if its pooled as we can handle returning it back to the pool\n-        Producer producer = doGetProducer(endpoint, true);\n+        final Producer producer = doGetProducer(endpoint, true);\n \n         if (producer == null) {\n             if (isStopped()) {\n@@ -274,23 +275,17 @@ public boolean doInAsyncProducer(Endpoint endpoint, Exchange exchange, ExchangeP\n             }\n         }\n \n-        StopWatch watch = null;\n-        if (exchange != null) {\n         // record timing for sending the exchange using the producer\n-            watch = new StopWatch();\n-        }\n+        final StopWatch watch = exchange != null ? new StopWatch() : null;\n \n         try {\n             // invoke the callback\n             AsyncProcessor asyncProcessor = AsyncProcessorTypeConverter.convert(producer);\n-            sync = producerCallback.doInAsyncProducer(producer, asyncProcessor, exchange, pattern, callback);\n-        } catch (Throwable e) {\n-            // ensure exceptions is caught and set on the exchange\n-            if (exchange != null) {\n-                exchange.setException(e);\n-            }\n-        } finally {\n-            if (exchange != null && exchange.getException() == null) {\n+            sync = producerCallback.doInAsyncProducer(producer, asyncProcessor, exchange, pattern, new AsyncCallback() {\n+                @Override\n+                public void done(boolean doneSync) {\n+                    try {\n+                        if (watch != null) {\n                             long timeTaken = watch.stop();\n                             // emit event that the exchange was sent to the endpoint\n                             EventHelper.notifyExchangeSent(exchange.getContext(), exchange, endpoint, timeTaken);\n@@ -307,6 +303,16 @@ public boolean doInAsyncProducer(Endpoint endpoint, Exchange exchange, ExchangeP\n                                 LOG.warn(\"Error stopping producer: \" + producer, e);\n                             }\n                         }\n+                    } finally {\n+                        callback.done(doneSync);\n+                    }\n+                }\n+            });\n+        } catch (Throwable e) {\n+            // ensure exceptions is caught and set on the exchange\n+            if (exchange != null) {\n+                exchange.setException(e);\n+            }\n         }\n \n         return sync;\n", 
  "project": "camel", 
  "linesAdd": 19, 
  "jira_id": "4354", 
  "nb_skipped": 0, 
  "commit": "96e40c3c", 
  "nb_failure": 4, 
  "linesRem": 14
}