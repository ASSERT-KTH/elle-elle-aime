{
  "files": 1, 
  "nb_test": 4720, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.camel.processor.aggregator.AggregateTimeoutTest", 
    "org.apache.camel.component.bean.BeanWithInputStreamBodyTest"
  ], 
  "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java b/camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java\nindex a4dd2e075c..0c22e75041 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java\n@@ -393,8 +393,6 @@ public boolean isStaticMethod() {\n     /**\n      * Returns true if this method is covariant with the specified method\n      * (this method may above or below the specified method in the class hierarchy)\n-     * @param method\n-     * @return\n      */\n     public boolean isCovariantWith(MethodInfo method) {\n         return \n@@ -541,14 +539,19 @@ private Object evaluateParameterValue(Exchange exchange, int index, Object param\n                         return Void.TYPE;\n                     }\n \n+                    // the parameter value may match the expected type, then we use it as-is\n+                    if (parameterType.isAssignableFrom(parameterValue.getClass())) {\n+                        valid = true;\n+                    } else {\n                         // the parameter value was not already valid, but since the simple language have evaluated the expression\n                         // which may change the parameterValue, so we have to check it again to see if its now valid\n-                    exp = exchange.getContext().getTypeConverter().convertTo(String.class, parameterValue);\n+                        exp = exchange.getContext().getTypeConverter().tryConvertTo(String.class, parameterValue);\n                         // String values from the simple language is always valid\n                         if (!valid) {\n                             // re validate if the parameter was not valid the first time (String values should be accepted)\n                             valid = parameterValue instanceof String || BeanHelper.isValidParameterValue(exp);\n                         }\n+                    }\n \n                     if (valid) {\n                         // we need to unquote String parameters, as the enclosing quotes is there to denote a parameter value\n", 
  "project": "camel", 
  "linesAdd": 6, 
  "jira_id": "6810", 
  "nb_skipped": 1, 
  "commit": "6b210169", 
  "nb_failure": 2, 
  "linesRem": 3
}