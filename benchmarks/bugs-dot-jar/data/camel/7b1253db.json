{
  "files": 3, 
  "nb_test": 5361, 
  "nb_error": 3, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.camel.component.vm.VmMultipleConsumersMultipleContextTest", 
    "org.apache.camel.component.vm.VmMultipleContextsStartStopTest", 
    "CamelReceivedTimestamp", 
    "org.apache.camel.component.file.MarkerFileExclusiveReadLockStrategyUnlockTest", 
    "org.apache.camel.component.file.FileConsumeMultipleDirectoriesTest", 
    "org.apache.camel.component.vm.VmShouldNotUseSameThreadTest", 
    "org.apache.camel.component.vm.VmQueueTest"
  ], 
  "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java b/camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java\nindex 343d836109..907de21817 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/file/GenericFile.java\n@@ -35,6 +35,7 @@\n public class GenericFile<T> implements WrappedFile<T>  {\n     private static final Logger LOG = LoggerFactory.getLogger(GenericFile.class);\n \n+    private String copyFromAbsoluteFilePath;\n     private String endpointPath;\n     private String fileName;\n     private String fileNameOnly;\n@@ -66,6 +67,7 @@ public char getFileSeparator() {\n         } catch (Exception e) {\n             throw ObjectHelper.wrapRuntimeCamelException(e);\n         }\n+        result.setCopyFromAbsoluteFilePath(source.getAbsoluteFilePath());\n         result.setEndpointPath(source.getEndpointPath());\n         result.setAbsolute(source.isAbsolute());\n         result.setDirectory(source.isDirectory());\n@@ -365,6 +367,14 @@ public void setDirectory(boolean directory) {\n         this.directory = directory;\n     }\n \n+    public String getCopyFromAbsoluteFilePath() {\n+        return copyFromAbsoluteFilePath;\n+    }\n+\n+    public void setCopyFromAbsoluteFilePath(String copyFromAbsoluteFilePath) {\n+        this.copyFromAbsoluteFilePath = copyFromAbsoluteFilePath;\n+    }\n+\n     /**\n      * Fixes the path separator to be according to the protocol\n      */\ndiff --git a/camel-core/src/main/java/org/apache/camel/component/file/strategy/FileLockExclusiveReadLockStrategy.java b/camel-core/src/main/java/org/apache/camel/component/file/strategy/FileLockExclusiveReadLockStrategy.java\nindex 8fd94f580c..de5101f107 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/file/strategy/FileLockExclusiveReadLockStrategy.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/file/strategy/FileLockExclusiveReadLockStrategy.java\n@@ -127,10 +127,11 @@ public boolean acquireExclusiveReadLock(GenericFileOperations<File> operations,\n             }\n         }\n \n-        // we grabbed the lock\n-        exchange.setProperty(Exchange.FILE_LOCK_EXCLUSIVE_LOCK, lock);\n-        exchange.setProperty(Exchange.FILE_LOCK_RANDOM_ACCESS_FILE, randomAccessFile);\n+        // store read-lock state\n+        exchange.setProperty(asReadLockKey(file, Exchange.FILE_LOCK_EXCLUSIVE_LOCK), lock);\n+        exchange.setProperty(asReadLockKey(file, Exchange.FILE_LOCK_RANDOM_ACCESS_FILE), randomAccessFile);\n \n+        // we grabbed the lock\n         return true;\n     }\n \n@@ -140,10 +141,10 @@ protected void doReleaseExclusiveReadLock(GenericFileOperations<File> operations\n         // must call super\n         super.doReleaseExclusiveReadLock(operations, file, exchange);\n \n-        String target = file.getFileName();\n-        FileLock lock = exchange.getProperty(Exchange.FILE_LOCK_EXCLUSIVE_LOCK, FileLock.class);\n-        RandomAccessFile rac = exchange.getProperty(Exchange.FILE_LOCK_RANDOM_ACCESS_FILE, RandomAccessFile.class);\n+        FileLock lock = exchange.getProperty(asReadLockKey(file, Exchange.FILE_LOCK_EXCLUSIVE_LOCK), FileLock.class);\n+        RandomAccessFile rac = exchange.getProperty(asReadLockKey(file, Exchange.FILE_LOCK_EXCLUSIVE_LOCK), RandomAccessFile.class);\n \n+        String target = file.getFileName();\n         if (lock != null) {\n             Channel channel = lock.acquiredBy();\n             try {\n@@ -186,4 +187,12 @@ public void setReadLockLoggingLevel(LoggingLevel readLockLoggingLevel) {\n         this.readLockLoggingLevel = readLockLoggingLevel;\n     }\n \n+    private static String asReadLockKey(GenericFile file, String key) {\n+        // use the copy from absolute path as that was the original path of the file when the lock was acquired\n+        // for example if the file consumer uses preMove then the file is moved and therefore has another name\n+        // that would no longer match\n+        String path = file.getCopyFromAbsoluteFilePath() != null ? file.getCopyFromAbsoluteFilePath() : file.getAbsoluteFilePath();\n+        return path + \"-\" + key;\n+    }\n+\n }\ndiff --git a/camel-core/src/main/java/org/apache/camel/component/file/strategy/MarkerFileExclusiveReadLockStrategy.java b/camel-core/src/main/java/org/apache/camel/component/file/strategy/MarkerFileExclusiveReadLockStrategy.java\nindex ceabd013dc..1c92bbdb8b 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/file/strategy/MarkerFileExclusiveReadLockStrategy.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/file/strategy/MarkerFileExclusiveReadLockStrategy.java\n@@ -73,8 +73,10 @@ public boolean acquireExclusiveReadLock(GenericFileOperations<File> operations,\n \n         // create a plain file as marker filer for locking (do not use FileLock)\n         boolean acquired = FileUtil.createNewFile(new File(lockFileName));\n-        exchange.setProperty(Exchange.FILE_LOCK_FILE_ACQUIRED, acquired);\n-        exchange.setProperty(Exchange.FILE_LOCK_FILE_NAME, lockFileName);\n+\n+        // store read-lock state\n+        exchange.setProperty(asReadLockKey(file, Exchange.FILE_LOCK_FILE_ACQUIRED), acquired);\n+        exchange.setProperty(asReadLockKey(file, Exchange.FILE_LOCK_FILE_NAME), lockFileName);\n \n         return acquired;\n     }\n@@ -101,9 +103,11 @@ protected void doReleaseExclusiveReadLock(GenericFileOperations<File> operations\n             return;\n         }\n \n+        boolean acquired = exchange.getProperty(asReadLockKey(file, Exchange.FILE_LOCK_FILE_ACQUIRED), false, Boolean.class);\n+\n         // only release the file if camel get the lock before\n-        if (exchange.getProperty(Exchange.FILE_LOCK_FILE_ACQUIRED, false, Boolean.class)) {\n-            String lockFileName = exchange.getProperty(Exchange.FILE_LOCK_FILE_NAME, getLockFileName(file), String.class);\n+        if (acquired) {\n+            String lockFileName = exchange.getProperty(asReadLockKey(file, Exchange.FILE_LOCK_FILE_NAME), String.class);\n             File lock = new File(lockFileName);\n \n             if (lock.exists()) {\n@@ -162,4 +166,12 @@ private static String getLockFileName(GenericFile<File> file) {\n         return file.getAbsoluteFilePath() + FileComponent.DEFAULT_LOCK_FILE_POSTFIX;\n     }\n \n+    private static String asReadLockKey(GenericFile file, String key) {\n+        // use the copy from absolute path as that was the original path of the file when the lock was acquired\n+        // for example if the file consumer uses preMove then the file is moved and therefore has another name\n+        // that would no longer match\n+        String path = file.getCopyFromAbsoluteFilePath() != null ? file.getCopyFromAbsoluteFilePath() : file.getAbsoluteFilePath();\n+        return path + \"-\" + key;\n+    }\n+\n }\n", 
  "project": "camel", 
  "linesAdd": 41, 
  "jira_id": "8954", 
  "nb_skipped": 4, 
  "commit": "7b1253db", 
  "nb_failure": 4, 
  "linesRem": 10
}