{
  "files": 3, 
  "nb_test": 4307, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.camel.builder.ProxyBuilderSkipJavaLangObjectMethodsTest"
  ], 
  "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/component/bean/AbstractCamelInvocationHandler.java b/camel-core/src/main/java/org/apache/camel/component/bean/AbstractCamelInvocationHandler.java\nindex 953d60efe9..21e407b786 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/bean/AbstractCamelInvocationHandler.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/bean/AbstractCamelInvocationHandler.java\n@@ -19,6 +19,9 @@\n import java.lang.reflect.InvocationHandler;\n import java.lang.reflect.Method;\n import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n import java.util.concurrent.Callable;\n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.ExecutorService;\n@@ -41,10 +44,16 @@\n public abstract class AbstractCamelInvocationHandler implements InvocationHandler {\n \n     private static final transient Logger LOG = LoggerFactory.getLogger(CamelInvocationHandler.class);\n+    private static final List<Method> EXCLUDED_METHODS = new ArrayList<Method>();\n     private static ExecutorService executorService;\n     protected final Endpoint endpoint;\n     protected final Producer producer;\n \n+    static {\n+        // exclude all java.lang.Object methods as we dont want to invoke them\n+        EXCLUDED_METHODS.addAll(Arrays.asList(Object.class.getMethods()));\n+    }\n+\n     public AbstractCamelInvocationHandler(Endpoint endpoint, Producer producer) {\n         this.endpoint = endpoint;\n         this.producer = producer;\n@@ -67,7 +76,26 @@ private static Object getBody(Exchange exchange, Class<?> type) throws InvalidPa\n         }\n     }\n \n-    protected Object invokeWithbody(final Method method, Object body, final ExchangePattern pattern) throws InterruptedException, Throwable {\n+    @Override\n+    public final Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {\n+        if (isValidMethod(method)) {\n+            return doInvokeProxy(proxy, method, args);\n+        } else {\n+            // invalid method then invoke methods on this instead\n+            if (\"toString\".equals(method.getName())) {\n+                return this.toString();\n+            } else if (\"hashCode\".equals(method.getName())) {\n+                return this.hashCode();\n+            } else if (\"equals\".equals(method.getName())) {\n+                return Boolean.FALSE;\n+            }\n+            return null;\n+        }\n+    }\n+\n+    public abstract Object doInvokeProxy(final Object proxy, final Method method, final Object[] args) throws Throwable;\n+\n+    protected Object invokeWithBody(final Method method, Object body, final ExchangePattern pattern) throws Throwable {\n         final Exchange exchange = new DefaultExchange(endpoint, pattern);\n         exchange.getIn().setBody(body);\n \n@@ -214,4 +242,15 @@ protected Throwable findSuitableException(Throwable cause, Method method) {\n         return null;\n     }\n \n+    protected boolean isValidMethod(Method method) {\n+        // must not be in the excluded list\n+        for (Method excluded : EXCLUDED_METHODS) {\n+            if (ObjectHelper.isOverridingMethod(excluded, method)) {\n+                // the method is overriding an excluded method so its not valid\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n }\ndiff --git a/camel-core/src/main/java/org/apache/camel/component/bean/CamelInvocationHandler.java b/camel-core/src/main/java/org/apache/camel/component/bean/CamelInvocationHandler.java\nindex b78dcd3754..55b993b51b 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/bean/CamelInvocationHandler.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/bean/CamelInvocationHandler.java\n@@ -37,11 +37,12 @@ public CamelInvocationHandler(Endpoint endpoint, Producer producer, MethodInfoCa\n         this.methodInfoCache = methodInfoCache;\n     }\n \n-    public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {\n+    @Override\n+    public Object doInvokeProxy(Object proxy, Method method, Object[] args) throws Throwable {\n         BeanInvocation invocation = new BeanInvocation(method, args);\n         MethodInfo methodInfo = methodInfoCache.getMethodInfo(method);\n         final ExchangePattern pattern = methodInfo != null ? methodInfo.getPattern() : ExchangePattern.InOut;\n-        return invokeWithbody(method, invocation, pattern);\n+        return invokeWithBody(method, invocation, pattern);\n     }\n \n }\ndiff --git a/camel-core/src/main/java/org/apache/camel/component/bean/PojoMessageInvocationHandler.java b/camel-core/src/main/java/org/apache/camel/component/bean/PojoMessageInvocationHandler.java\nindex 906ad71ea3..b97865a26a 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/bean/PojoMessageInvocationHandler.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/bean/PojoMessageInvocationHandler.java\n@@ -24,7 +24,7 @@\n import org.apache.camel.RuntimeCamelException;\n \n /**\n- * Special InvocationHandler for methods that have only one parameter. This\n+ * Special {@link java.lang.reflect.InvocationHandler} for methods that have only one parameter. This\n  * parameter is directly sent to as the body of the message. The idea is to use\n  * that as a very open message format especially when combined with e.g. JAXB\n  * serialization.\n@@ -34,7 +35,8 @@ public PojoMessageInvocationHandler(Endpoint endpoint, Producer producer) {\n         super(endpoint, producer);\n     }\n \n-    public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {\n+    @Override\n+    public Object doInvokeProxy(Object proxy, Method method, Object[] args) throws Throwable {\n         int argsLength = (args == null) ? 0 : args.length;\n         if (argsLength != 1) {\n             throw new RuntimeCamelException(String.format(\"Error creating proxy for %s.%s Number of arguments must be 1 but is %d\", \n@@ -42,7 +44,7 @@ public Object invoke(final Object proxy, final Method method, final Object[] arg\n                                                           method.getName(), argsLength));\n         }\n         final ExchangePattern pattern = method.getReturnType() != Void.TYPE ? ExchangePattern.InOut : ExchangePattern.InOnly;\n-        return invokeWithbody(method, args[0], pattern);\n+        return invokeWithBody(method, args[0], pattern);\n     }\n \n }\n", 
  "project": "camel", 
  "linesAdd": 47, 
  "jira_id": "5571", 
  "nb_skipped": 1, 
  "commit": "0e87b84f", 
  "nb_failure": 0, 
  "linesRem": 6
}