{
  "files": 1, 
  "nb_test": 4358, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.camel.processor.SplitTokenizerNamespaceTest", 
    "org.apache.camel.component.file.FileConsumeSingleDirectoryOnlyTest"
  ], 
  "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/support/TokenXMLPairExpressionIterator.java b/camel-core/src/main/java/org/apache/camel/support/TokenXMLPairExpressionIterator.java\nindex da5afaa639..9ae147737c 100644\n--- a/camel-core/src/main/java/org/apache/camel/support/TokenXMLPairExpressionIterator.java\n+++ b/camel-core/src/main/java/org/apache/camel/support/TokenXMLPairExpressionIterator.java\n@@ -41,6 +41,7 @@\n \n     private static final Pattern NAMESPACE_PATTERN = Pattern.compile(\"xmlns(:\\\\w+|)=\\\\\\\"(.*?)\\\\\\\"\");\n     private static final String SCAN_TOKEN_REGEX = \"(\\\\s+.*?|)>\";\n+    private static final String SCAN_TOKEN_NS_PREFIX_REGEX = \"(.{1,15}?:|)\";\n     protected final String inheritNamespaceToken;\n \n     public TokenXMLPairExpressionIterator(String startToken, String endToken, String inheritNamespaceToken) {\n@@ -81,15 +82,22 @@ public TokenXMLPairExpressionIterator(String startToken, String endToken, String\n         XMLTokenPairIterator(String startToken, String endToken, String inheritNamespaceToken, InputStream in, String charset) {\n             super(startToken, endToken, true, in, charset);\n \n-            // remove any ending > as we need to support attributes on the tags, so we need to use a reg exp pattern\n-            String token = startToken.substring(0, startToken.length() - 1) + SCAN_TOKEN_REGEX;\n-            this.startTokenPattern = Pattern.compile(token);\n-            this.scanEndToken = endToken.substring(0, endToken.length() - 1) + SCAN_TOKEN_REGEX;\n+            // remove any beginning < and ending > as we need to support ns prefixes and attributes, so we use a reg exp patterns\n+            StringBuilder tokenSb = new StringBuilder(\"<\").append(SCAN_TOKEN_NS_PREFIX_REGEX).\n+                                append(startToken.substring(1, startToken.length() - 1)).append(SCAN_TOKEN_REGEX);\n+            this.startTokenPattern = Pattern.compile(tokenSb.toString());\n+            \n+            tokenSb = new StringBuilder(\"</\").append(SCAN_TOKEN_NS_PREFIX_REGEX).\n+                                append(endToken.substring(2, endToken.length() - 1)).append(SCAN_TOKEN_REGEX);\n+            this.scanEndToken = tokenSb.toString();\n+            \n             this.inheritNamespaceToken = inheritNamespaceToken;\n             if (inheritNamespaceToken != null) {\n-                token = inheritNamespaceToken.substring(0, inheritNamespaceToken.length() - 1) + SCAN_TOKEN_REGEX;\n+                // the inherit namespace token may itself have a namespace prefix\n+                tokenSb = new StringBuilder(\"<\").append(SCAN_TOKEN_NS_PREFIX_REGEX).\n+                                append(inheritNamespaceToken.substring(1, inheritNamespaceToken.length() - 1)).append(SCAN_TOKEN_REGEX);  \n                 // the namespaces on the parent tag can be in multi line, so we need to instruct the dot to support multilines\n-                this.inheritNamespaceTokenPattern = Pattern.compile(token, Pattern.MULTILINE | Pattern.DOTALL);\n+                this.inheritNamespaceTokenPattern = Pattern.compile(tokenSb.toString(), Pattern.MULTILINE | Pattern.DOTALL);\n             }\n         }\n \n@@ -125,17 +133,26 @@ String getNext(boolean first) {\n                 next = next.substring(index);\n             }\n \n+            // make sure the end tag matches the begin tag if the tag has a namespace prefix\n+            String tag = ObjectHelper.before(next, \">\");\n+            StringBuilder endTagSb = new StringBuilder(\"</\");\n+            int firstSpaceIndex = tag.indexOf(\" \");\n+            if (firstSpaceIndex > 0) {\n+                endTagSb.append(tag.substring(1, firstSpaceIndex)).append(\">\");\n+            } else {\n+                endTagSb.append(tag.substring(1, tag.length())).append(\">\");\n+            }\n+            \n             // build answer accordingly to whether namespaces should be inherited or not\n             StringBuilder sb = new StringBuilder();\n             if (inheritNamespaceToken != null && rootTokenNamespaces != null) {\n                 // append root namespaces to local start token\n-                String tag = ObjectHelper.before(next, \">\");\n                 // grab the text\n                 String text = ObjectHelper.after(next, \">\");\n                 // build result with inherited namespaces\n-                next = sb.append(tag).append(rootTokenNamespaces).append(\">\").append(text).append(endToken).toString();\n+                next = sb.append(tag).append(rootTokenNamespaces).append(\">\").append(text).append(endTagSb.toString()).toString();\n             } else {\n-                next = sb.append(next).append(endToken).toString();\n+                next = sb.append(next).append(endTagSb.toString()).toString();\n             }\n \n             return next;\n", 
  "project": "camel", 
  "linesAdd": 26, 
  "jira_id": "5826", 
  "nb_skipped": 1, 
  "commit": "a04674f2", 
  "nb_failure": 2, 
  "linesRem": 9
}