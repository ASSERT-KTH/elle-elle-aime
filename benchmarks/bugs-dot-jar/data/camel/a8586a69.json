{
  "files": 1, 
  "nb_test": 4152, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.camel.language.simple.SimpleTest"
  ], 
  "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java b/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java\nindex 43f40f57a8..4a8ddef91a 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java\n@@ -71,6 +71,7 @@\n     // shared state with details of operations introspected from the bean, created during the constructor\n     private Map<String, List<MethodInfo>> operations = new HashMap<String, List<MethodInfo>>();\n     private List<MethodInfo> operationsWithBody = new ArrayList<MethodInfo>();\n+    private List<MethodInfo> operationsWithNoBody = new ArrayList<MethodInfo>();\n     private List<MethodInfo> operationsWithCustomAnnotation = new ArrayList<MethodInfo>();\n     private List<MethodInfo> operationsWithHandlerAnnotation = new ArrayList<MethodInfo>();\n     private Map<Method, MethodInfo> methodMap = new HashMap<Method, MethodInfo>();\n@@ -130,6 +131,7 @@ public BeanInfo(CamelContext camelContext, Class<?> type, Method explicitMethod,\n         // to keep this code thread safe\n         operations = Collections.unmodifiableMap(operations);\n         operationsWithBody = Collections.unmodifiableList(operationsWithBody);\n+        operationsWithNoBody = Collections.unmodifiableList(operationsWithNoBody);\n         operationsWithCustomAnnotation = Collections.unmodifiableList(operationsWithCustomAnnotation);\n         operationsWithHandlerAnnotation = Collections.unmodifiableList(operationsWithHandlerAnnotation);\n         methodMap = Collections.unmodifiableMap(methodMap);\n@@ -311,6 +313,8 @@ private MethodInfo introspect(Class<?> clazz, Method method) {\n             operationsWithCustomAnnotation.add(methodInfo);\n         } else if (methodInfo.hasBodyParameter()) {\n             operationsWithBody.add(methodInfo);\n+        } else {\n+            operationsWithNoBody.add(methodInfo);\n         }\n \n         if (methodInfo.hasHandlerAnnotation()) {\n@@ -442,6 +446,7 @@ protected MethodInfo chooseMethod(Object pojo, Exchange exchange, String name) t\n         // must use defensive copy, to avoid altering the shared lists\n         // and we want to remove unwanted operations from these local lists\n         final List<MethodInfo> localOperationsWithBody = new ArrayList<MethodInfo>(operationsWithBody);\n+        final List<MethodInfo> localOperationsWithNoBody = new ArrayList<MethodInfo>(operationsWithNoBody);\n         final List<MethodInfo> localOperationsWithCustomAnnotation = new ArrayList<MethodInfo>(operationsWithCustomAnnotation);\n         final List<MethodInfo> localOperationsWithHandlerAnnotation = new ArrayList<MethodInfo>(operationsWithHandlerAnnotation);\n \n@@ -450,11 +455,13 @@ protected MethodInfo chooseMethod(Object pojo, Exchange exchange, String name) t\n             removeNonMatchingMethods(localOperationsWithHandlerAnnotation, name);\n             removeNonMatchingMethods(localOperationsWithCustomAnnotation, name);\n             removeNonMatchingMethods(localOperationsWithBody, name);\n+            removeNonMatchingMethods(localOperationsWithNoBody, name);\n         } else {\n             // remove all getter/setter as we do not want to consider these methods\n             removeAllSetterOrGetterMethods(localOperationsWithHandlerAnnotation);\n             removeAllSetterOrGetterMethods(localOperationsWithCustomAnnotation);\n             removeAllSetterOrGetterMethods(localOperationsWithBody);\n+            removeAllSetterOrGetterMethods(localOperationsWithNoBody);\n         }\n \n         if (localOperationsWithHandlerAnnotation.size() > 1) {\n@@ -468,6 +475,13 @@ protected MethodInfo chooseMethod(Object pojo, Exchange exchange, String name) t\n         } else if (localOperationsWithCustomAnnotation.size() == 1) {\n             // if there is one method with an annotation then use that one\n             return localOperationsWithCustomAnnotation.get(0);\n+        }\n+\n+        // named method and with no parameters\n+        boolean noParameters = name != null && name.endsWith(\"()\");\n+        if (noParameters && localOperationsWithNoBody.size() == 1) {\n+            // if there was a method name configured and it has no parameters, then use the method with no body (eg no parameters)\n+            return localOperationsWithNoBody.get(0);\n         } else if (localOperationsWithBody.size() == 1) {\n             // if there is one method with body then use that one\n             return localOperationsWithBody.get(0);\n", 
  "project": "camel", 
  "linesAdd": 14, 
  "jira_id": "5154", 
  "nb_skipped": 0, 
  "commit": "a8586a69", 
  "nb_failure": 0, 
  "linesRem": 0
}