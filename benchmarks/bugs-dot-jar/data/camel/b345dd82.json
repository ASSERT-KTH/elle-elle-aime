{
  "files": 3, 
  "nb_test": 3043, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.camel.issues.TwoRouteScopedOnExceptionWithInterceptSendToEndpointIssueWithPredicateTest"
  ], 
  "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/processor/ErrorHandlerSupport.java b/camel-core/src/main/java/org/apache/camel/processor/ErrorHandlerSupport.java\nindex aa00fbb1eb..a7904e8b63 100644\n--- a/camel-core/src/main/java/org/apache/camel/processor/ErrorHandlerSupport.java\n+++ b/camel-core/src/main/java/org/apache/camel/processor/ErrorHandlerSupport.java\n@@ -24,6 +24,8 @@\n import org.apache.camel.Processor;\n import org.apache.camel.impl.ServiceSupport;\n import org.apache.camel.model.OnExceptionDefinition;\n+import org.apache.camel.model.ProcessorDefinitionHelper;\n+import org.apache.camel.model.RouteDefinition;\n import org.apache.camel.processor.exceptionpolicy.DefaultExceptionPolicyStrategy;\n import org.apache.camel.processor.exceptionpolicy.ExceptionPolicyKey;\n import org.apache.camel.processor.exceptionpolicy.ExceptionPolicyStrategy;\n@@ -49,7 +51,9 @@ public void addExceptionPolicy(OnExceptionDefinition exceptionType) {\n         List<Class> list = exceptionType.getExceptionClasses();\n \n         for (Class clazz : list) {\n-            ExceptionPolicyKey key = new ExceptionPolicyKey(clazz, exceptionType.getOnWhen());\n+            RouteDefinition route = ProcessorDefinitionHelper.getRoute(exceptionType);\n+            String routeId = route != null ? route.getId() : null;\n+            ExceptionPolicyKey key = new ExceptionPolicyKey(routeId, clazz, exceptionType.getOnWhen());\n             exceptionPolicies.put(key, exceptionType);\n         }\n     }\ndiff --git a/camel-core/src/main/java/org/apache/camel/processor/exceptionpolicy/DefaultExceptionPolicyStrategy.java b/camel-core/src/main/java/org/apache/camel/processor/exceptionpolicy/DefaultExceptionPolicyStrategy.java\nindex 01d86e3127..d727e1745f 100644\n--- a/camel-core/src/main/java/org/apache/camel/processor/exceptionpolicy/DefaultExceptionPolicyStrategy.java\n+++ b/camel-core/src/main/java/org/apache/camel/processor/exceptionpolicy/DefaultExceptionPolicyStrategy.java\n@@ -17,6 +17,7 @@\n package org.apache.camel.processor.exceptionpolicy;\n \n import java.util.Iterator;\n+import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.Set;\n import java.util.TreeMap;\n@@ -61,17 +62,29 @@ public OnExceptionDefinition getExceptionPolicy(Map<ExceptionPolicyKey, OnExcept\n                                                     Exchange exchange, Throwable exception) {\n \n         Map<Integer, OnExceptionDefinition> candidates = new TreeMap<Integer, OnExceptionDefinition>();\n+        Map<ExceptionPolicyKey, OnExceptionDefinition> routeScoped = new LinkedHashMap<ExceptionPolicyKey, OnExceptionDefinition>();\n+        Map<ExceptionPolicyKey, OnExceptionDefinition> contextScoped = new LinkedHashMap<ExceptionPolicyKey, OnExceptionDefinition>();\n \n+        // split policies into route and context scoped\n+        initRouteAndContextScopedExceptionPolicies(exceptionPolicies, routeScoped, contextScoped);\n+\n+        // at first check route scoped as we prefer them over context scoped\n         // recursive up the tree using the iterator\n         boolean exactMatch = false;\n         Iterator<Throwable> it = createExceptionIterator(exception);\n         while (!exactMatch && it.hasNext()) {\n             // we should stop looking if we have found an exact match\n-            exactMatch = findMatchedExceptionPolicy(exceptionPolicies, exchange, it.next(), candidates);\n+            exactMatch = findMatchedExceptionPolicy(routeScoped, exchange, it.next(), candidates);\n         }\n \n-        // now go through the candidates and find the best\n+        // fallback to check context scoped (only do this if there was no exact match)\n+        it = createExceptionIterator(exception);\n+        while (!exactMatch && it.hasNext()) {\n+            // we should stop looking if we have found an exact match\n+            exactMatch = findMatchedExceptionPolicy(contextScoped, exchange, it.next(), candidates);\n+        }\n \n+        // now go through the candidates and find the best\n         if (LOG.isTraceEnabled()) {\n             LOG.trace(\"Found \" + candidates.size() + \" candidates\");\n         }\n@@ -80,11 +93,26 @@ public OnExceptionDefinition getExceptionPolicy(Map<ExceptionPolicyKey, OnExcept\n             // no type found\n             return null;\n         } else {\n-            // return the first in the map as its sorted and\n+            // return the first in the map as its sorted and we checked route scoped first, which we prefer\n             return candidates.values().iterator().next();\n         }\n     }\n \n+    private void initRouteAndContextScopedExceptionPolicies(Map<ExceptionPolicyKey, OnExceptionDefinition> exceptionPolicies,\n+                                                            Map<ExceptionPolicyKey, OnExceptionDefinition> routeScoped,\n+                                                            Map<ExceptionPolicyKey, OnExceptionDefinition> contextScoped) {\n+\n+        // loop through all the entries and split into route and context scoped\n+        Set<Map.Entry<ExceptionPolicyKey, OnExceptionDefinition>> entries = exceptionPolicies.entrySet();\n+        for (Map.Entry<ExceptionPolicyKey, OnExceptionDefinition> entry : entries) {\n+            if (entry.getKey().getRouteId() != null) {\n+                routeScoped.put(entry.getKey(), entry.getValue());\n+            } else {\n+                contextScoped.put(entry.getKey(), entry.getValue());\n+            }\n+        }\n+    }\n+\n \n     private boolean findMatchedExceptionPolicy(Map<ExceptionPolicyKey, OnExceptionDefinition> exceptionPolicies,\n                                                Exchange exchange, Throwable exception,\ndiff --git a/camel-core/src/main/java/org/apache/camel/processor/exceptionpolicy/ExceptionPolicyKey.java b/camel-core/src/main/java/org/apache/camel/processor/exceptionpolicy/ExceptionPolicyKey.java\nindex cbd1fa16fe..3c79baa7a0 100644\n--- a/camel-core/src/main/java/org/apache/camel/processor/exceptionpolicy/ExceptionPolicyKey.java\n+++ b/camel-core/src/main/java/org/apache/camel/processor/exceptionpolicy/ExceptionPolicyKey.java\n@@ -20,16 +20,30 @@\n \n /**\n  * Exception policy key is a compound key for storing:\n- * <b>exception class</b> + <b>when</b> => <b>exception type</b>.\n+ * <b>route id </b> + <b>exception class</b> + <b>when</b> => <b>exception type</b>.\n  * <p/>\n  * This is used by Camel to store the onException types configured that has or has not predicates attached (when).\n  */\n public final class ExceptionPolicyKey {\n \n+    private final String routeId;\n     private final Class exceptionClass;\n     private final WhenDefinition when;\n \n+    @Deprecated\n     public ExceptionPolicyKey(Class exceptionClass, WhenDefinition when) {\n+        this(null, exceptionClass, when);\n+    }\n+\n+    /**\n+     * Key for exception clause\n+     *\n+     * @param routeId          the route, or use <tt>null</tt> for a global scoped\n+     * @param exceptionClass   the exception class\n+     * @param when             optional predicate when the exception clause should trigger\n+     */\n+    public ExceptionPolicyKey(String routeId, Class exceptionClass, WhenDefinition when) {\n+        this.routeId = routeId;\n         this.exceptionClass = exceptionClass;\n         this.when = when;\n     }\n@@ -42,10 +56,16 @@ public WhenDefinition getWhen() {\n         return when;\n     }\n \n+    public String getRouteId() {\n+        return routeId;\n+    }\n+\n+    @Deprecated\n     public static ExceptionPolicyKey newInstance(Class exceptionClass) {\n         return new ExceptionPolicyKey(exceptionClass, null);\n     }\n \n+    @Deprecated\n     public static ExceptionPolicyKey newInstance(Class exceptionClass, WhenDefinition when) {\n         return new ExceptionPolicyKey(exceptionClass, when);\n     }\n@@ -61,7 +81,10 @@ public boolean equals(Object o) {\n \n         ExceptionPolicyKey that = (ExceptionPolicyKey) o;\n \n-        if (!exceptionClass.equals(that.exceptionClass)) {\n+        if (exceptionClass != null ? !exceptionClass.equals(that.exceptionClass) : that.exceptionClass != null) {\n+            return false;\n+        }\n+        if (routeId != null ? !routeId.equals(that.routeId) : that.routeId != null) {\n             return false;\n         }\n         if (when != null ? !when.equals(that.when) : that.when != null) {\n@@ -73,13 +96,14 @@ public boolean equals(Object o) {\n \n     @Override\n     public int hashCode() {\n-        int result = exceptionClass.hashCode();\n+        int result = routeId != null ? routeId.hashCode() : 0;\n+        result = 31 * result + (exceptionClass != null ? exceptionClass.hashCode() : 0);\n         result = 31 * result + (when != null ? when.hashCode() : 0);\n         return result;\n     }\n \n     @Override\n     public String toString() {\n-        return \"ExceptionPolicyKey[\" + exceptionClass + (when != null ? \" \" + when : \"\") + \"]\";\n+        return \"ExceptionPolicyKey[route: \" + (routeId != null ? routeId : \"<global>\") + \", \" + exceptionClass + (when != null ? \" \" + when : \"\") + \"]\";\n     }\n }\n", 
  "project": "camel", 
  "linesAdd": 64, 
  "jira_id": "3448", 
  "nb_skipped": 0, 
  "commit": "b345dd82", 
  "nb_failure": 0, 
  "linesRem": 8
}