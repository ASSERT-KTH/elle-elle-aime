{
  "files": 3, 
  "nb_test": 4790, 
  "nb_error": 3, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.camel.management.BacklogDebuggerTest", 
    "org.apache.camel.management.ManagedThrottlerTest"
  ], 
  "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/api/management/mbean/ManagedBacklogDebuggerMBean.java b/camel-core/src/main/java/org/apache/camel/api/management/mbean/ManagedBacklogDebuggerMBean.java\nindex 02d2d966f1..036ef3da8e 100644\n--- a/camel-core/src/main/java/org/apache/camel/api/management/mbean/ManagedBacklogDebuggerMBean.java\n+++ b/camel-core/src/main/java/org/apache/camel/api/management/mbean/ManagedBacklogDebuggerMBean.java\n@@ -53,11 +53,23 @@\n     @ManagedOperation(description = \"Resume running from the suspended breakpoint at the given node id\")\n     void resumeBreakpoint(String nodeId);\n \n-    @ManagedOperation(description = \"Updates the message body on the suspended breakpoint at the given node id\")\n-    void setMessageBodyOnBreakpoint(String nodeId, String body);\n+    @ManagedOperation(description = \"Updates the message body (uses same type as old body) on the suspended breakpoint at the given node id\")\n+    void setMessageBodyOnBreakpoint(String nodeId, Object body);\n \n-    @ManagedOperation(description = \"Updates/adds the message header on the suspended breakpoint at the given node id\")\n-    void setMessageHeaderOnBreakpoint(String nodeId, String headerName, String value);\n+    @ManagedOperation(description = \"Updates the message body (with a new type) on the suspended breakpoint at the given node id\")\n+    void setMessageBodyOnBreakpoint(String nodeId, Object body, String type);\n+\n+    @ManagedOperation(description = \"Removes the message body on the suspended breakpoint at the given node id\")\n+    void removeMessageBodyOnBreakpoint(String nodeId);\n+\n+    @ManagedOperation(description = \"Updates/adds the message header (uses same type as old header value) on the suspended breakpoint at the given node id\")\n+    void setMessageHeaderOnBreakpoint(String nodeId, String headerName, Object value);\n+\n+    @ManagedOperation(description = \"Removes the message header on the suspended breakpoint at the given node id\")\n+    void removeMessageHeaderOnBreakpoint(String nodeId, String headerName);\n+\n+    @ManagedOperation(description = \"Updates/adds the message header (with a new type) on the suspended breakpoint at the given node id\")\n+    void setMessageHeaderOnBreakpoint(String nodeId, String headerName, Object value, String type);\n \n     @ManagedOperation(description = \"Resume running any suspended breakpoints, and exits step mode\")\n     void resumeAll();\ndiff --git a/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedBacklogDebugger.java b/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedBacklogDebugger.java\nindex 33f13105f0..9f3a94cf9a 100644\n--- a/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedBacklogDebugger.java\n+++ b/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedBacklogDebugger.java\n@@ -19,10 +19,12 @@\n import java.util.Set;\n \n import org.apache.camel.CamelContext;\n+import org.apache.camel.NoTypeConversionAvailableException;\n import org.apache.camel.api.management.ManagedResource;\n import org.apache.camel.api.management.mbean.ManagedBacklogDebuggerMBean;\n import org.apache.camel.processor.interceptor.BacklogDebugger;\n import org.apache.camel.spi.ManagementStrategy;\n+import org.apache.camel.util.ObjectHelper;\n \n @ManagedResource(description = \"Managed BacklogDebugger\")\n public class ManagedBacklogDebugger implements ManagedBacklogDebuggerMBean {\n@@ -91,12 +93,42 @@ public void resumeBreakpoint(String nodeId) {\n         backlogDebugger.resumeBreakpoint(nodeId);\n     }\n \n-    public void setMessageBodyOnBreakpoint(String nodeId, String body) {\n+    public void setMessageBodyOnBreakpoint(String nodeId, Object body) {\n         backlogDebugger.setMessageBodyOnBreakpoint(nodeId, body);\n     }\n \n-    public void setMessageHeaderOnBreakpoint(String nodeId, String headerName, String value) {\n+    public void setMessageBodyOnBreakpoint(String nodeId, Object body, String type) {\n+        try {\n+            Class<?> classType = camelContext.getClassResolver().resolveMandatoryClass(type);\n+            backlogDebugger.setMessageBodyOnBreakpoint(nodeId, body, classType);\n+        } catch (ClassNotFoundException e) {\n+            throw ObjectHelper.wrapRuntimeCamelException(e);\n+        }\n+    }\n+\n+    public void removeMessageBodyOnBreakpoint(String nodeId) {\n+        backlogDebugger.removeMessageBodyOnBreakpoint(nodeId);\n+    }\n+\n+    public void setMessageHeaderOnBreakpoint(String nodeId, String headerName, Object value) {\n+        try {\n             backlogDebugger.setMessageHeaderOnBreakpoint(nodeId, headerName, value);\n+        } catch (NoTypeConversionAvailableException e) {\n+            throw ObjectHelper.wrapRuntimeCamelException(e);\n+        }\n+    }\n+\n+    public void setMessageHeaderOnBreakpoint(String nodeId, String headerName, Object value, String type) {\n+        try {\n+            Class<?> classType = camelContext.getClassResolver().resolveMandatoryClass(type);\n+            backlogDebugger.setMessageHeaderOnBreakpoint(nodeId, headerName, value, classType);\n+        } catch (Exception e) {\n+            throw ObjectHelper.wrapRuntimeCamelException(e);\n+        }\n+    }\n+\n+    public void removeMessageHeaderOnBreakpoint(String nodeId, String headerName) {\n+        backlogDebugger.removeMessageHeaderOnBreakpoint(nodeId, headerName);\n     }\n \n     public void resumeAll() {\ndiff --git a/camel-core/src/main/java/org/apache/camel/processor/interceptor/BacklogDebugger.java b/camel-core/src/main/java/org/apache/camel/processor/interceptor/BacklogDebugger.java\nindex 3c2e290c88..571b174d0c 100644\n--- a/camel-core/src/main/java/org/apache/camel/processor/interceptor/BacklogDebugger.java\n+++ b/camel-core/src/main/java/org/apache/camel/processor/interceptor/BacklogDebugger.java\n@@ -31,6 +31,7 @@\n import org.apache.camel.CamelContext;\n import org.apache.camel.Exchange;\n import org.apache.camel.LoggingLevel;\n+import org.apache.camel.NoTypeConversionAvailableException;\n import org.apache.camel.Predicate;\n import org.apache.camel.Processor;\n import org.apache.camel.api.management.mbean.BacklogTracerEventMessage;\n@@ -268,29 +269,108 @@ private void resumeBreakpoint(String nodeId, boolean stepMode) {\n         }\n     }\n \n-    public void setMessageBodyOnBreakpoint(String nodeId, String body) {\n+    public void setMessageBodyOnBreakpoint(String nodeId, Object body) {\n         SuspendedExchange se = suspendedBreakpoints.get(nodeId);\n         if (se != null) {\n+            boolean remove = body == null;\n+            if (remove) {\n+                removeMessageBodyOnBreakpoint(nodeId);\n+            } else {\n+                Class oldType;\n+                if (se.getExchange().hasOut()) {\n+                    oldType = se.getExchange().getOut().getBody() != null ? se.getExchange().getOut().getBody().getClass() : null;\n+                } else {\n+                    oldType = se.getExchange().getIn().getBody() != null ? se.getExchange().getIn().getBody().getClass() : null;\n+                }\n+                setMessageBodyOnBreakpoint(nodeId, body, oldType);\n+            }\n+        }\n+    }\n+\n+    public void setMessageBodyOnBreakpoint(String nodeId, Object body, Class type) {\n+        SuspendedExchange se = suspendedBreakpoints.get(nodeId);\n+        if (se != null) {\n+            boolean remove = body == null;\n+            if (remove) {\n+                removeMessageBodyOnBreakpoint(nodeId);\n+            } else {\n                 logger.log(\"Breakpoint at node \" + nodeId + \" is updating message body on exchangeId: \" + se.getExchange().getExchangeId() + \" with new body: \" + body);\n                 if (se.getExchange().hasOut()) {\n+                    // preserve type\n+                    if (type != null) {\n+                        se.getExchange().getOut().setBody(body, type);\n+                    } else {\n                         se.getExchange().getOut().setBody(body);\n+                    }\n+                } else {\n+                    if (type != null) {\n+                        se.getExchange().getIn().setBody(body, type);\n                     } else {\n                         se.getExchange().getIn().setBody(body);\n                     }\n                 }\n             }\n+        }\n+    }\n+\n+    public void removeMessageBodyOnBreakpoint(String nodeId) {\n+        SuspendedExchange se = suspendedBreakpoints.get(nodeId);\n+        if (se != null) {\n+            logger.log(\"Breakpoint at node \" + nodeId + \" is removing message body on exchangeId: \" + se.getExchange().getExchangeId());\n+            if (se.getExchange().hasOut()) {\n+                se.getExchange().getOut().setBody(null);\n+            } else {\n+                se.getExchange().getIn().setBody(null);\n+            }\n+        }\n+    }\n \n-    public void setMessageHeaderOnBreakpoint(String nodeId, String headerName, String value) {\n+    public void setMessageHeaderOnBreakpoint(String nodeId, String headerName, Object value) throws NoTypeConversionAvailableException {\n+        SuspendedExchange se = suspendedBreakpoints.get(nodeId);\n+        if (se != null) {\n+            Class oldType;\n+            if (se.getExchange().hasOut()) {\n+                oldType = se.getExchange().getOut().getHeader(headerName) != null ? se.getExchange().getOut().getHeader(headerName).getClass() : null;\n+            } else {\n+                oldType = se.getExchange().getIn().getHeader(headerName) != null ? se.getExchange().getIn().getHeader(headerName).getClass() : null;\n+            }\n+            setMessageHeaderOnBreakpoint(nodeId, headerName, value, oldType);\n+        }\n+    }\n+\n+    public void setMessageHeaderOnBreakpoint(String nodeId, String headerName, Object value, Class type) throws NoTypeConversionAvailableException {\n         SuspendedExchange se = suspendedBreakpoints.get(nodeId);\n         if (se != null) {\n             logger.log(\"Breakpoint at node \" + nodeId + \" is updating message header on exchangeId: \" + se.getExchange().getExchangeId() + \" with header: \" + headerName + \" and value: \" + value);\n             if (se.getExchange().hasOut()) {\n+                if (type != null) {\n+                    Object convertedValue = se.getExchange().getContext().getTypeConverter().mandatoryConvertTo(type, se.getExchange(), value);\n+                    se.getExchange().getOut().setHeader(headerName, convertedValue);\n+                } else {\n                     se.getExchange().getOut().setHeader(headerName, value);\n+                }\n+            } else {\n+                if (type != null) {\n+                    Object convertedValue = se.getExchange().getContext().getTypeConverter().mandatoryConvertTo(type, se.getExchange(), value);\n+                    se.getExchange().getIn().setHeader(headerName, convertedValue);\n                 } else {\n                     se.getExchange().getIn().setHeader(headerName, value);\n                 }\n             }\n         }\n+    }\n+\n+    public void removeMessageHeaderOnBreakpoint(String nodeId, String headerName) {\n+        SuspendedExchange se = suspendedBreakpoints.get(nodeId);\n+        if (se != null) {\n+            logger.log(\"Breakpoint at node \" + nodeId + \" is removing message header on exchangeId: \" + se.getExchange().getExchangeId() + \" with header: \" + headerName);\n+            if (se.getExchange().hasOut()) {\n+                se.getExchange().getOut().removeHeader(headerName);\n+            } else {\n+                se.getExchange().getIn().removeHeader(headerName);\n+            }\n+        }\n+    }\n \n     public void resumeAll() {\n         logger.log(\"Resume all\");\n", 
  "project": "camel", 
  "linesAdd": 132, 
  "jira_id": "7163", 
  "nb_skipped": 3, 
  "commit": "5f726d0b", 
  "nb_failure": 1, 
  "linesRem": 8
}