{
  "files": 1, 
  "nb_test": 5412, 
  "nb_error": 3, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "", 
    "org.apache.camel.component.bean.BeanInfoTest", 
    "org.apache.camel.component.bean.BeanPrivateClassWithInterfaceMethodTest", 
    "org.apache.camel.language.simple.SimpleOverrideMethodTest", 
    "org.apache.camel.component.bean.issues.BeanInfoSingleMethodServiceTest"
  ], 
  "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java b/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java\nindex 1b346224ce..d3c72141a1 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/bean/BeanInfo.java\n@@ -557,6 +557,12 @@ protected MethodInfo chooseMethod(Object pojo, Exchange exchange, String name) t\n         final List<MethodInfo> localOperationsWithCustomAnnotation = new ArrayList<MethodInfo>(operationsWithCustomAnnotation);\n         final List<MethodInfo> localOperationsWithHandlerAnnotation = new ArrayList<MethodInfo>(operationsWithHandlerAnnotation);\n \n+        // remove all abstract methods\n+        removeAllAbstractMethods(localOperationsWithBody);\n+        removeAllAbstractMethods(localOperationsWithNoBody);\n+        removeAllAbstractMethods(localOperationsWithCustomAnnotation);\n+        removeAllAbstractMethods(localOperationsWithHandlerAnnotation);\n+\n         if (name != null) {\n             // filter all lists to only include methods with this name\n             removeNonMatchingMethods(localOperationsWithHandlerAnnotation, name);\n@@ -831,11 +837,6 @@ protected boolean isValidMethod(Class<?> clazz, Method method) {\n             return false;\n         }\n \n-        // must not be abstract\n-        if (Modifier.isAbstract(method.getModifiers())) {\n-            return false;\n-        }\n-\n         // return type must not be an Exchange and it should not be a bridge method\n         if ((method.getReturnType() != null && Exchange.class.isAssignableFrom(method.getReturnType())) || method.isBridge()) {\n             return false;\n@@ -982,6 +983,17 @@ private void removeNonMatchingMethods(List<MethodInfo> methods, String name) {\n         }\n     }\n \n+    private void removeAllAbstractMethods(List<MethodInfo> methods) {\n+        Iterator<MethodInfo> it = methods.iterator();\n+        while (it.hasNext()) {\n+            MethodInfo info = it.next();\n+            if (Modifier.isAbstract(info.getMethod().getModifiers())) {\n+                // we cannot invoke an abstract method\n+                it.remove();\n+            }\n+        }\n+    }\n+\n     private boolean matchMethod(Method method, String methodName) {\n         if (methodName == null) {\n             return true;\n", 
  "project": "camel", 
  "linesAdd": 17, 
  "jira_id": "9032", 
  "nb_skipped": 4, 
  "commit": "108d94f7", 
  "nb_failure": 5, 
  "linesRem": 5
}