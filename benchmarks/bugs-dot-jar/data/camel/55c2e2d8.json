{
  "files": 3, 
  "nb_test": 4199, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.camel.issues.AdviceWithUrlIssueTest"
  ], 
  "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/component/seda/SedaComponent.java b/camel-core/src/main/java/org/apache/camel/component/seda/SedaComponent.java\nindex ed0f0665df..23c70bd0b3 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/seda/SedaComponent.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/seda/SedaComponent.java\n@@ -53,7 +53,7 @@ public int getConcurrentConsumers() {\n         return defaultConcurrentConsumers;\n     }\n \n-    public synchronized BlockingQueue<Exchange> createQueue(String uri, Map<String, Object> parameters) {\n+    public synchronized BlockingQueue<Exchange> getOrCreateQueue(String uri, Integer size) {\n         String key = getQueueKey(uri);\n \n         QueueReference ref = getQueues().get(key);\n@@ -65,7 +65,6 @@ public int getConcurrentConsumers() {\n \n         // create queue\n         BlockingQueue<Exchange> queue;\n-        Integer size = getAndRemoveParameter(parameters, \"size\", Integer.class);\n         if (size != null && size > 0) {\n             queue = new LinkedBlockingQueue<Exchange>(size);\n         } else {\n@@ -96,7 +95,8 @@ protected Endpoint createEndpoint(String uri, String remaining, Map<String, Obje\n             throw new IllegalArgumentException(\"The limitConcurrentConsumers flag in set to true. ConcurrentConsumers cannot be set at a value greater than \"\n                     + maxConcurrentConsumers + \" was \" + consumers);\n         }\n-        SedaEndpoint answer = new SedaEndpoint(uri, this, createQueue(uri, parameters), consumers);\n+        Integer size = getAndRemoveParameter(parameters, \"size\", Integer.class);\n+        SedaEndpoint answer = new SedaEndpoint(uri, this, getOrCreateQueue(uri, size), consumers);\n         answer.configureProperties(parameters);\n         return answer;\n     }\ndiff --git a/camel-core/src/main/java/org/apache/camel/component/seda/SedaEndpoint.java b/camel-core/src/main/java/org/apache/camel/component/seda/SedaEndpoint.java\nindex 2095a93b27..5b2d8724b7 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/seda/SedaEndpoint.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/seda/SedaEndpoint.java\n@@ -94,15 +94,27 @@ public Consumer createConsumer(Processor processor) throws Exception {\n \n     public synchronized BlockingQueue<Exchange> getQueue() {\n         if (queue == null) {\n-            if (size > 0) {\n-                queue = new LinkedBlockingQueue<Exchange>(size);\n+            // prefer to lookup queue from component, so if this endpoint is re-created or re-started\n+            // then the existing queue from the component can be used, so new producers and consumers\n+            // can use the already existing queue referenced from the component\n+            if (getComponent() != null) {\n+                queue = getComponent().getOrCreateQueue(getEndpointUri(), getSize());\n             } else {\n-                queue = new LinkedBlockingQueue<Exchange>();\n+                // fallback and create queue (as this endpoint has no component)\n+                queue = createQueue();\n             }\n         }\n         return queue;\n     }\n \n+    protected BlockingQueue<Exchange> createQueue() {\n+        if (size > 0) {\n+            return new LinkedBlockingQueue<Exchange>(size);\n+        } else {\n+            return new LinkedBlockingQueue<Exchange>();\n+        }\n+    }\n+\n     protected synchronized MulticastProcessor getConsumerMulticastProcessor() throws Exception {\n         if (!multicastStarted && consumerMulticastProcessor != null) {\n             // only start it on-demand to avoid starting it during stopping\n@@ -363,6 +375,10 @@ protected void doShutdown() throws Exception {\n             getCamelContext().getExecutorServiceManager().shutdownNow(multicastExecutor);\n             multicastExecutor = null;\n         }\n+\n+        // clear queue, as we are shutdown, so if re-created then the queue must be updated\n+        queue = null;\n+\n         super.doShutdown();\n     }\n }\ndiff --git a/camel-core/src/main/java/org/apache/camel/component/seda/SedaProducer.java b/camel-core/src/main/java/org/apache/camel/component/seda/SedaProducer.java\nindex 1067042ccf..d39e39f722 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/seda/SedaProducer.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/seda/SedaProducer.java\n@@ -27,7 +27,6 @@\n import org.apache.camel.impl.DefaultAsyncProducer;\n import org.apache.camel.support.SynchronizationAdapter;\n import org.apache.camel.util.ExchangeHelper;\n-import org.apache.camel.util.URISupport;\n \n /**\n  * @version \n", 
  "project": "camel", 
  "linesAdd": 22, 
  "jira_id": "5261", 
  "nb_skipped": 1, 
  "commit": "55c2e2d8", 
  "nb_failure": 0, 
  "linesRem": 7
}