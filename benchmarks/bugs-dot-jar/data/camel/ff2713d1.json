{
  "files": 2, 
  "nb_test": 3235, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.camel.processor.RecipientListParallelAggregateThreadPoolIssueTest"
  ], 
  "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java b/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java\nindex a427b25e7a..3d4fec29a5 100644\n--- a/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java\n+++ b/camel-core/src/main/java/org/apache/camel/processor/MulticastProcessor.java\n@@ -888,11 +888,22 @@ protected void doStart() throws Exception {\n             // keep at least one thread in the pool so we re-use the thread avoiding to create new threads because\n             // the pool shrank to zero.\n             String name = getClass().getSimpleName() + \"-AggregateTask\";\n-            aggregateExecutorService = camelContext.getExecutorServiceStrategy().newThreadPool(this, name, 1, Integer.MAX_VALUE);\n+            aggregateExecutorService = createAggregateExecutorService(name);\n         }\n         ServiceHelper.startServices(processors);\n     }\n \n+    /**\n+     * Strategy to create the thread pool for the aggregator background task which waits for and aggregates\n+     * completed tasks when running in parallel mode.\n+     *\n+     * @param name  the suggested name for the background thread\n+     * @return the thread pool\n+     */\n+    protected ExecutorService createAggregateExecutorService(String name) {\n+        return camelContext.getExecutorServiceStrategy().newThreadPool(this, name, 1, Integer.MAX_VALUE);\n+    }\n+\n     protected void doStop() throws Exception {\n         ServiceHelper.stopServices(processors);\n         errorHandlers.clear();\ndiff --git a/camel-core/src/main/java/org/apache/camel/processor/RecipientList.java b/camel-core/src/main/java/org/apache/camel/processor/RecipientList.java\nindex 8260c93813..f2a163f9bc 100644\n--- a/camel-core/src/main/java/org/apache/camel/processor/RecipientList.java\n+++ b/camel-core/src/main/java/org/apache/camel/processor/RecipientList.java\n@@ -55,6 +55,7 @@\n     private boolean streaming;\n     private long timeout;\n     private ExecutorService executorService;\n+    private ExecutorService aggregateExecutorService;\n     private AggregationStrategy aggregationStrategy = new UseLatestAggregationStrategy();\n \n     public RecipientList(CamelContext camelContext) {\n@@ -108,7 +109,16 @@ public boolean sendToRecipientList(Exchange exchange, Object recipientList, Asyn\n         Iterator<Object> iter = ObjectHelper.createIterator(recipientList, delimiter);\n \n         RecipientListProcessor rlp = new RecipientListProcessor(exchange.getContext(), producerCache, iter, getAggregationStrategy(),\n-                                                                isParallelProcessing(), getExecutorService(), isStreaming(), isStopOnException(), getTimeout());\n+                                                                isParallelProcessing(), getExecutorService(), isStreaming(), isStopOnException(), getTimeout()) {\n+            @Override\n+            protected ExecutorService createAggregateExecutorService(String name) {\n+                // use a shared executor service to avoid creating new thread pools\n+                if (aggregateExecutorService == null) {\n+                    aggregateExecutorService = super.createAggregateExecutorService(\"RecipientList-AggregateTask\");\n+                }\n+                return aggregateExecutorService;\n+            }\n+        };\n         rlp.setIgnoreInvalidEndpoints(isIgnoreInvalidEndpoints());\n \n         // start the service\n", 
  "project": "camel", 
  "linesAdd": 23, 
  "jira_id": "3727", 
  "nb_skipped": 0, 
  "commit": "ff2713d1", 
  "nb_failure": 1, 
  "linesRem": 2
}