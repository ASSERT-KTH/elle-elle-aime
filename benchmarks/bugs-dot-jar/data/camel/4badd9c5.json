{
  "files": 1, 
  "nb_test": 2924, 
  "nb_error": 2, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.camel.component.properties.PropertiesComponentEIPChoiceConvertBodyToTest"
  ], 
  "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java b/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java\nindex a270651..67d135a 100644\n--- a/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java\n+++ b/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java\n@@ -345,6 +345,10 @@ public abstract class ProcessorDefinition<Type extends ProcessorDefinition<Type>\n     protected Processor createOutputsProcessor(RouteContext routeContext, Collection<ProcessorDefinition> outputs) throws Exception {\n         List<Processor> list = new ArrayList<Processor>();\n         for (ProcessorDefinition<?> output : outputs) {\n+\n+            // resolve properties before we create the processor\n+            resolvePropertyPlaceholders(routeContext, output);\n+\n             Processor processor = null;\n             // at first use custom factory\n             if (routeContext.getCamelContext().getProcessorFactory() != null) {\n@@ -383,7 +387,7 @@ public abstract class ProcessorDefinition<Type extends ProcessorDefinition<Type>\n         Processor processor = null;\n \n         // resolve properties before we create the processor\n-        resolvePropertyPlaceholders(routeContext);\n+        resolvePropertyPlaceholders(routeContext, this);\n \n         // at first use custom factory\n         if (routeContext.getCamelContext().getProcessorFactory() != null) {\n@@ -402,28 +406,29 @@ public abstract class ProcessorDefinition<Type extends ProcessorDefinition<Type>\n     }\n \n     /**\n-     * Inspects this processor definition and resolves any property placeholders from its properties.\n+     * Inspects the given processor definition and resolves any property placeholders from its properties.\n      * <p/>\n      * This implementation will check all the getter/setter pairs on this instance and for all the values\n      * (which is a String type) will be property placeholder resolved.\n      *\n      * @param routeContext the route context\n+     * @param definition   the processor definition\n      * @throws Exception is thrown if property placeholders was used and there was an error resolving them\n      * @see org.apache.camel.CamelContext#resolvePropertyPlaceholders(String)\n      * @see org.apache.camel.component.properties.PropertiesComponent\n      */\n-    protected void resolvePropertyPlaceholders(RouteContext routeContext) throws Exception {\n+    protected void resolvePropertyPlaceholders(RouteContext routeContext, ProcessorDefinition definition) throws Exception {\n         if (log.isTraceEnabled()) {\n-            log.trace(\"Resolving property placeholders for: \" + this);\n+            log.trace(\"Resolving property placeholders for: \" + definition);\n         }\n \n         // find all String getter/setter\n         Map<Object, Object> properties = new HashMap<Object, Object>();\n-        IntrospectionSupport.getProperties(this, properties, null);\n+        IntrospectionSupport.getProperties(definition, properties, null);\n \n         if (!properties.isEmpty()) {\n             if (log.isTraceEnabled()) {\n-                log.trace(\"There are \" + properties.size() + \" properties on: \" + this);\n+                log.trace(\"There are \" + properties.size() + \" properties on: \" + definition);\n             }\n \n             // lookup and resolve properties for String based properties\n@@ -437,7 +442,7 @@ public abstract class ProcessorDefinition<Type extends ProcessorDefinition<Type>\n                     text = routeContext.getCamelContext().resolvePropertyPlaceholders(text);\n                     if (text != value) {\n                         // invoke setter as the text has changed\n-                        IntrospectionSupport.setProperty(this, name, text);\n+                        IntrospectionSupport.setProperty(definition, name, text);\n                         if (log.isDebugEnabled()) {\n                             log.debug(\"Changed property [\" + name + \"] from: \" + value + \" to: \" + text);\n                         }\n", 
  "project": "camel", 
  "linesAdd": 12, 
  "jira_id": "3314", 
  "nb_skipped": 0, 
  "commit": "4badd9c5", 
  "nb_failure": 0, 
  "linesRem": 7
}