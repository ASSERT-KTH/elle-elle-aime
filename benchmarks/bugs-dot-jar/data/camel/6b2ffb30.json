{
  "files": 1, 
  "nb_test": 4758, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.camel.component.file.FilerConsumerMoveFailedDoneFileNameTest", 
    "org.apache.camel.management.ManagedThrottlerTest"
  ], 
  "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/component/file/GenericFileOnCompletion.java b/camel-core/src/main/java/org/apache/camel/component/file/GenericFileOnCompletion.java\nindex 5bedc00910..db16a666e4 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/file/GenericFileOnCompletion.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/file/GenericFileOnCompletion.java\n@@ -117,27 +117,7 @@ protected void processStrategyCommit(GenericFileProcessStrategy<T> processStrate\n             }\n         }\n \n-        // must be last in batch to delete the done file name\n-        // delete done file if used (and not noop=true)\n-        boolean complete = exchange.getProperty(Exchange.BATCH_COMPLETE, false, Boolean.class);\n-        if (endpoint.getDoneFileName() != null && !endpoint.isNoop()) {\n-            // done file must be in same path as the original input file\n-            String doneFileName = endpoint.createDoneFileName(absoluteFileName);\n-            ObjectHelper.notEmpty(doneFileName, \"doneFileName\", endpoint);\n-            // we should delete the dynamic done file \n-            if (endpoint.getDoneFileName().indexOf(\"{file:name\") > 0 || complete) { \n-                try {\n-                    // delete done file\n-                    boolean deleted = operations.deleteFile(doneFileName);\n-                    log.trace(\"Done file: {} was deleted: {}\", doneFileName, deleted);\n-                    if (!deleted) {\n-                        log.warn(\"Done file: \" + doneFileName + \" could not be deleted\");\n-                    }\n-                } catch (Exception e) {\n-                    handleException(\"Error deleting done file: \" + doneFileName, exchange, e);\n-                }\n-            }\n-        }\n+        handleDoneFile(exchange);\n \n         try {\n             log.trace(\"Commit file strategy: {} for file: {}\", processStrategy, file);\n@@ -160,6 +140,13 @@ protected void processStrategyRollback(GenericFileProcessStrategy<T> processStra\n         if (log.isWarnEnabled()) {\n             log.warn(\"Rollback file strategy: \" + processStrategy + \" for file: \" + file);\n         }\n+\n+        // only delete done file if moveFailed option is enabled, as otherwise on rollback,\n+        // we should leave the done file so we can retry\n+        if (endpoint.getMoveFailed() != null) {\n+            handleDoneFile(exchange);\n+        }\n+\n         try {\n             processStrategy.rollback(operations, endpoint, exchange, file);\n         } catch (Exception e) {\n@@ -167,6 +154,30 @@ protected void processStrategyRollback(GenericFileProcessStrategy<T> processStra\n         }\n     }\n \n+    protected void handleDoneFile(Exchange exchange) {\n+        // must be last in batch to delete the done file name\n+        // delete done file if used (and not noop=true)\n+        boolean complete = exchange.getProperty(Exchange.BATCH_COMPLETE, false, Boolean.class);\n+        if (endpoint.getDoneFileName() != null && !endpoint.isNoop()) {\n+            // done file must be in same path as the original input file\n+            String doneFileName = endpoint.createDoneFileName(absoluteFileName);\n+            ObjectHelper.notEmpty(doneFileName, \"doneFileName\", endpoint);\n+            // we should delete the dynamic done file\n+            if (endpoint.getDoneFileName().indexOf(\"{file:name\") > 0 || complete) {\n+                try {\n+                    // delete done file\n+                    boolean deleted = operations.deleteFile(doneFileName);\n+                    log.trace(\"Done file: {} was deleted: {}\", doneFileName, deleted);\n+                    if (!deleted) {\n+                        log.warn(\"Done file: \" + doneFileName + \" could not be deleted\");\n+                    }\n+                } catch (Exception e) {\n+                    handleException(\"Error deleting done file: \" + doneFileName, exchange, e);\n+                }\n+            }\n+        }\n+    }\n+\n     protected void handleException(String message, Exchange exchange, Throwable t) {\n         Throwable newt = (t == null) ? new IllegalArgumentException(\"Handling [null] exception\") : t;\n         getExceptionHandler().handleException(message, exchange, newt);\n", 
  "project": "camel", 
  "linesAdd": 32, 
  "jira_id": "6964", 
  "nb_skipped": 1, 
  "commit": "6b2ffb30", 
  "nb_failure": 2, 
  "linesRem": 21
}