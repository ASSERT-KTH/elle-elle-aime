{
    "bug_id": 33,
    "classification": {
        "singleLine": false
    },
    "commit": "0ead2cac",
    "failing_tests": [
        "org.apache.camel.processor.IdempotentConsumerRepoExceptionTest"
    ],
    "files": 1,
    "jira_id": "9480",
    "linesAdd": 17,
    "linesRem": 2,
    "nb_error": 1,
    "nb_failure": 0,
    "nb_skipped": 4,
    "nb_test": 5492,
    "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/processor/idempotent/IdempotentConsumer.java b/camel-core/src/main/java/org/apache/camel/processor/idempotent/IdempotentConsumer.java\nindex e28a214b08..7b64546697 100644\n--- a/camel-core/src/main/java/org/apache/camel/processor/idempotent/IdempotentConsumer.java\n+++ b/camel-core/src/main/java/org/apache/camel/processor/idempotent/IdempotentConsumer.java\n@@ -91,13 +91,23 @@ public void process(Exchange exchange) throws Exception {\n     }\n \n     public boolean process(final Exchange exchange, final AsyncCallback callback) {\n-        final String messageId = messageIdExpression.evaluate(exchange, String.class);\n+        final AsyncCallback target;\n+\n+        final String messageId;\n+        try {\n+            messageId = messageIdExpression.evaluate(exchange, String.class);\n             if (messageId == null) {\n                 exchange.setException(new NoMessageIdException(exchange, messageIdExpression));\n                 callback.done(true);\n                 return true;\n             }\n+        } catch (Exception e) {\n+            exchange.setException(e);\n+            callback.done(true);\n+            return true;\n+        }\n \n+        try {\n             boolean newKey;\n             if (eager) {\n                 // add the key to the repository\n@@ -132,11 +141,16 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {\n             }\n \n             final Synchronization onCompletion = new IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure);\n-        final AsyncCallback target = new IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager);\n+            target = new IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager);\n             if (!completionEager) {\n                 // the scope is to do the idempotent completion work as an unit of work on the exchange when its done being routed\n                 exchange.addOnCompletion(onCompletion);\n             }\n+        } catch (Exception e) {\n+            exchange.setException(e);\n+            callback.done(true);\n+            return true;\n+        }\n \n         // process the exchange\n         return processor.process(exchange, target);\n",
    "project": "camel",
    "buggy_compile_success": false,
    "buggy_test_success": false,
    "fixed_compile_success": false,
    "fixed_test_success": false
}