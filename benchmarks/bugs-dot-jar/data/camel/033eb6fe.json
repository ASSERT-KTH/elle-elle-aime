{
  "files": 6, 
  "nb_test": 4175, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.camel.component.file.FileProducerCharsetUTFtoISOTest"
  ], 
  "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/component/file/FileBinding.java b/camel-core/src/main/java/org/apache/camel/component/file/FileBinding.java\nindex 4fd01626f4..8a63748c3b 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/file/FileBinding.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/file/FileBinding.java\n@@ -54,7 +54,7 @@ public void setBody(GenericFile<File> file, Object body) {\n     public void loadContent(Exchange exchange, GenericFile<?> file) throws IOException {\n         if (content == null) {\n             try {\n-                content = exchange.getContext().getTypeConverter().mandatoryConvertTo(byte[].class, file.getFile());\n+                content = exchange.getContext().getTypeConverter().mandatoryConvertTo(byte[].class, exchange, file.getFile());\n             } catch (NoTypeConversionAvailableException e) {\n                 throw new IOException(\"Cannot load file content: \" + file.getAbsoluteFilePath(), e);\n             }\ndiff --git a/camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java b/camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java\nindex f22056eafd..fbc60bc9f1 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/file/FileOperations.java\n@@ -21,7 +21,10 @@\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n import java.io.RandomAccessFile;\n+import java.io.Reader;\n+import java.io.Writer;\n import java.nio.ByteBuffer;\n import java.nio.channels.FileChannel;\n import java.util.Date;\n@@ -29,6 +32,8 @@\n \n import org.apache.camel.Exchange;\n import org.apache.camel.InvalidPayloadException;\n+import org.apache.camel.WrappedFile;\n+import org.apache.camel.converter.IOConverter;\n import org.apache.camel.util.FileUtil;\n import org.apache.camel.util.IOHelper;\n import org.apache.camel.util.ObjectHelper;\n@@ -173,10 +178,24 @@ public boolean storeFile(String fileName, Exchange exchange) throws GenericFileO\n         // 3. write stream to file\n         try {\n \n-            // is the body file based\n+            // determine charset, exchange property overrides endpoint configuration\n+            String charset = IOHelper.getCharsetName(exchange, false);\n+            if (charset == null) {\n+                charset = endpoint.getCharset();\n+            }\n+\n+            // we can optimize and use file based if no charset must be used, and the input body is a file\n             File source = null;\n-            // get the File Object from in message\n-            source = exchange.getIn().getBody(File.class);\n+            if (charset == null) {\n+                // if no charset, then we can try using file directly (optimized)\n+                Object body = exchange.getIn().getBody();\n+                if (body instanceof WrappedFile) {\n+                    body = ((WrappedFile) body).getFile();\n+                }\n+                if (body instanceof File) {\n+                    source = (File) body;\n+                }\n+            }\n \n             if (source != null) {\n                 // okay we know the body is a file type\n@@ -205,9 +224,22 @@ public boolean storeFile(String fileName, Exchange exchange) throws GenericFileO\n                 }\n             }\n \n+            if (charset != null) {\n+                // charset configured so we must use a reader so we can write with encoding\n+                Reader in = exchange.getIn().getBody(Reader.class);\n+                if (in == null) {\n+                    // okay no direct reader conversion, so use an input stream (which a lot can be converted as)\n+                    InputStream is = exchange.getIn().getMandatoryBody(InputStream.class);\n+                    in = new InputStreamReader(is);\n+                }\n+                // buffer the reader\n+                in = IOHelper.buffered(in);\n+                writeFileByReaderWithCharset(in, file, charset);\n+            } else {\n                 // fallback and use stream based\n                 InputStream in = exchange.getIn().getMandatoryBody(InputStream.class);\n                 writeFileByStream(in, file);\n+            }\n             // try to keep last modified timestamp if configured to do so\n             keepLastModified(exchange, file);\n             return true;\n@@ -286,6 +317,19 @@ private void writeFileByStream(InputStream in, File target) throws IOException {\n         }\n     }\n \n+    private void writeFileByReaderWithCharset(Reader in, File target, String charset) throws IOException {\n+        boolean append = endpoint.getFileExist() == GenericFileExist.Append;\n+        Writer out = IOConverter.toWriter(target, append, charset);\n+        try {\n+            LOG.trace(\"Using Reader to transfer from: {} to: {} with charset: {}\", new Object[]{in, out, charset});\n+            int size = endpoint.getBufferSize();\n+            IOHelper.copy(in, out, size);\n+        } finally {\n+            IOHelper.close(in, target.getName(), LOG);\n+            IOHelper.close(out, target.getName(), LOG);\n+        }\n+    }\n+\n     /**\n      * Creates and prepares the output file channel. Will position itself in correct position if the file is writable\n      * eg. it should append or override any existing content.\ndiff --git a/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConverter.java b/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConverter.java\nindex 76bb929023..49bc19d9d1 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConverter.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/file/GenericFileConverter.java\n@@ -17,7 +17,6 @@\n package org.apache.camel.component.file;\n \n import java.io.File;\n-import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.Serializable;\n@@ -25,9 +24,9 @@\n import org.apache.camel.Converter;\n import org.apache.camel.Exchange;\n import org.apache.camel.FallbackConverter;\n+import org.apache.camel.NoTypeConversionAvailableException;\n import org.apache.camel.TypeConverter;\n import org.apache.camel.spi.TypeConverterRegistry;\n-import org.apache.camel.util.IOHelper;\n \n /**\n  * A set of converter methods for working with generic file types\n@@ -64,11 +63,15 @@ public static Object convertTo(Class<?> type, Exchange exchange, Object value, T\n     }\n \n     @Converter\n-    public static InputStream genericFileToInputStream(GenericFile<?> file, Exchange exchange) throws IOException {\n+    public static InputStream genericFileToInputStream(GenericFile<?> file, Exchange exchange) throws IOException, NoTypeConversionAvailableException {\n         if (exchange != null) {\n-            // use a file input stream if its a java.io.File\n             if (file.getFile() instanceof java.io.File) {\n-                return IOHelper.buffered(new FileInputStream((File) file.getFile()));\n+                // prefer to use a file input stream if its a java.io.File (must use type converter to take care of encoding)\n+                File f = (File) file.getFile();\n+                InputStream is = exchange.getContext().getTypeConverter().convertTo(InputStream.class, exchange, f);\n+                if (is != null) {\n+                    return is;\n+                }\n             }\n             // otherwise ensure the body is loaded as we want the input stream of the body\n             file.getBinding().loadContent(exchange, file);\ndiff --git a/camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java b/camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java\nindex b00cdf0ee6..feab07beb2 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/file/GenericFileProducer.java\n@@ -59,8 +59,6 @@ public String normalizePath(String name) {\n     }\n \n     public void process(Exchange exchange) throws Exception {\n-        endpoint.configureExchange(exchange);\n-\n         String target = createFileName(exchange);\n \n         // use lock for same file name to avoid concurrent writes to the same file\ndiff --git a/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java b/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java\nindex 0307aef035..fcc6fc86a1 100644\n--- a/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java\n+++ b/camel-core/src/main/java/org/apache/camel/converter/IOConverter.java\n@@ -101,12 +101,16 @@ public static OutputStream toOutputStream(File file) throws FileNotFoundExceptio\n      */\n     @Deprecated\n     public static BufferedWriter toWriter(File file) throws IOException {\n-        return toWriter(file, null);\n+        return toWriter(file, false, IOHelper.getCharsetName(null, true));\n     }\n     \n     @Converter\n     public static BufferedWriter toWriter(File file, Exchange exchange) throws IOException {\n-        return IOHelper.buffered(new EncodingFileWriter(file, IOHelper.getCharsetName(exchange)));\n+        return toWriter(file, false, IOHelper.getCharsetName(exchange));\n+    }\n+\n+    public static BufferedWriter toWriter(File file, boolean append, String charset) throws IOException {\n+        return IOHelper.buffered(new EncodingFileWriter(file, append, charset));\n     }\n \n     /**\n@@ -434,6 +438,16 @@ public EncodingFileWriter(File file, String charset)\n             super(new FileOutputStream(file), charset);\n         }\n \n+        /**\n+         * @param file file to write\n+         * @param append whether to append to the file\n+         * @param charset character set to use\n+         */\n+        public EncodingFileWriter(File file, boolean append, String charset)\n+            throws FileNotFoundException, UnsupportedEncodingException {\n+            super(new FileOutputStream(file, append), charset);\n+        }\n+\n     }\n     \n     /**\ndiff --git a/camel-core/src/main/java/org/apache/camel/util/IOHelper.java b/camel-core/src/main/java/org/apache/camel/util/IOHelper.java\nindex 79aa06a399..903ce19a7d 100644\n--- a/camel-core/src/main/java/org/apache/camel/util/IOHelper.java\n+++ b/camel-core/src/main/java/org/apache/camel/util/IOHelper.java\n@@ -191,6 +191,20 @@ public static void copyAndCloseInput(InputStream input, OutputStream output, int\n         close(input, null, LOG);\n     }\n \n+    public static int copy(final Reader input, final Writer output, int bufferSize) throws IOException {\n+        final char[] buffer = new char[bufferSize];\n+        int n = input.read(buffer);\n+        int total = 0;\n+        while (-1 != n) {\n+            output.write(buffer, 0, n);\n+            total += n;\n+            n = input.read(buffer);\n+        }\n+        output.flush();\n+        return total;\n+    }\n+\n+\n     /**\n      * Forces any updates to this channel's file to be written to the storage device that contains it.\n      *\n", 
  "project": "camel", 
  "linesAdd": 87, 
  "jira_id": "5215", 
  "nb_skipped": 1, 
  "commit": "033eb6fe", 
  "nb_failure": 1, 
  "linesRem": 13
}