{
  "files": 2, 
  "nb_test": 3091, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.camel.language.BeanLanguageInvalidOGNLTest"
  ], 
  "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/component/bean/MethodNotFoundException.java b/camel-core/src/main/java/org/apache/camel/component/bean/MethodNotFoundException.java\nindex 8dceafdd89..e0ecab3bd1 100644\n--- a/camel-core/src/main/java/org/apache/camel/component/bean/MethodNotFoundException.java\n+++ b/camel-core/src/main/java/org/apache/camel/component/bean/MethodNotFoundException.java\n@@ -30,10 +30,12 @@\n     private final Object bean;\n     private final String methodName;\n     @SuppressWarnings(\"rawtypes\")\n-    private final List<Class> parameterTypes;\n+    private List<Class> parameterTypes;\n \n     public MethodNotFoundException(Exchange exchange, Object pojo, String methodName) {\n-        this(exchange, pojo, methodName, null);\n+        super(\"Method with name: \" + methodName + \" not found on bean: \" + pojo, exchange);\n+        this.methodName = methodName;\n+        this.bean = pojo;\n     }\n     \n     @SuppressWarnings(\"rawtypes\")\n@@ -44,6 +46,12 @@ public MethodNotFoundException(Exchange exchange, Object pojo, String methodName\n         this.parameterTypes = parameterTypes;\n     }\n \n+    public MethodNotFoundException(Object pojo, String methodName, Throwable cause) {\n+        super(\"Method with name: \" + methodName + \" not found on bean: \" + pojo, null, cause);\n+        this.methodName = methodName;\n+        this.bean = pojo;\n+    }\n+\n     public String getMethodName() {\n         return methodName;\n     }\ndiff --git a/camel-core/src/main/java/org/apache/camel/model/language/MethodCallExpression.java b/camel-core/src/main/java/org/apache/camel/model/language/MethodCallExpression.java\nindex 511b5add6a..46aa7b702a 100644\n--- a/camel-core/src/main/java/org/apache/camel/model/language/MethodCallExpression.java\n+++ b/camel-core/src/main/java/org/apache/camel/model/language/MethodCallExpression.java\n@@ -27,13 +27,16 @@\n \n import org.apache.camel.CamelContext;\n import org.apache.camel.Expression;\n+import org.apache.camel.ExpressionIllegalSyntaxException;\n import org.apache.camel.Predicate;\n import org.apache.camel.component.bean.BeanHolder;\n import org.apache.camel.component.bean.BeanInfo;\n import org.apache.camel.component.bean.MethodNotFoundException;\n import org.apache.camel.component.bean.RegistryBean;\n import org.apache.camel.language.bean.BeanExpression;\n+import org.apache.camel.language.bean.RuntimeBeanExpressionException;\n import org.apache.camel.util.ObjectHelper;\n+import org.apache.camel.util.OgnlHelper;\n \n /**\n  * For expressions and predicates using the\n@@ -127,22 +130,23 @@ public void setParameterType(Class parameterType) {\n     \n     @Override\n     public Expression createExpression(CamelContext camelContext) {\n+        Expression answer;\n         if (beanType != null) {\n             instance = ObjectHelper.newInstance(beanType);\n-            return new BeanExpression(instance, getMethod(), parameterType);\n+            answer = new BeanExpression(instance, getMethod(), parameterType);\n         } else if (instance != null) {\n-            return new BeanExpression(instance, getMethod(), parameterType);\n+            answer = new BeanExpression(instance, getMethod(), parameterType);\n         } else {\n             String ref = beanName();\n             // if its a ref then check that the ref exists\n             BeanHolder holder = new RegistryBean(camelContext, ref);\n             // get the bean which will check that it exists\n             instance = holder.getBean();\n-            // only validate when it was a ref for a bean, so we can eager check\n-            // this on startup of Camel\n-            validateHasMethod(camelContext, instance, getMethod(), parameterType);\n-            return new BeanExpression(ref, getMethod(), parameterType);\n+            answer = new BeanExpression(ref, getMethod(), parameterType);\n         }\n+\n+        validateHasMethod(camelContext, instance, getMethod(), parameterType);\n+        return answer;\n     }\n \n     @Override\n@@ -151,7 +155,9 @@ public Predicate createPredicate(CamelContext camelContext) {\n     }\n \n     /**\n-     * Validates the given bean has the method\n+     * Validates the given bean has the method.\n+     * <p/>\n+     * This implementation will skip trying to validate OGNL method name expressions.\n      *\n      * @param context  camel context\n      * @param bean     the bean instance\n@@ -164,6 +170,17 @@ protected void validateHasMethod(CamelContext context, Object bean, String metho\n             return;\n         }\n \n+        // do not try to validate ognl methods\n+        if (OgnlHelper.isValidOgnlExpression(method)) {\n+            return;\n+        }\n+\n+        // if invalid OGNL then fail\n+        if (OgnlHelper.isInvalidValidOgnlExpression(method)) {\n+            ExpressionIllegalSyntaxException cause = new ExpressionIllegalSyntaxException(method);\n+            throw ObjectHelper.wrapRuntimeCamelException(new MethodNotFoundException(bean, method, cause));\n+        }\n+\n         BeanInfo info = new BeanInfo(context, bean.getClass());\n         List<Class> parameterTypes = new ArrayList<Class>();\n         if (parameterType != null) {\n", 
  "project": "camel", 
  "linesAdd": 34, 
  "jira_id": "3545", 
  "nb_skipped": 0, 
  "commit": "050c542e", 
  "nb_failure": 1, 
  "linesRem": 9
}