{
  "files": 1, 
  "nb_test": 5551, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.camel.processor.TrySetFaultFinallyTest"
  ], 
  "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/processor/FinallyProcessor.java b/camel-core/src/main/java/org/apache/camel/processor/FinallyProcessor.java\nindex b04e1721ba..4fe21a6a5f 100644\n--- a/camel-core/src/main/java/org/apache/camel/processor/FinallyProcessor.java\n+++ b/camel-core/src/main/java/org/apache/camel/processor/FinallyProcessor.java\n@@ -41,26 +41,80 @@ public FinallyProcessor(Processor processor) {\n \n     @Override\n     public boolean process(final Exchange exchange, final AsyncCallback callback) {\n-        // clear exception so finally block can be executed\n-        final Exception e = exchange.getException();\n+        // clear exception and fault so finally block can be executed\n+        final boolean fault;\n+        if (exchange.hasOut()) {\n+            fault = exchange.getOut().isFault();\n+            exchange.getOut().setFault(false);\n+        } else {\n+            fault = exchange.getIn().isFault();\n+            exchange.getIn().setFault(false);\n+        }\n+\n+        final Exception exception = exchange.getException();\n         exchange.setException(null);\n         // but store the caught exception as a property\n-        if (e != null) {\n-            exchange.setProperty(Exchange.EXCEPTION_CAUGHT, e);\n+        if (exception != null) {\n+            exchange.setProperty(Exchange.EXCEPTION_CAUGHT, exception);\n         }\n+\n         // store the last to endpoint as the failure endpoint\n         if (exchange.getProperty(Exchange.FAILURE_ENDPOINT) == null) {\n             exchange.setProperty(Exchange.FAILURE_ENDPOINT, exchange.getProperty(Exchange.TO_ENDPOINT));\n         }\n \n-        boolean sync = processor.process(exchange, new AsyncCallback() {\n+        // continue processing\n+        return processor.process(exchange, new FinallyAsyncCallback(exchange, callback, exception, fault));\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Finally{\" + getProcessor() + \"}\";\n+    }\n+\n+    public String getTraceLabel() {\n+        return \"finally\";\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(String id) {\n+        this.id = id;\n+    }\n+\n+    private static final class FinallyAsyncCallback implements AsyncCallback {\n+\n+        private final Exchange exchange;\n+        private final AsyncCallback callback;\n+        private final Exception exception;\n+        private final boolean fault;\n+\n+        public FinallyAsyncCallback(Exchange exchange, AsyncCallback callback, Exception exception, boolean fault) {\n+            this.exchange = exchange;\n+            this.callback = callback;\n+            this.exception = exception;\n+            this.fault = fault;\n+        }\n+\n+        @Override\n         public void done(boolean doneSync) {\n-                if (e == null) {\n+            try {\n+                if (exception == null) {\n                     exchange.removeProperty(Exchange.FAILURE_ENDPOINT);\n                 } else {\n                     // set exception back on exchange\n-                    exchange.setException(e);\n-                    exchange.setProperty(Exchange.EXCEPTION_CAUGHT, e);\n+                    exchange.setException(exception);\n+                    exchange.setProperty(Exchange.EXCEPTION_CAUGHT, exception);\n+                }\n+                // set fault flag back\n+                if (fault) {\n+                    if (exchange.hasOut()) {\n+                        exchange.getOut().setFault(true);\n+                    } else {\n+                        exchange.getIn().setFault(true);\n+                    }\n                 }\n \n                 if (!doneSync) {\n@@ -68,26 +122,16 @@ public void done(boolean doneSync) {\n                     ExchangeHelper.prepareOutToIn(exchange);\n                     LOG.trace(\"Processing complete for exchangeId: {} >>> {}\", exchange.getExchangeId(), exchange);\n                 }\n+            } finally {\n+                // callback must always be called\n                 callback.done(doneSync);\n             }\n-        });\n-        return sync;\n         }\n \n         @Override\n         public String toString() {\n-        return \"Finally{\" + getProcessor() + \"}\";\n+            return \"FinallyAsyncCallback\";\n         }\n-\n-    public String getTraceLabel() {\n-        return \"finally\";\n-    }\n-\n-    public String getId() {\n-        return id;\n     }\n \n-    public void setId(String id) {\n-        this.id = id;\n-    }\n }\n", 
  "project": "camel", 
  "linesAdd": 65, 
  "jira_id": "9673", 
  "nb_skipped": 4, 
  "commit": "7944093f", 
  "nb_failure": 1, 
  "linesRem": 21
}