{
  "files": 1, 
  "nb_test": 5103, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.camel.component.vm.VmMultipleConsumersRemoteRouteTest", 
    "org.apache.camel.processor.CircuitBreakerLoadBalancerTest"
  ], 
  "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/processor/loadbalancer/CircuitBreakerLoadBalancer.java b/camel-core/src/main/java/org/apache/camel/processor/loadbalancer/CircuitBreakerLoadBalancer.java\nindex b8e23b4b9e..3e84e6efc4 100644\n--- a/camel-core/src/main/java/org/apache/camel/processor/loadbalancer/CircuitBreakerLoadBalancer.java\n+++ b/camel-core/src/main/java/org/apache/camel/processor/loadbalancer/CircuitBreakerLoadBalancer.java\n@@ -107,6 +107,13 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {\n \n         if (failures.get() >= threshold && System.currentTimeMillis() - lastFailure < halfOpenAfter) {\n             exchange.setException(new RejectedExecutionException(\"CircuitBreaker Open: failures: \" + failures + \", lastFailure: \" + lastFailure));\n+            /*\n+             * If the circuit opens, we have to prevent the execution of any processor.\n+             * The failures count can be set to 0.\n+             */\n+            failures.set(0);\n+            callback.done(true);\n+            return true;\n         }\n         Processor processor = getProcessors().get(0);\n         if (processor == null) {\n@@ -114,18 +121,20 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {\n         }\n \n         AsyncProcessor albp = AsyncProcessorConverterHelper.convert(processor);\n-        boolean sync = albp.process(exchange, callback);\n+        // Added a callback for processing the exchange in the callback\n+        boolean sync = albp.process(exchange, new CircuitBreakerCallback(exchange, callback));\n         \n+        // We need to check the exception here as albp is use sync call  \n+        if (sync) {\n             boolean failed = hasFailed(exchange);\n-\n             if (!failed) {\n                 failures.set(0);\n             } else {\n                 failures.incrementAndGet();\n                 lastFailure = System.currentTimeMillis();\n             }\n-\n-        if (!sync) {\n+        } else {\n+            // CircuitBreakerCallback can take care of failure check of the exchange\n             log.trace(\"Processing exchangeId: {} is continued being processed asynchronously\", exchange.getExchangeId());\n             return false;\n         }\n@@ -142,4 +151,28 @@ public String toString() {\n     public String getTraceLabel() {\n         return \"circuitbreaker\";\n     }\n+    \n+    class CircuitBreakerCallback implements AsyncCallback {\n+        private final AsyncCallback callback;\n+        private final Exchange exchange;\n+        CircuitBreakerCallback(Exchange exchange, AsyncCallback callback) {\n+            this.callback = callback;\n+            this.exchange = exchange;\n+        }\n+\n+        @Override\n+        public void done(boolean doneSync) {\n+            if (!doneSync) {\n+                boolean failed = hasFailed(exchange);\n+                if (!failed) {\n+                    failures.set(0);\n+                } else {\n+                    failures.incrementAndGet();\n+                    lastFailure = System.currentTimeMillis();\n+                }\n+            }\n+            callback.done(doneSync);\n+        }\n+        \n+    }\n }\n", 
  "project": "camel", 
  "linesAdd": 37, 
  "jira_id": "7973", 
  "nb_skipped": 3, 
  "commit": "799b45df", 
  "nb_failure": 3, 
  "linesRem": 4
}