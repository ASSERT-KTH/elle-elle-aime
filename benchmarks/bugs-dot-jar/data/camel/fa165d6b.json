{
  "files": 1, 
  "nb_test": 4870, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.camel.processor.intercept.InterceptSendToEndpointNormalizePatternTest"
  ], 
  "patch": "diff --git a/camel-core/src/main/java/org/apache/camel/model/InterceptSendToEndpointDefinition.java b/camel-core/src/main/java/org/apache/camel/model/InterceptSendToEndpointDefinition.java\nindex 9b8bdc3ec2..be2dcb96c8 100644\n--- a/camel-core/src/main/java/org/apache/camel/model/InterceptSendToEndpointDefinition.java\n+++ b/camel-core/src/main/java/org/apache/camel/model/InterceptSendToEndpointDefinition.java\n@@ -22,6 +22,7 @@\n import javax.xml.bind.annotation.XmlAttribute;\n import javax.xml.bind.annotation.XmlRootElement;\n \n+import org.apache.camel.CamelContext;\n import org.apache.camel.Endpoint;\n import org.apache.camel.Predicate;\n import org.apache.camel.Processor;\n@@ -30,6 +31,7 @@\n import org.apache.camel.spi.EndpointStrategy;\n import org.apache.camel.spi.RouteContext;\n import org.apache.camel.util.EndpointHelper;\n+import org.apache.camel.util.URISupport;\n \n /**\n  * Represents an XML &lt;interceptToEndpoint/&gt; element\n@@ -95,7 +97,7 @@ public Endpoint registerEndpoint(String uri, Endpoint endpoint) {\n                 if (endpoint instanceof InterceptSendToEndpoint) {\n                     // endpoint already decorated\n                     return endpoint;\n-                } else if (getUri() == null || EndpointHelper.matchEndpoint(routeContext.getCamelContext(), uri, getUri())) {\n+                } else if (getUri() == null || matchPattern(routeContext.getCamelContext(), uri, getUri())) {\n                     // only proxy if the uri is matched decorate endpoint with our proxy\n                     // should be false by default\n                     boolean skip = isSkipSendToOriginalEndpoint();\n@@ -120,6 +122,29 @@ public Endpoint registerEndpoint(String uri, Endpoint endpoint) {\n         return new InterceptEndpointProcessor(uri, detour);\n     }\n \n+    /**\n+     * Does the uri match the pattern.\n+     *\n+     * @param camelContext the CamelContext\n+     * @param uri the uri\n+     * @param pattern the pattern, which can be an endpoint uri as well\n+     * @return <tt>true</tt> if matched and we should intercept, <tt>false</tt> if not matched, and not intercept.\n+     */\n+    protected boolean matchPattern(CamelContext camelContext, String uri, String pattern) {\n+        // match using the pattern as-is\n+        boolean match = EndpointHelper.matchEndpoint(camelContext, uri, pattern);\n+        if (!match) {\n+            try {\n+                // the pattern could be an uri, so we need to normalize it before matching again\n+                pattern = URISupport.normalizeUri(pattern);\n+                match = EndpointHelper.matchEndpoint(camelContext, uri, pattern);\n+            } catch (Exception e) {\n+                // ignore\n+            }\n+        }\n+        return match;\n+    }\n+\n     /**\n      * Applies this interceptor only if the given predicate is true\n      *\n", 
  "project": "camel", 
  "linesAdd": 26, 
  "jira_id": "7304", 
  "nb_skipped": 3, 
  "commit": "fa165d6b", 
  "nb_failure": 1, 
  "linesRem": 1
}