{
  "files": 1, 
  "nb_test": 453, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.plugins.index.lucene.OakDirectoryTest"
  ], 
  "patch": "diff --git a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/OakDirectory.java b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/OakDirectory.java\nindex 946d0c1133..056ddf799c 100644\n--- a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/OakDirectory.java\n+++ b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/OakDirectory.java\n@@ -21,6 +21,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.Collection;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n \n@@ -33,6 +34,7 @@\n import org.apache.jackrabbit.oak.api.Type;\n import org.apache.jackrabbit.oak.spi.state.NodeBuilder;\n import org.apache.jackrabbit.oak.util.PerfLogger;\n+import org.apache.lucene.store.AlreadyClosedException;\n import org.apache.lucene.store.Directory;\n import org.apache.lucene.store.IOContext;\n import org.apache.lucene.store.IndexInput;\n@@ -40,6 +42,7 @@\n import org.apache.lucene.store.Lock;\n import org.apache.lucene.store.LockFactory;\n import org.apache.lucene.store.NoLockFactory;\n+import org.apache.lucene.util.WeakIdentityMap;\n import org.slf4j.LoggerFactory;\n \n import static com.google.common.base.Preconditions.checkArgument;\n@@ -364,29 +367,41 @@ public String toString() {\n     private static class OakIndexInput extends IndexInput {\n \n         private final OakIndexFile file;\n+        private boolean isClone = false;\n+        private final WeakIdentityMap<OakIndexInput, Boolean> clones;\n \n         public OakIndexInput(String name, NodeBuilder file) {\n             super(name);\n             this.file = new OakIndexFile(name, file);\n+            clones = WeakIdentityMap.newConcurrentHashMap();\n         }\n \n         private OakIndexInput(OakIndexInput that) {\n             super(that.toString());\n             this.file = new OakIndexFile(that.file);\n+            clones = null;\n         }\n \n         @Override\n         public OakIndexInput clone() {\n-            return new OakIndexInput(this);\n+            // TODO : shouldn't we call super#clone ?\n+            OakIndexInput clonedIndexInput = new OakIndexInput(this);\n+            clonedIndexInput.isClone = true;\n+            if (clones != null) {\n+                clones.put(clonedIndexInput, Boolean.TRUE);\n+            }\n+            return clonedIndexInput;\n         }\n \n         @Override\n         public void readBytes(byte[] b, int o, int n) throws IOException {\n+            checkNotClosed();\n             file.readBytes(b, o, n);\n         }\n \n         @Override\n         public byte readByte() throws IOException {\n+            checkNotClosed();\n             byte[] b = new byte[1];\n             readBytes(b, 0, 1);\n             return b[0];\n@@ -394,16 +409,19 @@ public byte readByte() throws IOException {\n \n         @Override\n         public void seek(long pos) throws IOException {\n+            checkNotClosed();\n             file.seek(pos);\n         }\n \n         @Override\n         public long length() {\n+            checkNotClosed();\n             return file.length;\n         }\n \n         @Override\n         public long getFilePointer() {\n+            checkNotClosed();\n             return file.position;\n         }\n \n@@ -411,6 +429,20 @@ public long getFilePointer() {\n         public void close() {\n             file.blob = null;\n             file.data = null;\n+\n+            if (clones != null) {\n+                for (Iterator<OakIndexInput> it = clones.keyIterator(); it.hasNext();) {\n+                    final OakIndexInput clone = it.next();\n+                    assert clone.isClone;\n+                    clone.close();\n+                }\n+            }\n+        }\n+\n+        private void checkNotClosed() {\n+            if (file.blob == null && file.data == null) {\n+                throw new AlreadyClosedException(\"Already closed: \" + this);\n+            }\n         }\n \n     }\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 33, 
  "jira_id": "2799", 
  "nb_skipped": 3, 
  "commit": "3979fa8d", 
  "nb_failure": 2, 
  "linesRem": 1
}