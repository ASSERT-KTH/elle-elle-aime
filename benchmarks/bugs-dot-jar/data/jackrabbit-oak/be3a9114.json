{
  "files": 1, 
  "nb_test": 8, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.plugins.segment.standby.StandbyTest"
  ], 
  "patch": "diff --git a/oak-tarmk-standby/src/main/java/org/apache/jackrabbit/oak/plugins/segment/standby/client/StandbyApplyDiff.java b/oak-tarmk-standby/src/main/java/org/apache/jackrabbit/oak/plugins/segment/standby/client/StandbyApplyDiff.java\nindex fc055e25b1..7b32f51662 100644\n--- a/oak-tarmk-standby/src/main/java/org/apache/jackrabbit/oak/plugins/segment/standby/client/StandbyApplyDiff.java\n+++ b/oak-tarmk-standby/src/main/java/org/apache/jackrabbit/oak/plugins/segment/standby/client/StandbyApplyDiff.java\n@@ -26,9 +26,9 @@\n import org.apache.jackrabbit.oak.api.Blob;\n import org.apache.jackrabbit.oak.api.PropertyState;\n import org.apache.jackrabbit.oak.api.Type;\n-import org.apache.jackrabbit.oak.commons.PathUtils;\n-import org.apache.jackrabbit.oak.plugins.memory.EmptyNodeState;\n+import org.apache.jackrabbit.oak.plugins.segment.RecordId;\n import org.apache.jackrabbit.oak.plugins.segment.SegmentBlob;\n+import org.apache.jackrabbit.oak.plugins.segment.SegmentNodeState;\n import org.apache.jackrabbit.oak.plugins.segment.SegmentStore;\n import org.apache.jackrabbit.oak.plugins.segment.standby.store.RemoteSegmentLoader;\n import org.apache.jackrabbit.oak.spi.state.NodeBuilder;\n@@ -50,22 +50,20 @@\n \n     private final String path;\n \n+    private final boolean logOnly;\n+\n     public StandbyApplyDiff(NodeBuilder builder, SegmentStore store,\n             RemoteSegmentLoader loader) {\n-        this(builder, store, loader, \"/\");\n+        this(builder, store, loader, \"/\", false);\n     }\n \n     private StandbyApplyDiff(NodeBuilder builder, SegmentStore store,\n-            RemoteSegmentLoader loader, String path) {\n+            RemoteSegmentLoader loader, String path, boolean logOnly) {\n         this.builder = builder;\n         this.store = store;\n         this.loader = loader;\n         this.path = path;\n-        if (log.isTraceEnabled()) {\n-            if (PathUtils.getDepth(path) < 5) {\n-                log.trace(\"running diff on {}\", path);\n-            }\n-        }\n+        this.logOnly = logOnly;\n     }\n \n     @Override\n@@ -73,7 +71,9 @@ public boolean propertyAdded(PropertyState after) {\n         if (!loader.isRunning()) {\n             return false;\n         }\n+        if (!logOnly) {\n             builder.setProperty(binaryCheck(after));\n+        }\n         return true;\n     }\n \n@@ -82,7 +82,9 @@ public boolean propertyChanged(PropertyState before, PropertyState after) {\n         if (!loader.isRunning()) {\n             return false;\n         }\n+        if (!logOnly) {\n             builder.setProperty(binaryCheck(after));\n+        }\n         return true;\n     }\n \n@@ -91,7 +93,9 @@ public boolean propertyDeleted(PropertyState before) {\n         if (!loader.isRunning()) {\n             return false;\n         }\n+        if (!logOnly) {\n             builder.removeProperty(before.getName());\n+        }\n         return true;\n     }\n \n@@ -143,13 +147,18 @@ public boolean childNodeAdded(String name, NodeState after) {\n         if (!loader.isRunning()) {\n             return false;\n         }\n-        NodeBuilder child = EmptyNodeState.EMPTY_NODE.builder();\n-        boolean success = EmptyNodeState.compareAgainstEmptyState(after,\n-                new StandbyApplyDiff(child, store, loader, path + name + \"/\"));\n-        if (success) {\n-            builder.setChildNode(name, child.getNodeState());\n+\n+        if (after instanceof SegmentNodeState) {\n+            if (log.isTraceEnabled()) {\n+                log.trace(\"childNodeAdded {}, RO:{}\", path + name, logOnly);\n             }\n-        return success;\n+            if (!logOnly) {\n+                RecordId id = ((SegmentNodeState) after).getRecordId();\n+                builder.setChildNode(name, new SegmentNodeState(id));\n+            }\n+            return true;\n+        }\n+        return false;\n     }\n \n     @Override\n@@ -159,8 +168,26 @@ public boolean childNodeChanged(String name, NodeState before,\n             return false;\n         }\n \n+        if (after instanceof SegmentNodeState) {\n+            RecordId id = ((SegmentNodeState) after).getRecordId();\n+\n+            if (log.isTraceEnabled()) {\n+                // if (PathUtils.getDepth(path) < 5) {\n+                RecordId oldId = ((SegmentNodeState) before).getRecordId();\n+                log.trace(\"childNodeChanged {}, {} -> {}, RO:{}\", path + name,\n+                        oldId, id, logOnly);\n+                // }\n+            }\n+            if (!logOnly) {\n+                builder.setChildNode(name, new SegmentNodeState(id));\n+            }\n+\n+            // return true;\n             return after.compareAgainstBaseState(before, new StandbyApplyDiff(\n-                builder.getChildNode(name), store, loader, path + name + \"/\"));\n+                    builder.getChildNode(name), store, loader, path + name\n+                            + \"/\", true));\n+        }\n+        return false;\n     }\n \n     @Override\n@@ -168,7 +195,10 @@ public boolean childNodeDeleted(String name, NodeState before) {\n         if (!loader.isRunning()) {\n             return false;\n         }\n+        log.trace(\"childNodeDeleted {}, RO:{}\", path + name, logOnly);\n+        if (!logOnly) {\n             builder.getChildNode(name).remove();\n+        }\n         return true;\n     }\n }\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 46, 
  "jira_id": "2430", 
  "nb_skipped": 0, 
  "commit": "be3a9114", 
  "nb_failure": 1, 
  "linesRem": 16
}