{
  "files": 2, 
  "nb_test": 1849, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.plugins.document.UnmergedBranchTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java\nindex 92e0b0aa0a..9e721a0cfa 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java\n@@ -556,30 +556,40 @@ public boolean containsRevision(@Nonnull Revision revision) {\n     }\n \n     /**\n-     * Gets a sorted map of uncommitted revisions of this document with the\n+     * Purge the  uncommitted revisions of this document with the\n      * local cluster node id as returned by the {@link RevisionContext}. These\n      * are the {@link #REVISIONS} entries where {@link Utils#isCommitted(String)}\n      * returns false.\n      *\n+     * <p>\n+     *     <bold>Note</bold> - This method should only be invoked upon startup\n+     *     as then only we can safely assume that these revisions would not be\n+     *     committed\n+     * </p>\n+     *\n      * @param context the revision context.\n-     * @return the uncommitted revisions of this document.\n+     * @return count of the revision entries purged\n      */\n-    public SortedMap<Revision, Revision> getUncommittedRevisions(RevisionContext context) {\n+    public int purgeUncommittedRevisions(RevisionContext context) {\n         // only look at revisions in this document.\n         // uncommitted revisions are not split off\n         Map<Revision, String> valueMap = getLocalRevisions();\n-        SortedMap<Revision, Revision> revisions =\n-                new TreeMap<Revision, Revision>(context.getRevisionComparator());\n+        UpdateOp op = new UpdateOp(getId(), false);\n+        int purgeCount = 0;\n         for (Map.Entry<Revision, String> commit : valueMap.entrySet()) {\n             if (!Utils.isCommitted(commit.getValue())) {\n                 Revision r = commit.getKey();\n                 if (r.getClusterId() == context.getClusterId()) {\n-                    Revision b = Revision.fromString(commit.getValue());\n-                    revisions.put(r, b);\n+                    purgeCount++;\n+                    op.removeMapEntry(REVISIONS, r);\n                 }\n             }\n         }\n-        return revisions;\n+\n+        if (op.hasChanges()) {\n+            store.findAndUpdate(Collection.NODES, op);\n+        }\n+        return purgeCount;\n     }\n \n     /**\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/UnmergedBranches.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/UnmergedBranches.java\nindex b39b8dfb48..9573cb7948 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/UnmergedBranches.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/UnmergedBranches.java\n@@ -21,7 +21,6 @@\n \n import java.util.Comparator;\n import java.util.List;\n-import java.util.SortedMap;\n import java.util.SortedSet;\n import java.util.TreeSet;\n import java.util.concurrent.CopyOnWriteArrayList;\n@@ -31,6 +30,8 @@\n import javax.annotation.Nonnull;\n \n import org.apache.jackrabbit.oak.plugins.document.util.Utils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * <code>UnmergedBranches</code> contains all un-merged branches of a DocumentMK\n@@ -38,6 +39,8 @@\n  */\n class UnmergedBranches {\n \n+    private final Logger log = LoggerFactory.getLogger(getClass());\n+\n     /**\n      * Map of branches with the head of the branch as key.\n      */\n@@ -72,17 +75,9 @@ void init(DocumentStore store, RevisionContext context) {\n         if (doc == null) {\n             return;\n         }\n-        SortedMap<Revision, Revision> revisions = doc.getUncommittedRevisions(context);\n-        while (!revisions.isEmpty()) {\n-            SortedSet<Revision> commits = new TreeSet<Revision>(comparator);\n-            Revision head = revisions.lastKey();\n-            commits.add(head);\n-            Revision base = revisions.remove(head).asTrunkRevision();\n-            while (revisions.containsKey(base)) {\n-                commits.add(base);\n-                base = revisions.remove(base).asTrunkRevision();\n-            }\n-            branches.add(new Branch(commits, base));\n+        int purgeCount = doc.purgeUncommittedRevisions(context);\n+        if (purgeCount > 0) {\n+            log.info(\"Purged [{}] uncommitted branch revision entries\", purgeCount);\n         }\n     }\n \n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 25, 
  "jira_id": "1926", 
  "nb_skipped": 9, 
  "commit": "9225a3e2", 
  "nb_failure": 1, 
  "linesRem": 20
}