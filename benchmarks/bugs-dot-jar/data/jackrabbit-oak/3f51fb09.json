{
  "files": 2, 
  "nb_test": 511, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.plugins.memory.PropertyStatesTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/PropertyStates.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/PropertyStates.java\nindex 3837e967a2..372ca2353b 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/PropertyStates.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/PropertyStates.java\n@@ -32,6 +32,7 @@\n import org.apache.jackrabbit.oak.api.PropertyState;\n import org.apache.jackrabbit.oak.api.Type;\n import org.apache.jackrabbit.oak.plugins.value.Conversions;\n+import org.apache.jackrabbit.oak.plugins.value.ValueImpl;\n \n import static org.apache.jackrabbit.oak.api.Type.STRINGS;\n \n@@ -55,7 +57,7 @@ public static PropertyState createProperty(String name, Value value) throws Repo\n         int type = value.getType();\n         switch (type) {\n             case PropertyType.STRING:\n-                return StringPropertyState.stringProperty(name, value.getString());\n+                return StringPropertyState.stringProperty(name, getString(value, type));\n             case PropertyType.BINARY:\n                 return BinaryPropertyState.binaryProperty(name, value);\n             case PropertyType.LONG:\n@@ -69,7 +71,7 @@ public static PropertyState createProperty(String name, Value value) throws Repo\n             case PropertyType.DECIMAL:\n                 return DecimalPropertyState.decimalProperty(name, value.getDecimal());\n             default:\n-                return new GenericPropertyState(name, value.getString(), Type.fromTag(type, false));\n+                return new GenericPropertyState(name, getString(value, type), Type.fromTag(type, false));\n         }\n     }\n \n@@ -96,7 +98,7 @@ public static PropertyState createProperty(String name, Iterable<Value> values)\n             case PropertyType.STRING:\n                 List<String> strings = Lists.newArrayList();\n                 for (Value value : values) {\n-                    strings.add(value.getString());\n+                    strings.add(getString(value, type));\n                 }\n                 return MultiStringPropertyState.stringProperty(name, strings);\n             case PropertyType.BINARY:\n@@ -138,12 +140,24 @@ public static PropertyState createProperty(String name, Iterable<Value> values)\n             default:\n                 List<String> vals = Lists.newArrayList();\n                 for (Value value : values) {\n-                    vals.add(value.getString());\n+                    vals.add(getString(value, type));\n                 }\n                 return new MultiGenericPropertyState(name, vals, Type.fromTag(type, true));\n         }\n     }\n \n+    private static String getString(Value value, int type) throws RepositoryException {\n+        if (value instanceof ValueImpl) {\n+            return ((ValueImpl) value).getOakString();\n+        }\n+        else if (type == PropertyType.NAME || type == PropertyType.PATH) {\n+            throw new IllegalArgumentException(\"Cannot create name of path property state from Value \" +\n+                    \"of class '\" + value.getClass() + '\\'');\n+        } else {\n+            return value.getString();\n+        }\n+    }\n+\n     /**\n      * Create a {@code PropertyState} from a string.\n      * @param name  The name of the property state\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/value/ValueImpl.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/value/ValueImpl.java\nindex 59ea8460bb..4f733eb05c 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/value/ValueImpl.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/value/ValueImpl.java\n@@ -73,6 +73,15 @@\n         this(checkSingleValued(property), 0, namePathMapper);\n     }\n \n+    /**\n+     * Same as {@link #getString()} unless that names and paths are returned in their\n+     * Oak representation instead of being mapped to their JCR representation.\n+     * @return  A String representation of the value of this property.\n+     */\n+    public String getOakString() {\n+        return propertyState.getValue(Type.STRING, index);\n+    }\n+\n     private static PropertyState checkSingleValued(PropertyState property) {\n         checkArgument(!property.isArray());\n         return property;\n@@ -208,9 +217,9 @@ public String getString() throws RepositoryException {\n \n         switch (getType()) {\n             case PropertyType.NAME:\n-                return namePathMapper.getJcrName(propertyState.getValue(Type.STRING, index));\n+                return namePathMapper.getJcrName(getOakString());\n             case PropertyType.PATH:\n-                String s = propertyState.getValue(Type.STRING, index);\n+                String s = getOakString();\n                 if (s.startsWith(\"[\") && s.endsWith(\"]\")) {\n                     // identifier paths are returned as-is (JCR 2.0, 3.4.3.1)\n                     return s;\n@@ -218,7 +227,7 @@ public String getString() throws RepositoryException {\n                     return namePathMapper.getJcrPath(s);\n                 }\n             default:\n-                return propertyState.getValue(Type.STRING, index);\n+                return getOakString();\n         }\n     }\n \n@@ -273,13 +282,13 @@ public int hashCode() {\n             return propertyState.getValue(Type.BINARY, index).hashCode();\n         }\n         else {\n-            return propertyState.getValue(Type.STRING, index).hashCode();\n+            return getOakString().hashCode();\n         }\n     }\n \n     @Override\n     public String toString() {\n-        return propertyState.getValue(Type.STRING, index);\n+        return getOakString();\n     }\n \n     private static int compare(PropertyState p1, int i1, PropertyState p2, int i2) {\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 31, 
  "jira_id": "554", 
  "nb_skipped": 5, 
  "commit": "3f51fb09", 
  "nb_failure": 2, 
  "linesRem": 9
}