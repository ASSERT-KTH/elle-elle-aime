{
  "files": 1, 
  "nb_test": 1859, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImplTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/token/TokenProviderImpl.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/token/TokenProviderImpl.java\nindex 070996035c..83a0e229dd 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/token/TokenProviderImpl.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/token/TokenProviderImpl.java\n@@ -207,9 +207,11 @@ public TokenInfo createToken(Credentials credentials) {\n     @Override\n     public TokenInfo createToken(String userId, Map<String, ?> attributes) {\n         String error = \"Failed to create login token. \";\n-        NodeUtil tokenParent = getTokenParent(userId);\n+        User user = getUser(userId);\n+        NodeUtil tokenParent = getTokenParent(user);\n         if (tokenParent != null) {\n             try {\n+                String id = user.getID();\n                 long creationTime = new Date().getTime();\n                 NodeUtil tokenNode = createTokenNode(tokenParent, creationTime);\n                 tokenNode.setString(JcrConstants.JCR_UUID, IdentifierManager.generateUUID());\n@@ -218,7 +220,7 @@ public TokenInfo createToken(String userId, Map<String, ?> attributes) {\n                 String nodeId = getIdentifier(tokenNode.getTree());\n                 String token = new StringBuilder(nodeId).append(DELIM).append(key).toString();\n \n-                String keyHash = PasswordUtil.buildPasswordHash(getKeyValue(key, userId), options);\n+                String keyHash = PasswordUtil.buildPasswordHash(getKeyValue(key, id), options);\n                 tokenNode.setString(TOKEN_ATTRIBUTE_KEY, keyHash);\n \n                 long exp;\n@@ -237,7 +239,7 @@ public TokenInfo createToken(String userId, Map<String, ?> attributes) {\n                     }\n                 }\n                 root.commit();\n-                return new TokenInfoImpl(tokenNode, token, userId);\n+                return new TokenInfoImpl(tokenNode, token, id);\n             } catch (NoSuchAlgorithmException e) {\n                 // error while generating login token\n                 log.error(error, e.getMessage());\n@@ -247,7 +249,7 @@ public TokenInfo createToken(String userId, Map<String, ?> attributes) {\n             } catch (CommitFailedException e) {\n                 // conflict while committing changes\n                 log.warn(error, e.getMessage());\n-            } catch (AccessDeniedException e) {\n+            } catch (RepositoryException e) {\n                 log.warn(error, e.getMessage());\n             }\n         } else {\n@@ -320,7 +322,7 @@ private static String generateKey(int size) {\n     }\n \n     @Nonnull\n-    private static String getKeyValue(String key, String userId) {\n+    private static String getKeyValue(@Nonnull String key, @Nonnull String userId) {\n         return key + userId;\n     }\n \n@@ -359,12 +361,29 @@ private String getUserId(Tree tokenTree) {\n     }\n \n     @CheckForNull\n-    private NodeUtil getTokenParent(String userId) {\n-        NodeUtil tokenParent = null;\n-        String parentPath = null;\n+    private User getUser(String userId) {\n         try {\n             Authorizable user = userManager.getAuthorizable(userId);\n             if (user != null && !user.isGroup()) {\n+                return (User) user;\n+            } else {\n+                log.debug(\"Cannot create login token: No corresponding node for User \" + userId + '.');\n+            }\n+        } catch (RepositoryException e) {\n+            // error while accessing user.\n+            log.debug(\"Error while accessing user \" + userId + '.', e);\n+        }\n+        return null;\n+    }\n+\n+    @CheckForNull\n+    private NodeUtil getTokenParent(@CheckForNull User user) {\n+        if (user == null) {\n+            return null;\n+        }\n+        NodeUtil tokenParent = null;\n+        String parentPath = null;\n+        try {\n             String userPath = user.getPath();\n             NodeUtil userNode = new NodeUtil(root.getTree(userPath));\n             tokenParent = userNode.getChild(TOKENS_NODE_NAME);\n@@ -373,12 +392,9 @@ private NodeUtil getTokenParent(String userId) {\n                 parentPath = userPath + '/' + TOKENS_NODE_NAME;\n                 root.commit();\n             }\n-            } else {\n-                log.debug(\"Cannot create login token: No corresponding node for User \" + userId + '.');\n-            }\n         } catch (RepositoryException e) {\n-            // error while accessing user.\n-            log.debug(\"Error while accessing user \" + userId + '.', e);\n+            // error while creating token node.\n+            log.debug(\"Error while creating token node \", e.getMessage());\n         } catch (CommitFailedException e) {\n             // conflict while creating token store for this user -> refresh and\n             // try to get the tree from the updated root.\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 29, 
  "jira_id": "1985", 
  "nb_skipped": 9, 
  "commit": "f620b79b", 
  "nb_failure": 1, 
  "linesRem": 13
}