{
  "files": 2, 
  "nb_test": 151, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.core.RootImplTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/core/TreeImpl.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/core/TreeImpl.java\nindex 9631cbec8f..d20d8203f7 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/core/TreeImpl.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/core/TreeImpl.java\n@@ -21,6 +21,7 @@\n import org.apache.jackrabbit.oak.api.CoreValue;\n import org.apache.jackrabbit.oak.api.PropertyState;\n import org.apache.jackrabbit.oak.api.Tree;\n+import org.apache.jackrabbit.oak.commons.PathUtils;\n import org.apache.jackrabbit.oak.spi.state.ChildNodeEntry;\n import org.apache.jackrabbit.oak.spi.state.NodeState;\n import org.apache.jackrabbit.oak.spi.state.NodeStateBuilder;\n@@ -29,8 +30,10 @@\n import org.apache.jackrabbit.oak.util.Function1;\n import org.apache.jackrabbit.oak.util.Iterators;\n \n+import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Map;\n \n /**\n  * Implementation of tree based on {@link NodeStateBuilder}s. Each subtree\n@@ -42,43 +45,46 @@\n     /** Underlying store */\n     private final NodeStore store;\n \n+    private final NodeStateBuilder rootBuilder;\n+\n     /**\n      * Underlying persistent state or {@code null} if this instance represents an\n      * added tree\n      */\n     private final NodeState baseState;\n \n-    private final NodeStateBuilder builder;\n-\n     /** Listener for changes on this tree */\n     private final Listener listener;\n \n+    /** Parent of this tree */\n+    private TreeImpl parent;\n+\n     /** Name of this tree */\n     private String name;\n \n-    /** Parent of this tree */\n-    private TreeImpl parent;\n+    // FIXME: should be synchronized, and weak refs\n+    private final Map<String, TreeImpl> children = new HashMap<String, TreeImpl>();\n \n-    private TreeImpl(NodeStore store, NodeState baseState, NodeStateBuilder builder,\n+    private TreeImpl(NodeStore store, NodeState baseState, NodeStateBuilder rootBuilder,\n             TreeImpl parent, String name, Listener listener) {\n \n         this.store = store;\n-        this.builder = builder;\n+        this.rootBuilder = rootBuilder;\n         this.baseState = baseState;\n         this.listener = listener;\n-        this.name = name;\n         this.parent = parent;\n+        this.name = name;\n     }\n \n     /**\n      * Create a new instance which represents the root of a tree.\n      * @param store  underlying store to the tree\n-     * @param nodeStateBuilder  builder for the root\n+     * @param rootBuilder  builder for the root\n      * @param listener  change listener for the tree. May be {@code null} if\n      *                  listening to changes is not needed.\n      */\n-    TreeImpl(NodeStore store, NodeStateBuilder nodeStateBuilder, Listener listener) {\n-        this(store, nodeStateBuilder.getNodeState(), nodeStateBuilder, null, \"\", listener);\n+    TreeImpl(NodeStore store, NodeStateBuilder rootBuilder, Listener listener) {\n+        this(store, rootBuilder.getNodeState(), rootBuilder, null, \"\", listener);\n     }\n \n     /**\n@@ -147,15 +153,14 @@ public String getName() {\n \n     @Override\n     public String getPath() {\n+        // Shortcut for root\n         if (parent == null) {\n-            return name;\n-        }\n-        else {\n-            String path = parent.getPath();\n-            return path.isEmpty()\n-                    ? name\n-                    : path + '/' + name;\n+            return \"\";\n         }\n+\n+        StringBuilder sb = new StringBuilder();\n+        buildPath(sb);\n+        return sb.toString();\n     }\n \n     @Override\n@@ -233,17 +238,22 @@ public long getPropertyCount() {\n \n     @Override\n     public TreeImpl getChild(String name) {\n-        NodeStateBuilder childBuilder = builder.getChildBuilder(name);\n-        if (childBuilder == null) {\n+        TreeImpl child = children.get(name);\n+        if (child != null) {\n+            return child;\n+        }\n+\n+        if (!hasChild(name)) {\n             return null;\n         }\n-        else {\n+\n         NodeState childBaseState = baseState == null\n                 ? null\n                 : baseState.getChildNode(name);\n \n-            return new TreeImpl(store, childBaseState, childBuilder, this, name, listener);\n-        }\n+        child = new TreeImpl(store, childBaseState, rootBuilder, this, name, listener);\n+        children.put(name, child);\n+        return child;\n     }\n \n     @Override\n@@ -307,14 +317,24 @@ public long getChildrenCount() {\n         return new Iterable<Tree>() {\n             @Override\n             public Iterator<Tree> iterator() {\n+                final NodeState nodeState = getNodeState();\n+\n                 Iterator<? extends ChildNodeEntry> childEntries =\n-                        getNodeState().getChildNodeEntries().iterator();\n+                        nodeState.getChildNodeEntries().iterator();\n \n                 return Iterators.map(childEntries, new Function1<ChildNodeEntry, Tree>() {\n                     @Override\n                     public Tree apply(ChildNodeEntry entry) {\n-                        NodeStateBuilder childBuilder = builder.getChildBuilder(entry.getName());\n-                        return new TreeImpl(store, childBuilder.getNodeState(), childBuilder, TreeImpl.this, entry.getName(), listener);\n+                        String childName = entry.getName();\n+                        TreeImpl child = children.get(entry.getName());\n+                        if (child != null) {\n+                            return child;\n+                        }\n+\n+                        NodeState childNodeState = nodeState.getChildNode(childName);\n+                        child = new TreeImpl(store, childNodeState, rootBuilder, TreeImpl.this, childName, listener);\n+                        children.put(childName, child);\n+                        return child;\n                     }\n                 });\n             }\n@@ -323,24 +343,27 @@ public Tree apply(ChildNodeEntry entry) {\n \n     @Override\n     public Tree addChild(String name) {\n-        if (builder.addNode(name) != null) {\n+        if (getBuilder().addNode(name) != null) {\n             listener.addChild(this, name);\n         }\n-        return getChild(name);\n+        TreeImpl child = getChild(name);\n+        children.put(name, child);\n+        return child;\n     }\n \n     @Override\n     public boolean removeChild(String name) {\n-        boolean result = builder.removeNode(name);\n+        boolean result = getBuilder().removeNode(name);\n         if (result) {\n             listener.removeChild(this, name);\n+            children.remove(name);\n         }\n         return result;\n     }\n \n     @Override\n     public PropertyState setProperty(String name, CoreValue value) {\n-        PropertyState property = builder.setProperty(name, value);\n+        PropertyState property = getBuilder().setProperty(name, value);\n         if (listener != null) {\n             listener.setProperty(this, name, value);\n         }\n@@ -349,7 +372,7 @@ public PropertyState setProperty(String name, CoreValue value) {\n \n     @Override\n     public PropertyState setProperty(String name, List<CoreValue> values) {\n-        PropertyState property = builder.setProperty(name, values);\n+        PropertyState property = getBuilder().setProperty(name, values);\n         if (listener != null) {\n             listener.setProperty(this, name, values);\n         }\n@@ -358,7 +381,7 @@ public PropertyState setProperty(String name, List<CoreValue> values) {\n \n     @Override\n     public void removeProperty(String name) {\n-        builder.removeProperty(name);\n+        getBuilder().removeProperty(name);\n         if (listener != null) {\n             listener.removeProperty(this, name);\n         }\n@@ -374,8 +397,13 @@ public void removeProperty(String name) {\n      * when {@code destName} already exists at {@code destParent}\n      */\n     public boolean move(TreeImpl destParent, String destName) {\n-        boolean result = builder.moveTo(destParent.builder, destName);\n+        NodeStateBuilder builder = getBuilder();\n+        NodeStateBuilder destParentBuilder = destParent.getBuilder();\n+        boolean result = builder.moveTo(destParentBuilder, destName);\n         if (result) {\n+            parent.children.remove(name);\n+            destParent.children.put(destName, this);\n+\n             TreeImpl oldParent = parent;\n             String oldName = name;\n \n@@ -398,7 +426,7 @@ public boolean move(TreeImpl destParent, String destName) {\n      * when {@code destName} already exists at {@code destParent}\n      */\n     public boolean copy(TreeImpl destParent, String destName) {\n-        boolean result = builder.copyTo(destParent.builder, destName);\n+        boolean result = getBuilder().copyTo(destParent.getBuilder(), destName);\n         if (result) {\n             if (listener != null) {\n                 listener.copy(parent, name, destParent.getChild(destName));\n@@ -410,8 +438,30 @@ public boolean copy(TreeImpl destParent, String destName) {\n \n     //------------------------------------------------------------< private >---\n \n+    private void buildPath(StringBuilder sb) {\n+        if (parent != null) {\n+            parent.buildPath(sb);\n+            if (sb.length() > 0) {\n+                sb.append('/');\n+            }\n+            sb.append(name);\n+        }\n+    }\n+\n+    private NodeStateBuilder getBuilder() {\n+        NodeStateBuilder builder = rootBuilder;\n+        for (String name : PathUtils.elements(getPath())) {\n+            builder = builder.getChildBuilder(name);\n+            if (builder == null) {\n+                throw new IllegalStateException(\"Stale NodeStateBuilder for \" + getPath());\n+            }\n+        }\n+\n+        return builder;\n+    }\n+\n     private NodeState getNodeState() {\n-        return builder.getNodeState();\n+        return getBuilder().getNodeState();\n     }\n \n     private boolean isSame(NodeState state1, NodeState state2) {\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/kernel/KernelNodeStateBuilder.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/kernel/KernelNodeStateBuilder.java\nindex d35d82e679..5c477f8274 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/kernel/KernelNodeStateBuilder.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/kernel/KernelNodeStateBuilder.java\n@@ -28,27 +28,28 @@\n public class KernelNodeStateBuilder implements NodeStateBuilder {\n     private final NodeStateBuilderContext context;\n \n-    private String path;\n+    private KernelNodeStateBuilder parent;\n+    private String name;\n \n-    private KernelNodeStateBuilder(NodeStateBuilderContext context, String path) {\n+    private KernelNodeStateBuilder(NodeStateBuilderContext context, KernelNodeStateBuilder parent, String name) {\n         this.context = context;\n-        this.path = path;\n+        this.parent = parent;\n+        this.name = name;\n     }\n \n     public static NodeStateBuilder create(NodeStateBuilderContext context) {\n-        return new KernelNodeStateBuilder(context, \"\");\n+        return new KernelNodeStateBuilder(context, null, \"\");\n     }\n \n-\n     @Override\n     public NodeState getNodeState() {\n-        return context.getNodeState(path);\n+        return context.getNodeState(getPath());\n     }\n \n     @Override\n     public NodeStateBuilder getChildBuilder(String name) {\n         return hasChild(name)\n-            ? new KernelNodeStateBuilder(context, PathUtils.concat(path, name))\n+            ? new KernelNodeStateBuilder(context, this, name)\n             : null;\n     }\n \n@@ -58,9 +59,9 @@ public NodeStateBuilder addNode(String name, NodeState nodeState) {\n             return null;\n         }\n         else {\n-            String targetPath = PathUtils.concat(path, name);\n+            String targetPath = PathUtils.concat(getPath(), name);\n             context.addNode(nodeState, targetPath);\n-            return new KernelNodeStateBuilder(context, targetPath);\n+            return new KernelNodeStateBuilder(context, this, name);\n         }\n     }\n \n@@ -70,16 +71,16 @@ public NodeStateBuilder addNode(String name) {\n             return null;\n         }\n         else {\n-            String targetPath = PathUtils.concat(path, name);\n+            String targetPath = PathUtils.concat(getPath(), name);\n             context.addNode(targetPath);\n-            return new KernelNodeStateBuilder(context, targetPath);\n+            return new KernelNodeStateBuilder(context, this, name);\n         }\n     }\n \n     @Override\n     public boolean removeNode(String name) {\n         if (hasChild(name)) {\n-            context.removeNode(PathUtils.concat(path, name));\n+            context.removeNode(PathUtils.concat(getPath(), name));\n             return true;\n         }\n         else {\n@@ -91,10 +92,10 @@ public boolean removeNode(String name) {\n     public PropertyState setProperty(String name, CoreValue value) {\n         PropertyState property = new PropertyStateImpl(name, value);\n         if (hasProperty(name)) {\n-            context.setProperty(property, path);\n+            context.setProperty(property, getPath());\n         }\n         else {\n-            context.addProperty(property, path);\n+            context.addProperty(property, getPath());\n         }\n         return property;\n     }\n@@ -103,10 +104,10 @@ public PropertyState setProperty(String name, CoreValue value) {\n     public PropertyState setProperty(String name, List<CoreValue> values) {\n         PropertyState property = new PropertyStateImpl(name, values);\n         if (hasProperty(name)) {\n-            context.setProperty(property, path);\n+            context.setProperty(property, getPath());\n         }\n         else {\n-            context.addProperty(property, path);\n+            context.addProperty(property, getPath());\n         }\n         return property;\n     }\n@@ -114,7 +115,7 @@ public PropertyState setProperty(String name, List<CoreValue> values) {\n     @Override\n     public void removeProperty(String name) {\n         if (hasProperty(name)) {\n-            context.removeProperty(PathUtils.concat(path, name));\n+            context.removeProperty(PathUtils.concat(getPath(), name));\n         }\n     }\n \n@@ -129,10 +130,13 @@ public boolean moveTo(NodeStateBuilder destParent, String destName) {\n         }\n \n         KernelNodeStateBuilder destParentBuilder = (KernelNodeStateBuilder) destParent;\n-        String destPath = PathUtils.concat(destParentBuilder.path, destName);\n+        String destPath = PathUtils.concat(destParentBuilder.getPath(), destName);\n+\n+        context.moveNode(getPath(), destPath);\n+\n+        name = destName;\n+        parent = destParentBuilder;\n \n-        context.moveNode(path, destPath);\n-        path = destPath;\n         return true;\n     }\n \n@@ -147,9 +151,9 @@ public boolean copyTo(NodeStateBuilder destParent, String destName) {\n         }\n \n         KernelNodeStateBuilder destParentBuilder = (KernelNodeStateBuilder) destParent;\n-        String destPath = PathUtils.concat(destParentBuilder.path, destName);\n+        String destPath = PathUtils.concat(destParentBuilder.getPath(), destName);\n \n-        context.copyNode(path, destPath);\n+        context.copyNode(getPath(), destPath);\n         return true;\n     }\n \n@@ -161,6 +165,27 @@ NodeStateBuilderContext getContext() {\n \n     //------------------------------------------------------------< private >---\n \n+    private String getPath() {\n+        // Shortcut for root\n+        if (parent == null) {\n+            return \"\";\n+        }\n+\n+        StringBuilder sb = new StringBuilder();\n+        buildPath(sb);\n+        return sb.toString();\n+    }\n+\n+    private void buildPath(StringBuilder sb) {\n+        if (parent != null) {\n+            parent.buildPath(sb);\n+            if (sb.length() > 0) {\n+                sb.append('/');\n+            }\n+            sb.append(name);\n+        }\n+    }\n+\n     private boolean hasChild(String name) {\n         return getNodeState().getChildNode(name) != null;\n     }\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 131, 
  "jira_id": "93", 
  "nb_skipped": 1, 
  "commit": "0be7e8f0", 
  "nb_failure": 1, 
  "linesRem": 56
}