{
  "files": 2, 
  "nb_test": 1818, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java\nindex 2f238381c3..8000126183 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java\n@@ -798,7 +798,7 @@ public DocumentNodeState getNodeAtRevision(@Nonnull DocumentNodeStore nodeStore,\n                     min, readRevision, validRevisions, lastRevs);\n \n             // check if there may be more recent values in a previous document\n-            if (value != null && !getPreviousRanges().isEmpty()) {\n+            if (!getPreviousRanges().isEmpty()) {\n                 Revision newest = getLocalMap(key).firstKey();\n                 if (isRevisionNewer(nodeStore, newest, value.revision)) {\n                     // not reading the most recent value, we may need to\n@@ -894,13 +894,13 @@ public Revision getLiveRevision(RevisionContext context, Revision maxRev,\n         // check local deleted map first\n         Value value = getLatestValue(context, getLocalDeleted(),\n                 null, maxRev, validRevisions, lastRevs);\n-        if (value == null && !getPreviousRanges().isEmpty()) {\n+        if (value.value == null && !getPreviousRanges().isEmpty()) {\n             // need to check complete map\n             value = getLatestValue(context, getDeleted(),\n                     null, maxRev, validRevisions, lastRevs);\n         }\n \n-        return value != null && \"false\".equals(value.value) ? value.revision : null;\n+        return \"false\".equals(value.value) ? value.revision : null;\n     }\n \n     /**\n@@ -1435,10 +1435,12 @@ private static boolean includeRevision(RevisionContext context,\n \n     /**\n      * Get the latest property value that is larger or equal the min revision,\n-     * and smaller or equal the readRevision revision. A {@code null} return\n-     * value indicates that the property was not set or removed within the given\n-     * range. A non-null value means the the property was either set or removed\n-     * depending on {@link Value#value}.\n+     * and smaller or equal the readRevision revision. The returned value will\n+     * provide the revision when the value was set between the {@code min} and\n+     * {@code readRevision}. The returned value will have a {@code null} value\n+     * contained if there is no valid change within the given range. In this\n+     * case the associated revision is {@code min} or {@code readRevision} if\n+     * no {@code min} is provided.\n      *\n      * @param valueMap the sorted revision-value map\n      * @param min the minimum revision (null meaning unlimited)\n@@ -1446,9 +1448,9 @@ private static boolean includeRevision(RevisionContext context,\n      * @param validRevisions map of revision to commit value considered valid\n      *                       against the given readRevision.\n      * @param lastRevs to keep track of the most recent modification.\n-     * @return the value, or null if not found\n+     * @return the latest value from the {@code readRevision} point of view.\n      */\n-    @CheckForNull\n+    @Nonnull\n     private Value getLatestValue(@Nonnull RevisionContext context,\n                                  @Nonnull Map<Revision, String> valueMap,\n                                  @Nullable Revision min,\n@@ -1486,7 +1488,9 @@ private Value getLatestValue(@Nonnull RevisionContext context,\n                 return new Value(commitRev, entry.getValue());\n             }\n         }\n-        return null;\n+\n+        Revision r = min != null ? min : readRevision;\n+        return new Value(r, null);\n     }\n \n     @Override\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/ValueMap.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/ValueMap.java\nindex 94d21d321b..7b1bec62ac 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/ValueMap.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/ValueMap.java\n@@ -120,27 +120,34 @@ public int size() {\n \n             @Override\n             public String get(Object key) {\n+                Revision r = (Revision) key;\n                 // first check values map of this document\n-                String value = map.get(key);\n-                if (value != null) {\n-                    return value;\n+                if (map.containsKey(r)) {\n+                    return map.get(r);\n                 }\n-                Revision r = (Revision) key;\n                 for (NodeDocument prev : doc.getPreviousDocs(property, r)) {\n-                    value = prev.getValueMap(property).get(key);\n+                    String value = prev.getValueMap(property).get(r);\n                     if (value != null) {\n                         return value;\n                     }\n                 }\n-                // not found\n+                // not found or null\n                 return null;\n             }\n \n             @Override\n             public boolean containsKey(Object key) {\n-                // can use get()\n-                // the values map does not have null values\n-                return get(key) != null;\n+                // check local map first\n+                if (map.containsKey(key)) {\n+                    return true;\n+                }\n+                Revision r = (Revision) key;\n+                for (NodeDocument prev : doc.getPreviousDocs(property, r)) {\n+                    if (prev.getValueMap(property).containsKey(key)) {\n+                        return true;\n+                    }\n+                }\n+                return false;\n             }\n         };\n     }\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 30, 
  "jira_id": "2359", 
  "nb_skipped": 9, 
  "commit": "b3071839", 
  "nb_failure": 1, 
  "linesRem": 19
}