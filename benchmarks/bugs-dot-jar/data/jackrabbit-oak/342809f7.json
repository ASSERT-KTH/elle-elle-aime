{
  "files": 3, 
  "nb_test": 1756, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.namepath.NamePathMapperImplTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/JcrNameParser.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/JcrNameParser.java\nindex 205a754979..ebc7c08cce 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/JcrNameParser.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/JcrNameParser.java\n@@ -92,7 +92,6 @@ public static boolean parse(String jcrName, Listener listener, int index) {\n         String prefix;\n         int nameStart = 0;\n         int state = STATE_PREFIX_START;\n-        boolean trailingSpaces = false;\n \n         for (int i = 0; i < len; i++) {\n             char c = jcrName.charAt(i);\n@@ -101,10 +100,6 @@ public static boolean parse(String jcrName, Listener listener, int index) {\n                     listener.error(\"Prefix must not be empty\");\n                     return false;\n                 } else if (state == STATE_PREFIX) {\n-                    if (trailingSpaces) {\n-                        listener.error(\"Trailing spaces not allowed\");\n-                        return false;\n-                    }\n                     prefix = jcrName.substring(0, i);\n                     if (!XMLChar.isValidNCName(prefix)) {\n                         listener.error(\"Invalid name prefix: \"+ prefix);\n@@ -117,14 +112,7 @@ public static boolean parse(String jcrName, Listener listener, int index) {\n                     listener.error(\"'\" + c + \"' not allowed in name\");\n                     return false;\n                 }\n-                trailingSpaces = false;\n-            } else if (c == ' ') {\n-                if (state == STATE_PREFIX_START || state == STATE_NAME_START) {\n-                    listener.error(\"'\" + c + \"' not valid name start\");\n-                    return false;\n-                }\n-                trailingSpaces = true;\n-            } else if (Character.isWhitespace(c) || c == '[' || c == ']' || c == '*' || c == '|') {\n+            } else if (c == '[' || c == ']' || c == '*' || c == '|') {\n                 listener.error(\"'\" + c + \"' not allowed in name\");\n                 return false;\n             } else if (c == '/') {\n@@ -134,7 +122,6 @@ public static boolean parse(String jcrName, Listener listener, int index) {\n                     listener.error(\"'\" + c + \"' not allowed in name\");\n                     return false;\n                 }\n-                trailingSpaces = false;\n             } else if (c == '{') {\n                 if (state == STATE_PREFIX_START) {\n                     state = STATE_URI_START;\n@@ -147,7 +134,6 @@ public static boolean parse(String jcrName, Listener listener, int index) {\n                     state = STATE_NAME;\n                     nameStart = i;\n                 }\n-                trailingSpaces = false;\n             } else if (c == '}') {\n                 if (state == STATE_URI_START || state == STATE_URI) {\n                     String tmp = jcrName.substring(1, i);\n@@ -178,7 +164,6 @@ public static boolean parse(String jcrName, Listener listener, int index) {\n                     state = STATE_NAME;\n                     nameStart = i;\n                 }\n-                trailingSpaces = false;\n             } else {\n                 if (state == STATE_PREFIX_START) {\n                     state = STATE_PREFIX; // prefix start\n@@ -188,7 +173,6 @@ public static boolean parse(String jcrName, Listener listener, int index) {\n                 } else if (state == STATE_URI_START) {\n                     state = STATE_URI;\n                 }\n-                trailingSpaces = false;\n             }\n         }\n \n@@ -203,10 +187,6 @@ public static boolean parse(String jcrName, Listener listener, int index) {\n             listener.error(\"Local name must not be empty\");\n             return false;\n         }\n-        if (trailingSpaces) {\n-            listener.error(\"Trailing spaces not allowed\");\n-            return false;\n-        }\n \n         return listener.name(jcrName, index);\n     }\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/JcrPathParser.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/JcrPathParser.java\nindex b63958a23f..54c1c9ebb1 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/JcrPathParser.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/JcrPathParser.java\n@@ -80,10 +80,6 @@ public static boolean parse(String jcrPath, Listener listener) {\n         while (pos <= len) {\n             char c = pos == len ? EOF : jcrPath.charAt(pos);\n             pos++;\n-            // special check for whitespace\n-            if (c != ' ' && Character.isWhitespace(c)) {\n-                c = '\\t';\n-            }\n \n             switch (c) {\n                 case '/':\n@@ -205,24 +201,6 @@ public static boolean parse(String jcrPath, Listener listener) {\n                     }\n                     break;\n \n-                case ' ':\n-                    if (state == STATE_PREFIX_START || state == STATE_NAME_START) {\n-                        listener.error('\\'' + jcrPath + \"' is not a valid path. '\" + c +\n-                                \"' not valid name start\");\n-                        return false;\n-                    } else if (state == STATE_INDEX_END) {\n-                        listener.error('\\'' + jcrPath + \"' is not a valid path. '\" + c +\n-                                \"' not valid after index. '/' expected.\");\n-                        return false;\n-                    } else if (state == STATE_DOT || state == STATE_DOTDOT) {\n-                        state = STATE_PREFIX;\n-                    }\n-                    break;\n-\n-                case '\\t':\n-                    listener.error('\\'' + jcrPath + \"' is not a valid path. \" +\n-                            \"Whitespace not a allowed in name.\");\n-                    return false;\n                 case '*':\n                 case '|':\n                     listener.error('\\'' + jcrPath + \"' is not a valid path. '\" + c +\n@@ -257,7 +235,7 @@ public static boolean parse(String jcrPath, Listener listener) {\n                         return false;\n                     }\n             }\n-            wasSlash = c == ' ';\n+            wasSlash = c == '/';\n         }\n         return true;\n     }\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/name/Namespaces.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/name/Namespaces.java\nindex 3b4219c430..d0d1e26e8a 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/name/Namespaces.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/name/Namespaces.java\n@@ -244,10 +244,14 @@ public static boolean isValidLocalName(String local) {\n \n         for (int i = 0; i < local.length(); i++) {\n             char ch = local.charAt(i);\n-            if (i == 0 && Character.isWhitespace(ch)) {\n+            if (Character.isSpaceChar(ch)) {\n+                if (i == 0) {\n                     return false; // leading whitespace\n-            } else if (i == local.length() - 1 && Character.isWhitespace(ch)) {\n+                } else if (i == local.length() - 1) {\n                     return false; // trailing whitespace\n+                } else if (ch != ' ') {\n+                    return false; // only spaces are allowed as whitespace\n+                }\n             } else if (\"/:[]|*\".indexOf(ch) != -1) { // TODO: XMLChar check\n                 return false; // invalid name character\n             }\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 8, 
  "jira_id": "1174", 
  "nb_skipped": 8, 
  "commit": "342809f7", 
  "nb_failure": 1, 
  "linesRem": 46
}