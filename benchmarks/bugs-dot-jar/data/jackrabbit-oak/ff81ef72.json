{
  "files": 1, 
  "nb_test": 2651, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java\nindex f78ffed58d..b1b7de79bd 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/NodeDocument.java\n@@ -966,8 +966,7 @@ public DocumentNodeState getNodeAtRevision(@Nonnull DocumentNodeStore nodeStore,\n \n             // check if there may be more recent values in a previous document\n             if (!getPreviousRanges().isEmpty()) {\n-                Revision newest = local.firstKey();\n-                if (isRevisionNewer(nodeStore, newest, value.revision)) {\n+                if (!isMostRecentCommitted(nodeStore, local, value.revision)) {\n                     // not reading the most recent value, we may need to\n                     // consider previous documents as well\n                     Revision newestPrev = getPreviousRanges().firstKey();\n@@ -1708,6 +1707,39 @@ public static void setHasBinary(@Nonnull UpdateOp op) {\n \n     //----------------------------< internal >----------------------------------\n \n+    /**\n+     * Returns {@code true} if the given {@code revision} is more recent or\n+     * equal to the committed revision in {@code valueMap}. This method assumes\n+     * the given {@code revision} is committed.\n+     *\n+     * @param context the revision context.\n+     * @param valueMap the value map sorted most recent first.\n+     * @param revision a committed revision.\n+     * @return if {@code revision} is the most recent committed revision in the\n+     *          {@code valueMap}.\n+     */\n+    private boolean isMostRecentCommitted(RevisionContext context,\n+                                          SortedMap<Revision, String> valueMap,\n+                                          Revision revision) {\n+        if (valueMap.isEmpty()) {\n+            return true;\n+        }\n+        // shortcut when revision is the first key\n+        Revision first = valueMap.firstKey();\n+        if (!isRevisionNewer(context, first, revision)) {\n+            return true;\n+        }\n+        // need to check commit status\n+        for (Revision r : valueMap.keySet()) {\n+            Revision c = getCommitRevision(r);\n+            if (c != null) {\n+                return !isRevisionNewer(context, c, revision);\n+            }\n+        }\n+        // no committed revision found in valueMap\n+        return true;\n+    }\n+\n     /**\n      * Returns {@code true} if the two revisions are ambiguous. That is, they\n      * are from different cluster nodes and the comparison of the two revision\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 34, 
  "jira_id": "3474", 
  "nb_skipped": 1, 
  "commit": "ff81ef72", 
  "nb_failure": 1, 
  "linesRem": 2
}