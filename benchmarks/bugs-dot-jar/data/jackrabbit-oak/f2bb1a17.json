{
  "files": 6, 
  "nb_test": 1425, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.kernel.KernelNodeBuilderTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/core/MutableTree.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/core/MutableTree.java\nindex a1aa87d122..1b02d0a414 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/core/MutableTree.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/core/MutableTree.java\n@@ -18,8 +18,22 @@\n  */\n package org.apache.jackrabbit.oak.core;\n \n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Iterables.filter;\n+import static com.google.common.collect.Iterables.indexOf;\n+import static org.apache.jackrabbit.oak.api.Tree.Status.EXISTING;\n+import static org.apache.jackrabbit.oak.api.Tree.Status.MODIFIED;\n+import static org.apache.jackrabbit.oak.api.Tree.Status.NEW;\n+import static org.apache.jackrabbit.oak.api.Type.STRING;\n+import static org.apache.jackrabbit.oak.commons.PathUtils.elements;\n+import static org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute;\n+import static org.apache.jackrabbit.oak.spi.state.NodeStateUtils.isHidden;\n+\n import java.util.Collections;\n import java.util.Set;\n+\n import javax.annotation.CheckForNull;\n import javax.annotation.Nonnull;\n \n@@ -36,19 +50,6 @@\n import org.apache.jackrabbit.oak.spi.state.NodeState;\n import org.apache.jackrabbit.oak.spi.state.PropertyBuilder;\n \n-import static com.google.common.base.Preconditions.checkArgument;\n-import static com.google.common.base.Preconditions.checkNotNull;\n-import static com.google.common.base.Preconditions.checkState;\n-import static com.google.common.collect.Iterables.filter;\n-import static com.google.common.collect.Iterables.indexOf;\n-import static org.apache.jackrabbit.oak.api.Tree.Status.EXISTING;\n-import static org.apache.jackrabbit.oak.api.Tree.Status.MODIFIED;\n-import static org.apache.jackrabbit.oak.api.Tree.Status.NEW;\n-import static org.apache.jackrabbit.oak.api.Type.STRING;\n-import static org.apache.jackrabbit.oak.commons.PathUtils.elements;\n-import static org.apache.jackrabbit.oak.commons.PathUtils.isAbsolute;\n-import static org.apache.jackrabbit.oak.spi.state.NodeStateUtils.isHidden;\n-\n public class MutableTree extends AbstractTree {\n \n     /**\n@@ -86,7 +87,7 @@ protected MutableTree createChild(String name) {\n \n     @Override\n     protected boolean isNew() {\n-        return !getBase().exists();\n+        return nodeBuilder.isNew();\n     }\n \n     @Override\n@@ -335,15 +336,6 @@ public String toString() {\n     }\n \n     //---------------------------------------------------------< internal >---\n-\n-    private NodeState getBase() {\n-        if (parent == null) {\n-            return root.getBaseState();\n-        } else {\n-            return parent.getBase().getChildNode(name);\n-        }\n-    }\n-\n     /**\n      * Set the parent and name of this tree.\n      * @param parent  parent of this tree\n@@ -480,7 +472,7 @@ private void beforeWrite() throws IllegalStateException {\n      * Internal method for checking whether this node exists and is visible\n      * (i.e. not hidden).\n      *\n-     * @return {@true} if the node is visible, {@code false} if not\n+     * @return {@code true} if the node is visible, {@code false} if not\n      */\n     private boolean isVisible() {\n         return !isHidden(name) && nodeBuilder.exists();\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/kernel/KernelNodeBuilder.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/kernel/KernelNodeBuilder.java\nindex aa9d7d8126..5058a8b4a2 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/kernel/KernelNodeBuilder.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/kernel/KernelNodeBuilder.java\n@@ -34,7 +34,7 @@\n \n     private NodeState base = null;\n \n-    protected NodeState rootBase = null;\n+    private NodeState rootBase = null;\n \n     KernelNodeBuilder(MemoryNodeBuilder parent, String name, KernelRootBuilder root) {\n         super(parent, name);\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/kernel/KernelRootBuilder.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/kernel/KernelRootBuilder.java\nindex dfe75969fd..87b2a0d392 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/kernel/KernelRootBuilder.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/kernel/KernelRootBuilder.java\n@@ -117,7 +117,8 @@ NodeState rebase() {\n         purge();\n         branch.rebase();\n         NodeState head = branch.getHead();\n-        reset(head);\n+        reset(branch.getBase());\n+        super.reset(head);\n         return head;\n     }\n \ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java\nindex 00136aa516..a83ca87e47 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/memory/MemoryNodeBuilder.java\n@@ -260,7 +260,7 @@ public boolean exists() {\n \n     @Override\n     public boolean isNew() {\n-        return exists() && !base.exists();\n+        return exists() && !getBaseState().exists();\n     }\n \n     @Override\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoNodeBuilder.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoNodeBuilder.java\nindex 4b10bd0e32..383797495e 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoNodeBuilder.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoNodeBuilder.java\n@@ -18,11 +18,13 @@\n \n import org.apache.jackrabbit.oak.plugins.memory.MemoryNodeBuilder;\n import org.apache.jackrabbit.oak.spi.state.NodeBuilder;\n+import org.apache.jackrabbit.oak.spi.state.NodeState;\n \n /**\n  * A node builder implementation for MongoMK.\n  */\n class MongoNodeBuilder extends MemoryNodeBuilder {\n+    private NodeState base;\n \n     protected MongoNodeBuilder(MongoNodeState base) {\n         super(base);\n@@ -32,6 +34,14 @@ private MongoNodeBuilder(MongoNodeBuilder parent, String name) {\n         super(parent, name);\n     }\n \n+    @Override\n+    public NodeState getBaseState() {\n+        if (base == null) {\n+            base = getParent().getBaseState().getChildNode(getName());\n+        }\n+        return base;\n+    }\n+\n     @Override\n     protected MongoNodeBuilder createChildBuilder(String name) {\n         return new MongoNodeBuilder(this, name);\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoRootBuilder.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoRootBuilder.java\nindex 7a1d81517b..aa6460ea56 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoRootBuilder.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/mongomk/MongoRootBuilder.java\n@@ -98,7 +98,8 @@ NodeState rebase() {\n         purge();\n         branch.rebase();\n         NodeState head = branch.getHead();\n-        reset(head);\n+        reset(branch.getBase());\n+        super.reset(head);\n         return head;\n     }\n \n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 32, 
  "jira_id": "1178", 
  "nb_skipped": 6, 
  "commit": "f2bb1a17", 
  "nb_failure": 1, 
  "linesRem": 28
}