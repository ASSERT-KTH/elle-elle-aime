{
  "files": 1, 
  "nb_test": 1809, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.plugins.index.property.strategy.OrderedContentMirrorStorageStrategyTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/property/strategy/OrderedContentMirrorStoreStrategy.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/property/strategy/OrderedContentMirrorStoreStrategy.java\nindex 3f78b784b5..abb7e5a690 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/property/strategy/OrderedContentMirrorStoreStrategy.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/property/strategy/OrderedContentMirrorStoreStrategy.java\n@@ -23,6 +23,7 @@\n import java.util.Collections;\n import java.util.Deque;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.NoSuchElementException;\n import java.util.Random;\n \n@@ -47,6 +48,7 @@\n import com.google.common.base.Strings;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Iterables;\n+import com.google.common.collect.Lists;\n \n /**\n  * Same as for {@link ContentMirrorStoreStrategy} but the order of the keys is kept by using the\n@@ -149,6 +151,7 @@ NodeBuilder fetchKeyNode(@Nonnull NodeBuilder index, @Nonnull String key) {\n                                         \n     @Override\n     void prune(final NodeBuilder index, final Deque<NodeBuilder> builders, final String key) {\n+        LOG.debug(\"prune() - deleting: {}\", key);\n         for (NodeBuilder node : builders) {\n             if (node.hasProperty(\"match\") || node.getChildNodeCount(1) > 0) {\n                 return;\n@@ -166,11 +169,25 @@ void prune(final NodeBuilder index, final Deque<NodeBuilder> builders, final Str\n                             walkedLanes\n                             );\n                         lane0Next = getPropertyNext(walkedLanes[0]);\n+                        if (LOG.isDebugEnabled()) {\n+                            for (int i = 0; i < walkedLanes.length; i++) {\n+                                LOG.debug(\"prune() - walkedLanes[{}]: {}\", i,\n+                                    walkedLanes[i].getName());\n+                            }\n+                        }\n                         for (int lane = walkedLanes.length - 1; lane >= 0; lane--) {\n                             prevNext = getPropertyNext(walkedLanes[lane], lane);\n                             if (key.equals(prevNext)) {\n                                 // if it's actually pointing to us let's deal with it\n                                 currNext = getPropertyNext(node, lane);\n+                                if (LOG.isDebugEnabled()) {\n+                                    LOG.debug(\n+                                        \"prune() - setting next for '{}' on lane '{}' with '{}'\",\n+                                        new Object[] {\n+                                        walkedLanes[lane].getName(),\n+                                        lane,\n+                                        currNext});\n+                                }\n                                 setPropertyNext(index.getChildNode(walkedLanes[lane].getName()),\n                                     currNext, lane);\n                             }\n@@ -997,7 +1014,23 @@ static void setPropertyNext(@Nonnull final NodeBuilder node,\n         if (node != null && value != null && lane >= 0 && lane < OrderedIndex.LANES) {\n             PropertyState next = node.getProperty(NEXT);\n             if (next != null) {\n-                String[] values = Iterables.toArray(next.getValue(Type.STRINGS), String.class);\n+                String[] values;\n+                if (next.isArray()) {\n+                    values = Iterables.toArray(next.getValue(Type.STRINGS), String.class);\n+                    if (values.length < OrderedIndex.LANES) {\n+                        // it could be we increased the number of lanes and running on some existing\n+                        // content\n+                        LOG.debug(\"topping-up the number of lanes.\");\n+                        List<String> vv = Lists.newArrayList(values);\n+                        for (int i = vv.size(); i <= OrderedIndex.LANES; i++) {\n+                            vv.add(\"\");\n+                        }\n+                        values = vv.toArray(new String[0]);\n+                    }\n+                } else {\n+                    values = Iterables.toArray(EMPTY_NEXT, String.class);\n+                    values[0] = next.getValue(Type.STRING);\n+                }\n                 values[lane] = value;\n                 setPropertyNext(node, values);\n             }\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 34, 
  "jira_id": "1899", 
  "nb_skipped": 9, 
  "commit": "df59fb45", 
  "nb_failure": 0, 
  "linesRem": 1
}