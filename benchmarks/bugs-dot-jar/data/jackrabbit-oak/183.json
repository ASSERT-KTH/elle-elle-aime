{
    "bug_id": 183,
    "classification": {
        "singleLine": false
    },
    "commit": "039f892d",
    "failing_tests": [
        "org.apache.jackrabbit.oak.query.IteratorsTest"
    ],
    "files": 1,
    "jira_id": "2418",
    "linesAdd": 2,
    "linesRem": 2,
    "nb_error": 0,
    "nb_failure": 1,
    "nb_skipped": 9,
    "nb_test": 1859,
    "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/FilterIterators.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/FilterIterators.java\nindex 11ae007bb6..6fba745bec 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/FilterIterators.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/FilterIterators.java\n@@ -205,9 +205,9 @@ private void init() {\n                 list.add(x);\n                 checkMemoryLimit(list.size(), settings);\n                 // from time to time, sort and truncate\n-                // this should results in O(n*log(2*keep)) operations,\n+                // this should need less than O(n*log(3*keep)) operations,\n                 // which is close to the optimum O(n*log(keep))\n-                if (list.size() > max * 2) {\n+                if (list.size() > (long) max * 2) {\n                     // remove tail entries right now, to save memory\n                     Collections.sort(list, orderBy);\n                     keepFirst(list, max);\n",
    "project": "jackrabbit-oak",
    "buggy_compile_success": true,
    "buggy_test_success": false,
    "fixed_compile_success": true,
    "fixed_test_success": true
}