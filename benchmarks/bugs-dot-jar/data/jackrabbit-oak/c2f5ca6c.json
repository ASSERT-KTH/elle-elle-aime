{
  "files": 3, 
  "nb_test": 1580, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.plugins.document.SimpleTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentMK.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentMK.java\nindex 4e14f428d6..7c70035836 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentMK.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentMK.java\n@@ -214,7 +214,7 @@ public String getNodes(String path, String revisionId, int depth,\n             if (maxChildNodes-- <= 0) {\n                 break;\n             }\n-            String name = PathUtils.getName(c.children.get((int) i));\n+            String name = c.children.get((int) i);\n             json.key(name).object().endObject();\n         }\n         if (c.hasMore) {\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeState.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeState.java\nindex 64a1eb8fee..7396f4e271 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeState.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeState.java\n@@ -381,28 +381,25 @@ private boolean dispatch(@Nonnull String jsonDiff,\n             }\n             switch (r) {\n                 case '+': {\n-                    String path = t.readString();\n+                    String name = t.readString();\n                     t.read(':');\n                     t.read('{');\n                     while (t.read() != '}') {\n                         // skip properties\n                     }\n-                    String name = PathUtils.getName(path);\n                     continueComparison = diff.childNodeAdded(name, getChildNode(name));\n                     break;\n                 }\n                 case '-': {\n-                    String path = t.readString();\n-                    String name = PathUtils.getName(path);\n+                    String name = t.readString();\n                     continueComparison = diff.childNodeDeleted(name, base.getChildNode(name));\n                     break;\n                 }\n                 case '^': {\n-                    String path = t.readString();\n+                    String name = t.readString();\n                     t.read(':');\n                     if (t.matches('{')) {\n                         t.read('}');\n-                        String name = PathUtils.getName(path);\n                         continueComparison = diff.childNodeChanged(name,\n                                 base.getChildNode(name), getChildNode(name));\n                     } else if (t.matches('[')) {\n@@ -416,21 +413,6 @@ private boolean dispatch(@Nonnull String jsonDiff,\n                     }\n                     break;\n                 }\n-                case '>': {\n-                    String from = t.readString();\n-                    t.read(':');\n-                    String to = t.readString();\n-                    String fromName = PathUtils.getName(from);\n-                    continueComparison = diff.childNodeDeleted(\n-                            fromName, base.getChildNode(fromName));\n-                    if (!continueComparison) {\n-                        break;\n-                    }\n-                    String toName = PathUtils.getName(to);\n-                    continueComparison = diff.childNodeAdded(\n-                            toName, getChildNode(toName));\n-                    break;\n-                }\n                 default:\n                     throw new IllegalArgumentException(\"jsonDiff: illegal token '\"\n                             + t.getToken() + \"' at pos: \" + t.getLastPos() + ' ' + jsonDiff);\n@@ -478,6 +460,9 @@ public NodeState getNodeState() {\n      */\n     public static class Children implements CacheValue {\n \n+        /**\n+         * Ascending sorted list of names of child nodes.\n+         */\n         final ArrayList<String> children = new ArrayList<String>();\n         boolean hasMore;\n \ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java\nindex 3a520e0e65..26bb4b4eb4 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java\n@@ -56,6 +56,8 @@\n \n import org.apache.jackrabbit.mk.api.MicroKernelException;\n import org.apache.jackrabbit.oak.api.PropertyState;\n+import org.apache.jackrabbit.oak.commons.json.JsopReader;\n+import org.apache.jackrabbit.oak.commons.json.JsopTokenizer;\n import org.apache.jackrabbit.oak.spi.blob.BlobStore;\n import org.apache.jackrabbit.oak.commons.json.JsopStream;\n import org.apache.jackrabbit.oak.commons.json.JsopWriter;\n@@ -665,7 +667,7 @@ public DocumentNodeState call() throws Exception {\n                 }\n                 if (c.children.size() < limit) {\n                     // add to children until limit is reached\n-                    c.children.add(p);\n+                    c.children.add(Utils.unshareString(PathUtils.getName(p)));\n                 } else {\n                     // enough collected and we know there are more\n                     c.hasMore = true;\n@@ -785,7 +787,8 @@ public NodeDocument apply(String name) {\n                 new Function<String, DocumentNodeState>() {\n             @Override\n             public DocumentNodeState apply(String input) {\n-                return getNode(input, readRevision);\n+                String p = PathUtils.concat(parent.getPath(), input);\n+                return getNode(p, readRevision);\n             }\n         });\n     }\n@@ -832,10 +835,9 @@ public void applyChanges(Revision rev, Revision before, String path,\n         if (isNew) {\n             CacheValue key = childNodeCacheKey(path, rev, null);\n             DocumentNodeState.Children c = new DocumentNodeState.Children();\n-            Set<String> set = Sets.newTreeSet(added);\n-            set.removeAll(removed);\n+            Set<String> set = Sets.newTreeSet();\n             for (String p : added) {\n-                set.add(Utils.unshareString(p));\n+                set.add(Utils.unshareString(PathUtils.getName(p)));\n             }\n             c.children.addAll(set);\n             nodeChildrenCache.put(key, c);\n@@ -844,13 +846,13 @@ public void applyChanges(Revision rev, Revision before, String path,\n             PathRev key = diffCacheKey(path, before, rev);\n             JsopWriter w = new JsopStream();\n             for (String p : added) {\n-                w.tag('+').key(p).object().endObject().newline();\n+                w.tag('+').key(PathUtils.getName(p)).object().endObject().newline();\n             }\n             for (String p : removed) {\n-                w.tag('-').value(p).newline();\n+                w.tag('-').value(PathUtils.getName(p)).newline();\n             }\n             for (String p : changed) {\n-                w.tag('^').key(p).object().endObject().newline();\n+                w.tag('^').key(PathUtils.getName(p)).object().endObject().newline();\n             }\n             diffCache.put(key, new StringValue(w.toString()));\n         }\n@@ -1148,12 +1150,35 @@ String diff(@Nonnull final String fromRevisionId,\n         try {\n             JsopWriter writer = new JsopStream();\n             diffProperties(from, to, writer);\n-            return writer.toString() + diffCache.get(key, new Callable<StringValue>() {\n+            String compactDiff = diffCache.get(key, new Callable<StringValue>() {\n                 @Override\n                 public StringValue call() throws Exception {\n                     return new StringValue(diffImpl(from, to));\n                 }\n-            });\n+            }).toString();\n+            JsopTokenizer t = new JsopTokenizer(compactDiff);\n+            int r;\n+            do {\n+                r = t.read();\n+                switch (r) {\n+                    case '+':\n+                    case '^': {\n+                        String name = t.readString();\n+                        t.read(':');\n+                        t.read('{');\n+                        t.read('}');\n+                        writer.tag((char) r).key(PathUtils.concat(path, name));\n+                        writer.object().endObject().newline();\n+                        break;\n+                    }\n+                    case '-': {\n+                        String name = t.readString();\n+                        writer.tag('-').value(PathUtils.concat(path, name));\n+                        writer.newline();\n+                    }\n+                }\n+            } while (r != JsopReader.END);\n+            return writer.toString();\n         } catch (ExecutionException e) {\n             if (e.getCause() instanceof MicroKernelException) {\n                 throw (MicroKernelException) e.getCause();\n@@ -1414,7 +1439,6 @@ private static void diffProperties(DocumentNodeState from,\n     private String diffImpl(DocumentNodeState from, DocumentNodeState to)\n             throws MicroKernelException {\n         JsopWriter w = new JsopStream();\n-        diffProperties(from, to, w);\n         // TODO this does not work well for large child node lists\n         // use a document store index instead\n         int max = MANY_CHILDREN_THRESHOLD;\n@@ -1422,8 +1446,8 @@ private String diffImpl(DocumentNodeState from, DocumentNodeState to)\n         fromChildren = getChildren(from, null, max);\n         toChildren = getChildren(to, null, max);\n         if (!fromChildren.hasMore && !toChildren.hasMore) {\n-            diffFewChildren(w, fromChildren, from.getLastRevision(),\n-                    toChildren, to.getLastRevision());\n+            diffFewChildren(w, from.getPath(), fromChildren,\n+                    from.getLastRevision(), toChildren, to.getLastRevision());\n         } else {\n             if (FAST_DIFF) {\n                 diffManyChildren(w, from.getPath(),\n@@ -1432,8 +1456,8 @@ private String diffImpl(DocumentNodeState from, DocumentNodeState to)\n                 max = Integer.MAX_VALUE;\n                 fromChildren = getChildren(from, null, max);\n                 toChildren = getChildren(to, null, max);\n-                diffFewChildren(w, fromChildren, from.getLastRevision(),\n-                        toChildren, to.getLastRevision());\n+                diffFewChildren(w, from.getPath(), fromChildren,\n+                        from.getLastRevision(), toChildren, to.getLastRevision());\n             }\n         }\n         return w.toString();\n@@ -1463,23 +1487,24 @@ private void diffManyChildren(JsopWriter w, String path, Revision fromRev, Revis\n         for (String p : paths) {\n             DocumentNodeState fromNode = getNode(p, fromRev);\n             DocumentNodeState toNode = getNode(p, toRev);\n+            String name = PathUtils.getName(p);\n             if (fromNode != null) {\n                 // exists in fromRev\n                 if (toNode != null) {\n                     // exists in both revisions\n                     // check if different\n                     if (!fromNode.getLastRevision().equals(toNode.getLastRevision())) {\n-                        w.tag('^').key(p).object().endObject().newline();\n+                        w.tag('^').key(name).object().endObject().newline();\n                     }\n                 } else {\n                     // does not exist in toRev -> was removed\n-                    w.tag('-').value(p).newline();\n+                    w.tag('-').value(name).newline();\n                 }\n             } else {\n                 // does not exist in fromRev\n                 if (toNode != null) {\n                     // exists in toRev\n-                    w.tag('+').key(p).object().endObject().newline();\n+                    w.tag('+').key(name).object().endObject().newline();\n                 } else {\n                     // does not exist in either revisions\n                     // -> do nothing\n@@ -1503,21 +1528,22 @@ private static void addPathsForDiff(String path,\n         }\n     }\n \n-    private void diffFewChildren(JsopWriter w, DocumentNodeState.Children fromChildren, Revision fromRev, DocumentNodeState.Children toChildren, Revision toRev) {\n+    private void diffFewChildren(JsopWriter w, String parentPath, DocumentNodeState.Children fromChildren, Revision fromRev, DocumentNodeState.Children toChildren, Revision toRev) {\n         Set<String> childrenSet = Sets.newHashSet(toChildren.children);\n         for (String n : fromChildren.children) {\n             if (!childrenSet.contains(n)) {\n                 w.tag('-').value(n).newline();\n             } else {\n-                DocumentNodeState n1 = getNode(n, fromRev);\n-                DocumentNodeState n2 = getNode(n, toRev);\n+                String path = PathUtils.concat(parentPath, n);\n+                DocumentNodeState n1 = getNode(path, fromRev);\n+                DocumentNodeState n2 = getNode(path, toRev);\n                 // this is not fully correct:\n                 // a change is detected if the node changed recently,\n                 // even if the revisions are well in the past\n                 // if this is a problem it would need to be changed\n-                checkNotNull(n1, \"Node at [%s] not found for fromRev [%s]\", n, fromRev);\n-                checkNotNull(n2, \"Node at [%s] not found for toRev [%s]\", n, toRev);\n-                if (!n1.getId().equals(n2.getId())) {\n+                checkNotNull(n1, \"Node at [%s] not found for fromRev [%s]\", path, fromRev);\n+                checkNotNull(n2, \"Node at [%s] not found for toRev [%s]\", path, toRev);\n+                if (!n1.getLastRevision().equals(n2.getLastRevision())) {\n                     w.tag('^').key(n).object().endObject().newline();\n                 }\n             }\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 57, 
  "jira_id": "1429", 
  "nb_skipped": 6, 
  "commit": "c2f5ca6c", 
  "nb_failure": 1, 
  "linesRem": 46
}