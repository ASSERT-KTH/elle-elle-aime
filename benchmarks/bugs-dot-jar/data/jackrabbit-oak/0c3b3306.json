{
  "files": 1, 
  "nb_test": 1482, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.plugins.segment.CheckpointTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeStore.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeStore.java\nindex a2be1233a6..d75758570c 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeStore.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeStore.java\n@@ -178,17 +178,45 @@ public Blob createBlob(InputStream stream) throws IOException {\n     @Override @Nonnull\n     public synchronized String checkpoint(long lifetime) {\n         checkArgument(lifetime > 0);\n-        // TODO: Guard the checkpoint from garbage collection\n-        return head.getRecordId().toString();\n+        String name = UUID.randomUUID().toString();\n+\n+        // try 5 times\n+        for (int i = 0; i < 5; i++) {\n+            if (commitSemaphore.tryAcquire()) {\n+                try {\n+                    refreshHead();\n+\n+                    SegmentNodeState ns = head;\n+                    RecordId ri = head.getRecordId();\n+\n+                    SegmentRootBuilder builder = ns.builder();\n+                    NodeBuilder cp = builder.child(name);\n+                    cp.setProperty(\"timestamp\", System.currentTimeMillis()\n+                            + lifetime);\n+                    cp.setChildNode(ROOT, ns.getChildNode(ROOT));\n+\n+                    if (journal.setHead(ri, builder.getNodeState()\n+                            .getRecordId())) {\n+                        refreshHead();\n+                        return name;\n+                    }\n+\n+                } finally {\n+                    commitSemaphore.release();\n+                }\n+            }\n+        }\n+\n+        return name;\n     }\n \n     @Override @CheckForNull\n     public synchronized NodeState retrieve(@Nonnull String checkpoint) {\n-        // TODO: Verify validity of the checkpoint\n-        RecordId id = RecordId.fromString(checkNotNull(checkpoint));\n-        SegmentNodeState root =\n-                new SegmentNodeState(store.getWriter().getDummySegment(), id);\n-        return root.getChildNode(ROOT);\n+        NodeState cp = head.getChildNode(checkpoint).getChildNode(ROOT);\n+        if (cp.exists()) {\n+            return cp;\n+        }\n+        return null;\n     }\n \n     private class Commit {\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 35, 
  "jira_id": "1250", 
  "nb_skipped": 6, 
  "commit": "0c3b3306", 
  "nb_failure": 1, 
  "linesRem": 7
}