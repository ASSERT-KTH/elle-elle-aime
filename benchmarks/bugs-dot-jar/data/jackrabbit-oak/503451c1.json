{
  "files": 1, 
  "nb_test": 699, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.plugins.index.p2.strategy.ContentMirrorStoreStrategyTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/p2/strategy/ContentMirrorStoreStrategy.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/p2/strategy/ContentMirrorStoreStrategy.java\nindex 0d3b25980e..f3d48048aa 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/p2/strategy/ContentMirrorStoreStrategy.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/p2/strategy/ContentMirrorStoreStrategy.java\n@@ -42,7 +42,26 @@\n import com.google.common.collect.Sets;\n \n /**\n- * TODO document\n+ * An IndexStoreStrategy implementation that saves the nodes under a hierarchy\n+ * that mirrors the repository tree. <br>\n+ * This should minimize the chance that concurrent updates overlap on the same\n+ * content node.<br>\n+ * <br>\n+ * For example for a node that is under <code>/test/node</code>, the index\n+ * structure will be <code>/oak:index/index/test/node</code>:\n+ * \n+ * <pre>\n+ * <code>\n+ * /\n+ *   test\n+ *     node\n+ *   oak:index\n+ *     index\n+ *       test\n+ *         node\n+ * </code>\n+ * </pre>\n+ * \n  */\n public class ContentMirrorStoreStrategy implements IndexStoreStrategy {\n \n@@ -118,6 +137,12 @@ private static void pruneNode(NodeBuilder parent) {\n     public void insert(NodeBuilder index, String key, boolean unique,\n             Iterable<String> values) throws CommitFailedException {\n         NodeBuilder child = index.child(key);\n+        if (unique\n+                && (child.getProperty(\"match\") != null || child\n+                        .getChildNodeCount() > 0)) {\n+            throw new CommitFailedException(\n+                    \"Uniqueness constraint violated for key \" + key);\n+        }\n \n         for (String add : values) {\n             NodeBuilder indexEntry = child;\n@@ -126,14 +151,6 @@ public void insert(NodeBuilder index, String key, boolean unique,\n             }\n             indexEntry.setProperty(\"match\", true);\n         }\n-        CountingNodeVisitor v = new CountingNodeVisitor(2);\n-        v.visit(child.getNodeState());\n-        int matchCount = v.getCount();\n-        if (matchCount == 0) {\n-            index.removeNode(key);\n-        } else if (unique && matchCount > 1) {\n-            throw new CommitFailedException(\"Uniqueness constraint violated for key \" + key);\n-        }\n     }\n \n     @Override\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 26, 
  "jira_id": "748", 
  "nb_skipped": 1, 
  "commit": "503451c1", 
  "nb_failure": 1, 
  "linesRem": 9
}