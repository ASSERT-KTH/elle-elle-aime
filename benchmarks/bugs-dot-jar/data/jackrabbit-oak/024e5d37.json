{
  "files": 1, 
  "nb_test": 13, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.upgrade.RepositoryUpgradeTest"
  ], 
  "patch": "diff --git a/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositoryUpgrade.java b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositoryUpgrade.java\nindex 72899ea61e..7ba64cbc41 100644\n--- a/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositoryUpgrade.java\n+++ b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/RepositoryUpgrade.java\n@@ -16,18 +16,83 @@\n  */\n package org.apache.jackrabbit.oak.upgrade;\n \n+import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.collect.Lists.newArrayList;\n+import static com.google.common.collect.Lists.newArrayListWithCapacity;\n+import static com.google.common.collect.Maps.newHashMap;\n+import static java.util.Arrays.asList;\n+import static org.apache.jackrabbit.JcrConstants.JCR_AUTOCREATED;\n+import static org.apache.jackrabbit.JcrConstants.JCR_CHILDNODEDEFINITION;\n+import static org.apache.jackrabbit.JcrConstants.JCR_DEFAULTPRIMARYTYPE;\n+import static org.apache.jackrabbit.JcrConstants.JCR_DEFAULTVALUES;\n+import static org.apache.jackrabbit.JcrConstants.JCR_HASORDERABLECHILDNODES;\n+import static org.apache.jackrabbit.JcrConstants.JCR_ISMIXIN;\n+import static org.apache.jackrabbit.JcrConstants.JCR_MANDATORY;\n+import static org.apache.jackrabbit.JcrConstants.JCR_MULTIPLE;\n+import static org.apache.jackrabbit.JcrConstants.JCR_NAME;\n+import static org.apache.jackrabbit.JcrConstants.JCR_NODETYPENAME;\n+import static org.apache.jackrabbit.JcrConstants.JCR_ONPARENTVERSION;\n+import static org.apache.jackrabbit.JcrConstants.JCR_PRIMARYITEMNAME;\n+import static org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE;\n+import static org.apache.jackrabbit.JcrConstants.JCR_PROPERTYDEFINITION;\n+import static org.apache.jackrabbit.JcrConstants.JCR_PROTECTED;\n+import static org.apache.jackrabbit.JcrConstants.JCR_REQUIREDPRIMARYTYPES;\n+import static org.apache.jackrabbit.JcrConstants.JCR_REQUIREDTYPE;\n+import static org.apache.jackrabbit.JcrConstants.JCR_SAMENAMESIBLINGS;\n+import static org.apache.jackrabbit.JcrConstants.JCR_SUPERTYPES;\n+import static org.apache.jackrabbit.JcrConstants.JCR_SYSTEM;\n+import static org.apache.jackrabbit.JcrConstants.JCR_VALUECONSTRAINTS;\n+import static org.apache.jackrabbit.JcrConstants.JCR_VERSIONSTORAGE;\n+import static org.apache.jackrabbit.JcrConstants.NT_CHILDNODEDEFINITION;\n+import static org.apache.jackrabbit.JcrConstants.NT_NODETYPE;\n+import static org.apache.jackrabbit.JcrConstants.NT_PROPERTYDEFINITION;\n+import static org.apache.jackrabbit.core.RepositoryImpl.ACTIVITIES_NODE_ID;\n+import static org.apache.jackrabbit.core.RepositoryImpl.ROOT_NODE_ID;\n+import static org.apache.jackrabbit.core.RepositoryImpl.VERSION_STORAGE_NODE_ID;\n+import static org.apache.jackrabbit.oak.api.Type.BOOLEANS;\n+import static org.apache.jackrabbit.oak.api.Type.DECIMALS;\n+import static org.apache.jackrabbit.oak.api.Type.DOUBLES;\n+import static org.apache.jackrabbit.oak.api.Type.LONGS;\n+import static org.apache.jackrabbit.oak.api.Type.NAME;\n+import static org.apache.jackrabbit.oak.api.Type.NAMES;\n+import static org.apache.jackrabbit.oak.api.Type.PATHS;\n+import static org.apache.jackrabbit.oak.api.Type.STRINGS;\n+import static org.apache.jackrabbit.oak.plugins.memory.PropertyStates.createProperty;\n+import static org.apache.jackrabbit.oak.plugins.name.Namespaces.addCustomMapping;\n+import static org.apache.jackrabbit.oak.plugins.nodetype.NodeTypeConstants.JCR_AVAILABLE_QUERY_OPERATORS;\n+import static org.apache.jackrabbit.oak.plugins.nodetype.NodeTypeConstants.JCR_IS_ABSTRACT;\n+import static org.apache.jackrabbit.oak.plugins.nodetype.NodeTypeConstants.JCR_IS_FULLTEXT_SEARCHABLE;\n+import static org.apache.jackrabbit.oak.plugins.nodetype.NodeTypeConstants.JCR_IS_QUERYABLE;\n+import static org.apache.jackrabbit.oak.plugins.nodetype.NodeTypeConstants.JCR_IS_QUERY_ORDERABLE;\n+import static org.apache.jackrabbit.oak.plugins.nodetype.NodeTypeConstants.JCR_NODE_TYPES;\n+import static org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeConstants.NT_REP_PRIVILEGE;\n+import static org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeConstants.NT_REP_PRIVILEGES;\n+import static org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeConstants.REP_AGGREGATES;\n+import static org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeConstants.REP_BITS;\n+import static org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeConstants.REP_IS_ABSTRACT;\n+import static org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeConstants.REP_NEXT;\n+import static org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeConstants.REP_PRIVILEGES;\n+import static org.apache.jackrabbit.spi.commons.name.NameConstants.ANY_NAME;\n+\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n \n import javax.jcr.NamespaceException;\n+import javax.jcr.PropertyType;\n import javax.jcr.RepositoryException;\n+import javax.jcr.UnsupportedRepositoryOperationException;\n import javax.jcr.security.Privilege;\n import javax.jcr.version.OnParentVersionAction;\n \n+import com.google.common.collect.HashBiMap;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Lists;\n import org.apache.jackrabbit.core.RepositoryContext;\n import org.apache.jackrabbit.core.config.BeanConfig;\n import org.apache.jackrabbit.core.config.LoginModuleConfig;\n@@ -41,6 +106,8 @@\n import org.apache.jackrabbit.core.security.user.UserManagerImpl;\n import org.apache.jackrabbit.oak.api.PropertyState;\n import org.apache.jackrabbit.oak.api.Type;\n+import org.apache.jackrabbit.oak.namepath.GlobalNameMapper;\n+import org.apache.jackrabbit.oak.namepath.NameMapper;\n import org.apache.jackrabbit.oak.plugins.index.CompositeIndexEditorProvider;\n import org.apache.jackrabbit.oak.plugins.index.IndexUpdateProvider;\n import org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexEditorProvider;\n@@ -68,6 +135,8 @@\n import org.apache.jackrabbit.oak.upgrade.security.GroupEditorProvider;\n import org.apache.jackrabbit.oak.upgrade.security.RestrictionEditorProvider;\n import org.apache.jackrabbit.spi.Name;\n+import org.apache.jackrabbit.spi.Path;\n+import org.apache.jackrabbit.spi.Path.Element;\n import org.apache.jackrabbit.spi.QItemDefinition;\n import org.apache.jackrabbit.spi.QNodeDefinition;\n import org.apache.jackrabbit.spi.QNodeTypeDefinition;\n@@ -77,59 +146,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.common.collect.ImmutableMap;\n-\n-import static com.google.common.base.Preconditions.checkState;\n-import static com.google.common.collect.Lists.newArrayList;\n-import static com.google.common.collect.Lists.newArrayListWithCapacity;\n-import static com.google.common.collect.Maps.newHashMap;\n-import static java.util.Arrays.asList;\n-import static org.apache.jackrabbit.JcrConstants.JCR_AUTOCREATED;\n-import static org.apache.jackrabbit.JcrConstants.JCR_CHILDNODEDEFINITION;\n-import static org.apache.jackrabbit.JcrConstants.JCR_DEFAULTPRIMARYTYPE;\n-import static org.apache.jackrabbit.JcrConstants.JCR_HASORDERABLECHILDNODES;\n-import static org.apache.jackrabbit.JcrConstants.JCR_ISMIXIN;\n-import static org.apache.jackrabbit.JcrConstants.JCR_MANDATORY;\n-import static org.apache.jackrabbit.JcrConstants.JCR_MULTIPLE;\n-import static org.apache.jackrabbit.JcrConstants.JCR_NAME;\n-import static org.apache.jackrabbit.JcrConstants.JCR_NODETYPENAME;\n-import static org.apache.jackrabbit.JcrConstants.JCR_ONPARENTVERSION;\n-import static org.apache.jackrabbit.JcrConstants.JCR_PRIMARYITEMNAME;\n-import static org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE;\n-import static org.apache.jackrabbit.JcrConstants.JCR_PROPERTYDEFINITION;\n-import static org.apache.jackrabbit.JcrConstants.JCR_PROTECTED;\n-import static org.apache.jackrabbit.JcrConstants.JCR_REQUIREDPRIMARYTYPES;\n-import static org.apache.jackrabbit.JcrConstants.JCR_REQUIREDTYPE;\n-import static org.apache.jackrabbit.JcrConstants.JCR_SAMENAMESIBLINGS;\n-import static org.apache.jackrabbit.JcrConstants.JCR_SUPERTYPES;\n-import static org.apache.jackrabbit.JcrConstants.JCR_SYSTEM;\n-import static org.apache.jackrabbit.JcrConstants.JCR_VALUECONSTRAINTS;\n-import static org.apache.jackrabbit.JcrConstants.JCR_VERSIONSTORAGE;\n-import static org.apache.jackrabbit.JcrConstants.NT_CHILDNODEDEFINITION;\n-import static org.apache.jackrabbit.JcrConstants.NT_NODETYPE;\n-import static org.apache.jackrabbit.JcrConstants.NT_PROPERTYDEFINITION;\n-import static org.apache.jackrabbit.core.RepositoryImpl.ACTIVITIES_NODE_ID;\n-import static org.apache.jackrabbit.core.RepositoryImpl.ROOT_NODE_ID;\n-import static org.apache.jackrabbit.core.RepositoryImpl.VERSION_STORAGE_NODE_ID;\n-import static org.apache.jackrabbit.oak.api.Type.NAME;\n-import static org.apache.jackrabbit.oak.api.Type.NAMES;\n-import static org.apache.jackrabbit.oak.api.Type.STRINGS;\n-import static org.apache.jackrabbit.oak.plugins.name.Namespaces.addCustomMapping;\n-import static org.apache.jackrabbit.oak.plugins.nodetype.NodeTypeConstants.JCR_AVAILABLE_QUERY_OPERATORS;\n-import static org.apache.jackrabbit.oak.plugins.nodetype.NodeTypeConstants.JCR_IS_ABSTRACT;\n-import static org.apache.jackrabbit.oak.plugins.nodetype.NodeTypeConstants.JCR_IS_FULLTEXT_SEARCHABLE;\n-import static org.apache.jackrabbit.oak.plugins.nodetype.NodeTypeConstants.JCR_IS_QUERYABLE;\n-import static org.apache.jackrabbit.oak.plugins.nodetype.NodeTypeConstants.JCR_IS_QUERY_ORDERABLE;\n-import static org.apache.jackrabbit.oak.plugins.nodetype.NodeTypeConstants.JCR_NODE_TYPES;\n-import static org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeConstants.NT_REP_PRIVILEGE;\n-import static org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeConstants.NT_REP_PRIVILEGES;\n-import static org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeConstants.REP_AGGREGATES;\n-import static org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeConstants.REP_BITS;\n-import static org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeConstants.REP_IS_ABSTRACT;\n-import static org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeConstants.REP_NEXT;\n-import static org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeConstants.REP_PRIVILEGES;\n-import static org.apache.jackrabbit.spi.commons.name.NameConstants.ANY_NAME;\n-\n public class RepositoryUpgrade {\n \n     /**\n@@ -236,10 +252,10 @@ public void copy(RepositoryInitializer initializer) throws RepositoryException {\n                 sc.getWorkspaceInitializer().initialize(builder, workspace);\n             }\n \n-            Map<String, String> uriToPrefix = newHashMap();\n+            HashBiMap<String, String> uriToPrefix = HashBiMap.create();\n             Map<Integer, String> idxToPrefix = newHashMap();\n             copyNamespaces(builder, uriToPrefix, idxToPrefix);\n-            copyNodeTypes(builder);\n+            copyNodeTypes(builder, uriToPrefix.inverse());\n             copyPrivileges(builder);\n \n             NodeState root = builder.getNodeState();\n@@ -458,7 +474,8 @@ private PrivilegeBits resolvePrivilegeBits(\n         return bits;\n     }\n \n-    private void copyNodeTypes(NodeBuilder root) throws RepositoryException {\n+    private void copyNodeTypes(NodeBuilder root, Map<String, String> prefixToUri)\n+            throws RepositoryException {\n         NodeTypeRegistry sourceRegistry = source.getNodeTypeRegistry();\n         NodeBuilder system = root.child(JCR_SYSTEM);\n         NodeBuilder types = system.child(JCR_NODE_TYPES);\n@@ -470,13 +487,14 @@ private void copyNodeTypes(NodeBuilder root) throws RepositoryException {\n             if (!types.hasChildNode(oakName)) {\n                 QNodeTypeDefinition def = sourceRegistry.getNodeTypeDef(name);\n                 NodeBuilder type = types.child(oakName);\n-                copyNodeType(def, type);\n+                copyNodeType(def, type, prefixToUri);\n             }\n         }\n     }\n \n-    private void copyNodeType(QNodeTypeDefinition def, NodeBuilder builder)\n-            throws NamespaceException {\n+    private void copyNodeType(\n+            QNodeTypeDefinition def, NodeBuilder builder, Map<String, String> prefixToUri)\n+            throws RepositoryException {\n         builder.setProperty(JCR_PRIMARYTYPE, NT_NODETYPE, NAME);\n \n         // - jcr:nodeTypeName (NAME) protected mandatory\n@@ -510,7 +528,7 @@ private void copyNodeType(QNodeTypeDefinition def, NodeBuilder builder)\n         QPropertyDefinition[] properties = def.getPropertyDefs();\n         for (int i = 0; i < properties.length; i++) {\n             String name = JCR_PROPERTYDEFINITION + '[' + (i + 1) + ']';\n-            copyPropertyDefinition(properties[i], builder.child(name));\n+            copyPropertyDefinition(properties[i], builder.child(name), prefixToUri);\n         }\n \n         // + jcr:childNodeDefinition (nt:childNodeDefinition) = nt:childNodeDefinition protected sns\n@@ -522,8 +540,8 @@ private void copyNodeType(QNodeTypeDefinition def, NodeBuilder builder)\n     }\n \n     private void copyPropertyDefinition(\n-            QPropertyDefinition def, NodeBuilder builder)\n-            throws NamespaceException {\n+            QPropertyDefinition def, NodeBuilder builder, Map<String, String> prefixToUri)\n+            throws RepositoryException {\n         builder.setProperty(JCR_PRIMARYTYPE, NT_PROPERTYDEFINITION, NAME);\n \n         copyItemDefinition(def, builder);\n@@ -545,9 +563,9 @@ private void copyPropertyDefinition(\n             builder.setProperty(JCR_VALUECONSTRAINTS, strings, STRINGS);\n         }\n         // - jcr:defaultValues (UNDEFINED) protected multiple\n-        QValue[] values = def.getDefaultValues();\n-        if (values != null) {\n-            // TODO\n+        QValue[] qValues = def.getDefaultValues();\n+        if (qValues != null) {\n+            copyDefaultValues(qValues, builder, new GlobalNameMapper(prefixToUri));\n         }\n         // - jcr:multiple (BOOLEAN) protected mandatory\n         builder.setProperty(JCR_MULTIPLE, def.isMultiple());\n@@ -561,6 +579,99 @@ private void copyPropertyDefinition(\n         builder.setProperty(JCR_IS_QUERY_ORDERABLE, def.isQueryOrderable());\n     }\n \n+    private static void copyDefaultValues(QValue[] qValues, NodeBuilder builder,\n+            NameMapper nameMapper) throws RepositoryException {\n+        if (qValues.length == 0) {\n+            builder.setProperty(JCR_DEFAULTVALUES, Collections.<String>emptyList(), STRINGS);\n+        } else {\n+            int type = qValues[0].getType();\n+            switch (type) {\n+                case PropertyType.STRING:\n+                    List<String> strings = newArrayListWithCapacity(qValues.length);\n+                    for (QValue qValue : qValues) {\n+                        strings.add(qValue.getString());\n+                    }\n+                    builder.setProperty(createProperty(JCR_DEFAULTVALUES, strings, STRINGS));\n+                    return;\n+                case PropertyType.LONG:\n+                    List<Long> longs = newArrayListWithCapacity(qValues.length);\n+                    for (QValue qValue : qValues) {\n+                        longs.add(qValue.getLong());\n+                    }\n+                    builder.setProperty(createProperty(JCR_DEFAULTVALUES, longs, LONGS));\n+                    return;\n+                case PropertyType.DOUBLE:\n+                    List<Double> doubles = newArrayListWithCapacity(qValues.length);\n+                    for (QValue qValue : qValues) {\n+                        doubles.add(qValue.getDouble());\n+                    }\n+                    builder.setProperty(createProperty(JCR_DEFAULTVALUES, doubles, DOUBLES));\n+                    return;\n+                case PropertyType.BOOLEAN:\n+                    List<Boolean> booleans = Lists.newArrayListWithCapacity(qValues.length);\n+                    for (QValue qValue : qValues) {\n+                        booleans.add(qValue.getBoolean());\n+                    }\n+                    builder.setProperty(createProperty(JCR_DEFAULTVALUES, booleans, BOOLEANS));\n+                    return;\n+                case PropertyType.NAME:\n+                    List<String> names = Lists.newArrayListWithCapacity(qValues.length);\n+                    for (QValue qValue : qValues) {\n+                        names.add(nameMapper.getOakName(qValue.getName().toString()));\n+                    }\n+                    builder.setProperty(createProperty(JCR_DEFAULTVALUES, names, NAMES));\n+                    return;\n+                case PropertyType.PATH:\n+                    List<String> paths = Lists.newArrayListWithCapacity(qValues.length);\n+                    for (QValue qValue : qValues) {\n+                        paths.add(getOakPath(qValue.getPath(), nameMapper));\n+                    }\n+                    builder.setProperty(createProperty(JCR_DEFAULTVALUES, paths, PATHS));\n+                    return;\n+                case PropertyType.DECIMAL:\n+                    List<BigDecimal> decimals = Lists.newArrayListWithCapacity(qValues.length);\n+                    for (QValue qValue : qValues) {\n+                        decimals.add(qValue.getDecimal());\n+                    }\n+                    builder.setProperty(createProperty(JCR_DEFAULTVALUES, decimals, DECIMALS));\n+                    return;\n+                case PropertyType.DATE:\n+                case PropertyType.URI:\n+                    List<String> values = newArrayListWithCapacity(qValues.length);\n+                    for (QValue qValue : qValues) {\n+                        values.add(qValue.getString());\n+                    }\n+                    builder.setProperty(createProperty(JCR_DEFAULTVALUES, values, Type.fromTag(type, true)));\n+                    return;\n+                default:\n+                    throw new UnsupportedRepositoryOperationException(\n+                            \"Cannot copy default value of type \" + Type.fromTag(type, true));\n+            }\n+        }\n+    }\n+\n+    private static String getOakPath(Path path, NameMapper nameMapper)\n+            throws RepositoryException {\n+        StringBuilder oakPath = new StringBuilder();\n+        String sep = \"\";\n+        for (Element element: path.getElements()) {\n+            if (element.denotesRoot()) {\n+                oakPath.append('/');\n+                continue;\n+            } else if (element.denotesName()) {\n+                oakPath.append(sep).append(nameMapper.getOakName(element.getString()));\n+            } else if (element.denotesCurrent()) {\n+                oakPath.append(sep).append('.');\n+            } else if (element.denotesParent()) {\n+                oakPath.append(sep).append(\"..\");\n+            } else {\n+                throw new UnsupportedRepositoryOperationException(\"Cannot copy default value \" + path);\n+            }\n+            sep = \"/\";\n+        }\n+        return oakPath.toString();\n+    }\n+\n     private void copyChildNodeDefinition(\n             QNodeDefinition def, NodeBuilder builder)\n             throws NamespaceException {\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 176, 
  "jira_id": "1731", 
  "nb_skipped": 0, 
  "commit": "024e5d37", 
  "nb_failure": 1, 
  "linesRem": 65
}