{
  "files": 1, 
  "nb_test": 2884, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexQueryTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/XPathToSQL2Converter.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/XPathToSQL2Converter.java\nindex d64d7cf459..98bcc5e723 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/XPathToSQL2Converter.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/XPathToSQL2Converter.java\n@@ -192,20 +192,23 @@ private Statement convertToStatement(String query) throws ParseException {\n                         currentSelector.path = \"/\";\n                     }\n                 }\n-            } else if (readIf(\"text\")) {\n+            } else if (currentTokenType == IDENTIFIER) {\n+                // probably a path restriction\n+                // String name = readPathSegment();\n+                String identifier = readIdentifier();\n+                if (readIf(\"(\")) {\n+                    if (\"text\".equals(identifier)) {\n                         // \"...text()\"\n                         currentSelector.isChild = false;\n                         pathPattern += \"jcr:xmltext\";\n-                read(\"(\");\n                         read(\")\");\n                         if (currentSelector.isDescendant) {\n                             currentSelector.nodeName = \"jcr:xmltext\";\n                         } else {\n                             currentSelector.path = PathUtils.concat(currentSelector.path, \"jcr:xmltext\");\n                         }                        \n-            } else if (readIf(\"element\")) {\n+                    } else if (\"element\".equals(identifier)) {\n                         // \"...element(...\"\n-                read(\"(\");\n                         if (readIf(\")\")) {\n                             // any\n                             pathPattern += \"%\";\n@@ -223,14 +226,22 @@ private Statement convertToStatement(String query) throws ParseException {\n                             }\n                             read(\")\");\n                         }\n-            } else if (readIf(\"@\")) {\n+                    } else if (\"rep:excerpt\".equals(identifier)) {\n+                        readOpenDotClose(false);\n                         rewindSelector();\n-                Expression.Property p = readProperty();\n+                        Expression.Property p = new Expression.Property(currentSelector, \"rep:excerpt\", false);\n                         statement.addSelectColumn(p);\n-            } else if (readIf(\"rep:excerpt\")) {\n+                    } else {\n+                        throw getSyntaxError();\n+                    }\n+                } else {\n+                    String name = ISO9075.decode(identifier);\n+                    pathPattern += name;\n+                    appendNodeName(name);\n+                }\n+            } else if (readIf(\"@\")) {\n                 rewindSelector();\n-                readExcerpt();\n-                Expression.Property p = new Expression.Property(currentSelector, \"rep:excerpt\", false);\n+                Expression.Property p = readProperty();\n                 statement.addSelectColumn(p);\n             } else if (readIf(\"(\")) {\n                 rewindSelector();\n@@ -239,7 +250,7 @@ private Statement convertToStatement(String query) throws ParseException {\n                         Expression.Property p = readProperty();\n                         statement.addSelectColumn(p);\n                     } else if (readIf(\"rep:excerpt\")) {\n-                        readExcerpt();\n+                        readOpenDotClose(true);\n                         Expression.Property p = new Expression.Property(currentSelector, \"rep:excerpt\", false);\n                         statement.addSelectColumn(p);\n                     } else if (readIf(\"rep:spellcheck\")) {\n@@ -249,7 +260,7 @@ private Statement convertToStatement(String query) throws ParseException {\n                         Expression.Property p = new Expression.Property(currentSelector, \"rep:spellcheck()\", false);\n                         statement.addSelectColumn(p);\n                     } else if (readIf(\"rep:suggest\")) {\n-                        readExcerpt();\n+                        readOpenDotClose(true);\n                         Expression.Property p = new Expression.Property(currentSelector, \"rep:suggest()\", false);\n                         statement.addSelectColumn(p);\n                     }\n@@ -257,11 +268,6 @@ private Statement convertToStatement(String query) throws ParseException {\n                 if (!readIf(\")\")) {\n                     return convertToUnion(query, statement, startParseIndex - 1);\n                 }\n-            } else if (currentTokenType == IDENTIFIER) {\n-                // path restriction\n-                String name = readPathSegment();\n-                pathPattern += name;\n-                appendNodeName(name);\n             } else if (readIf(\".\")) {\n                 // just \".\" this is simply ignored, so that\n                 // \"a/./b\" is the same as \"a/b\"\n@@ -717,13 +723,19 @@ private void read(String expected) throws ParseException {\n         return new Expression.Property(currentSelector, readPathSegment(), false);\n     }\n     \n-    private void readExcerpt() throws ParseException {\n+    /**\n+     * Read open bracket (optional), and optional dot, and close bracket.\n+     * \n+     * @param readOpenBracket whether to read the open bracket (false if this\n+     *            was already read)\n+     * @throws ParseException if close bracket or the dot were not read\n+     */\n+    private void readOpenDotClose(boolean readOpenBracket) throws ParseException {\n+        if (readOpenBracket) {\n             read(\"(\");\n-        if (!readIf(\")\")) {\n-            // only rep:excerpt(.) and rep:excerpt() are currently supported\n-            read(\".\");\n-            read(\")\");\n         }\n+        readIf(\".\");\n+        read(\")\");\n     }\n \n     private String readPathSegment() throws ParseException {\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 33, 
  "jira_id": "4387", 
  "nb_skipped": 1, 
  "commit": "ca05fd06", 
  "nb_failure": 0, 
  "linesRem": 21
}