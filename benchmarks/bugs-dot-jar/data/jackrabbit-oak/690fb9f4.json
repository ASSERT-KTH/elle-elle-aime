{
  "files": 2, 
  "nb_test": 2920, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.plugins.document.CommitRootUpdateTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/Commit.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/Commit.java\nindex 3d854d9434..9074e68168 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/Commit.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/Commit.java\n@@ -388,7 +388,7 @@ private void applyToDocumentStore(RevisionVector baseBranchRevision) {\n                     // only set revision on commit root when there is\n                     // no collision for this commit revision\n                     commit.containsMapEntry(COLLISIONS, revision, false);\n-                    NodeDocument before = nodeStore.updateCommitRoot(commit);\n+                    NodeDocument before = nodeStore.updateCommitRoot(commit, revision);\n                     if (before == null) {\n                         String msg = \"Conflicting concurrent change. \" +\n                                 \"Update operation failed: \" + commitRoot;\n@@ -425,7 +425,13 @@ private void applyToDocumentStore(RevisionVector baseBranchRevision) {\n             if (success) {\n                 LOG.error(\"Exception occurred after commit. Rollback will be suppressed.\", e);\n             } else {\n+                try {\n                     rollback(newNodes, opLog, commitRoot);\n+                } catch (Exception ex) {\n+                    // catch any exception caused by the rollback, log it\n+                    // and throw the original exception\n+                    LOG.warn(\"Rollback failed\", ex);\n+                }\n                 throw e;\n             }\n         }\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java\nindex 14e608ffc4..8a715acd43 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java\n@@ -73,7 +73,6 @@\n import com.google.common.base.Suppliers;\n import com.google.common.cache.Cache;\n import com.google.common.collect.Iterables;\n-import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n import com.google.common.collect.Sets;\n import com.google.common.util.concurrent.UncheckedExecutionException;\n@@ -1164,12 +1163,14 @@ void revisionsMerged(@Nonnull Iterable<Revision> revisions) {\n      * Updates a commit root document.\n      *\n      * @param commit the updates to apply on the commit root document.\n+     * @param commitRev the commit revision.\n      * @return the document before the update was applied or <code>null</code>\n      *          if the update failed because of a collision.\n      * @throws DocumentStoreException if the update fails with an error.\n      */\n     @CheckForNull\n-    NodeDocument updateCommitRoot(UpdateOp commit) throws DocumentStoreException {\n+    NodeDocument updateCommitRoot(UpdateOp commit, Revision commitRev)\n+            throws DocumentStoreException {\n         // use batch commit when there are only revision and modified updates\n         boolean batch = true;\n         for (Map.Entry<Key, Operation> op : commit.getChanges().entrySet()) {\n@@ -1181,11 +1182,63 @@ NodeDocument updateCommitRoot(UpdateOp commit) throws DocumentStoreException {\n             batch = false;\n             break;\n         }\n+        try {\n             if (batch) {\n                 return batchUpdateCommitRoot(commit);\n             } else {\n                 return store.findAndUpdate(NODES, commit);\n             }\n+        } catch (DocumentStoreException e) {\n+            return verifyCommitRootUpdateApplied(commit, commitRev, e);\n+        }\n+    }\n+\n+    /**\n+     * Verifies if the {@code commit} update on the commit root was applied by\n+     * reading the affected document and checks if the {@code commitRev} is\n+     * set in the revisions map.\n+     *\n+     * @param commit the update operation on the commit root document.\n+     * @param commitRev the commit revision.\n+     * @param e the exception that will be thrown when this method determines\n+     *          that the update was not applied.\n+     * @return the before document.\n+     * @throws DocumentStoreException the exception passed to this document\n+     *      in case the commit update was not applied.\n+     */\n+    private NodeDocument verifyCommitRootUpdateApplied(UpdateOp commit,\n+                                                       Revision commitRev,\n+                                                       DocumentStoreException e)\n+            throws DocumentStoreException {\n+        LOG.info(\"Update of commit root failed with exception\", e);\n+        int numRetries = 10;\n+        for (int i = 0; i < numRetries; i++) {\n+            LOG.info(\"Checking if change made it to the DocumentStore anyway {}/{} ...\",\n+                    i + 1, numRetries);\n+            NodeDocument commitRootDoc;\n+            try {\n+                commitRootDoc = store.find(NODES, commit.getId(), 0);\n+            } catch (Exception ex) {\n+                LOG.info(\"Failed to read commit root document\", ex);\n+                continue;\n+            }\n+            if (commitRootDoc == null) {\n+                LOG.info(\"Commit root document missing for {}\", commit.getId());\n+                break;\n+            }\n+            if (commitRootDoc.getLocalRevisions().containsKey(commitRev)) {\n+                LOG.info(\"Update made it to the store even though the call \" +\n+                        \"failed with an exception. Previous exception will \" +\n+                        \"be suppressed. {}\", commit);\n+                NodeDocument before = NODES.newDocument(store);\n+                commitRootDoc.deepCopy(before);\n+                UpdateUtils.applyChanges(before, commit.getReverseOperation());\n+                return before;\n+            }\n+            break;\n+        }\n+        LOG.info(\"Update didn't make it to the store. Re-throwing the exception\");\n+        throw e;\n     }\n \n     private NodeDocument batchUpdateCommitRoot(UpdateOp commit)\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 62, 
  "jira_id": "3903", 
  "nb_skipped": 1, 
  "commit": "690fb9f4", 
  "nb_failure": 0, 
  "linesRem": 3
}