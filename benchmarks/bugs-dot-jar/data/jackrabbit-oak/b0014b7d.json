{
  "files": 3, 
  "nb_test": 135, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.segment.RecordTest"
  ], 
  "patch": "diff --git a/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/Segment.java b/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/Segment.java\nindex d1c0f0c354..2f38496aa9 100644\n--- a/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/Segment.java\n+++ b/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/Segment.java\n@@ -26,6 +26,7 @@\n import static com.google.common.collect.Maps.newConcurrentMap;\n import static java.lang.Boolean.getBoolean;\n import static org.apache.jackrabbit.oak.commons.IOUtils.closeQuietly;\n+import static org.apache.jackrabbit.oak.segment.SegmentId.isDataSegmentId;\n import static org.apache.jackrabbit.oak.segment.SegmentVersion.isValid;\n import static org.apache.jackrabbit.oak.segment.SegmentWriter.BLOCK_SIZE;\n \n@@ -38,6 +39,7 @@\n import java.nio.channels.WritableByteChannel;\n import java.util.Arrays;\n import java.util.List;\n+import java.util.UUID;\n import java.util.concurrent.ConcurrentMap;\n \n import javax.annotation.CheckForNull;\n@@ -314,12 +316,27 @@ public int getRootCount() {\n         return data.getShort(ROOT_COUNT_OFFSET) & 0xffff;\n     }\n \n-    public static int getGcGen(ByteBuffer data) {\n-        return data.getInt(GC_GEN_OFFSET);\n+    /**\n+     * Determine the gc generation a segment from its data. Note that bulk segments don't have\n+     * generations (i.e. stay at 0).\n+     *\n+     * @param data         the date of the segment\n+     * @param segmentId    the id of the segment\n+     * @return  the gc generation of this segment or 0 if this is bulk segment.\n+     */\n+    public static int getGcGen(ByteBuffer data, UUID segmentId) {\n+        return isDataSegmentId(segmentId.getLeastSignificantBits())\n+            ? data.getInt(GC_GEN_OFFSET)\n+            : 0;\n     }\n \n+    /**\n+     * Determine the gc generation of this segment. Note that bulk segments don't have\n+     * generations (i.e. stay at 0).\n+     * @return  the gc generation of this segment or 0 if this is bulk segment.\n+     */\n     public int getGcGen() {\n-        return getGcGen(data);\n+        return getGcGen(data, id.asUUID());\n     }\n \n     public RecordType getRootType(int index) {\ndiff --git a/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/FileStore.java b/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/FileStore.java\nindex 84d61a7e0b..e8954f412e 100644\n--- a/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/FileStore.java\n+++ b/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/FileStore.java\n@@ -1368,7 +1368,7 @@ public Segment readSegment(SegmentId id) {\n     public void writeSegment(SegmentId id, byte[] data, int offset, int length) throws IOException {\n         fileStoreLock.writeLock().lock();\n         try {\n-            int generation = Segment.getGcGen(wrap(data, offset, length));\n+            int generation = Segment.getGcGen(wrap(data, offset, length), id.asUUID());\n             long size = writer.writeEntry(\n                     id.getMostSignificantBits(),\n                     id.getLeastSignificantBits(),\ndiff --git a/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/TarReader.java b/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/TarReader.java\nindex 8fcdcc2949..5c7ee7d603 100644\n--- a/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/TarReader.java\n+++ b/oak-segment-tar/src/main/java/org/apache/jackrabbit/oak/segment/file/TarReader.java\n@@ -218,7 +218,7 @@ private static void generateTarFile(LinkedHashMap<UUID, byte[]> entries,\n         for (Map.Entry<UUID, byte[]> entry : entries.entrySet()) {\n             UUID uuid = entry.getKey();\n             byte[] data = entry.getValue();\n-            int generation = getGcGen(wrap(data));\n+            int generation = getGcGen(wrap(data), uuid);\n             writer.writeEntry(\n                     uuid.getMostSignificantBits(),\n                     uuid.getLeastSignificantBits(),\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 22, 
  "jira_id": "4353", 
  "nb_skipped": 2, 
  "commit": "b0014b7d", 
  "nb_failure": 0, 
  "linesRem": 5
}