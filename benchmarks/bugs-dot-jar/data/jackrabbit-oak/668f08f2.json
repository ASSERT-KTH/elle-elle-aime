{
  "files": 6, 
  "nb_test": 93, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.mk.ConcurrentWriteTest"
  ], 
  "patch": "diff --git a/oak-mk/src/main/java/org/apache/jackrabbit/mk/core/MicroKernelImpl.java b/oak-mk/src/main/java/org/apache/jackrabbit/mk/core/MicroKernelImpl.java\nindex 24459590f8..2cbb066d7e 100644\n--- a/oak-mk/src/main/java/org/apache/jackrabbit/mk/core/MicroKernelImpl.java\n+++ b/oak-mk/src/main/java/org/apache/jackrabbit/mk/core/MicroKernelImpl.java\n@@ -18,9 +18,7 @@\n \n import java.io.InputStream;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.HashMap;\n-import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n \n@@ -31,6 +29,7 @@\n import org.apache.jackrabbit.mk.model.ChildNodeEntry;\n import org.apache.jackrabbit.mk.model.Commit;\n import org.apache.jackrabbit.mk.model.CommitBuilder;\n+import org.apache.jackrabbit.mk.model.CommitBuilder.NodeTree;\n import org.apache.jackrabbit.mk.model.Id;\n import org.apache.jackrabbit.mk.model.NodeState;\n import org.apache.jackrabbit.mk.model.PropertyState;\n@@ -40,7 +39,6 @@\n import org.apache.jackrabbit.mk.store.RevisionProvider;\n import org.apache.jackrabbit.mk.util.CommitGate;\n import org.apache.jackrabbit.mk.util.PathUtils;\n-import org.apache.jackrabbit.mk.util.SimpleLRUCache;\n \n /**\n  *\n@@ -50,11 +48,6 @@\n     protected Repository rep;\n     private final CommitGate gate = new CommitGate();\n \n-    /**\n-     * Key: revision id, Value: diff string\n-     */\n-    private final Map<Id, String> diffCache = Collections.synchronizedMap(SimpleLRUCache.<Id, String>newInstance(100));\n-\n     public MicroKernelImpl(String homeDir) throws MicroKernelException {\n         init(homeDir);\n     }\n@@ -97,7 +90,6 @@ public void dispose() {\n             }\n             rep = null;\n         }\n-        diffCache.clear();\n     }\n \n     public String getHeadRevision() throws MicroKernelException {\n@@ -211,13 +203,8 @@ public String getJournal(String fromRevision, String toRevision, String filter)\n             commitBuff.object().\n                     key(\"id\").value(commit.getId().toString()).\n                     key(\"ts\").value(commit.getCommitTS()).\n-                    key(\"msg\").value(commit.getMsg());\n-            String diff = diffCache.get(commit.getId());\n-            if (diff == null) {\n-                diff = diff(commit.getParentId(), commit.getId(), filter);\n-                diffCache.put(commit.getId(), diff);\n-            }\n-            commitBuff.key(\"changes\").value(diff).endObject();\n+                    key(\"msg\").value(commit.getMsg()).\n+                    key(\"changes\").value(commit.getChanges()).endObject();\n         }\n         return commitBuff.endArray().toString();\n     }\n@@ -478,12 +465,7 @@ public String commit(String path, String jsonDiff, String revision, String messa\n                             }\n                             String parentPath = PathUtils.getParentPath(nodePath);\n                             String nodeName = PathUtils.getName(nodePath);\n-                            // build the list of added nodes recursively\n-                            LinkedList<AddNodeOperation> list = new LinkedList<AddNodeOperation>();\n-                            addNode(list, parentPath, nodeName, t);\n-                            for (AddNodeOperation op : list) {\n-                                cb.addNode(op.path, op.name, op.props);\n-                            }\n+                            cb.addNode(parentPath, nodeName, parseNode(t));\n                         } else {\n                             String value;\n                             if (t.matches(JsopTokenizer.NULL)) {\n@@ -637,30 +619,20 @@ void toJson(JsopBuilder builder, NodeState node, int depth, int offset, int coun\n         }\n     }\n     \n-    static void addNode(LinkedList<AddNodeOperation> list, String path, String name, JsopTokenizer t) throws Exception {\n-        AddNodeOperation op = new AddNodeOperation();\n-        op.path = path;\n-        op.name = name;\n-        list.add(op);\n+    NodeTree parseNode(JsopTokenizer t) throws Exception {\n+        NodeTree node = new NodeTree();\n         if (!t.matches('}')) {\n             do {\n                 String key = t.readString();\n                 t.read(':');\n                 if (t.matches('{')) {\n-                    addNode(list, PathUtils.concat(path, name), key, t);\n+                    node.nodes.put(key, parseNode(t));\n                 } else {\n-                    op.props.put(key, t.readRawValue().trim());\n+                    node.props.put(key, t.readRawValue().trim());\n                 }\n             } while (t.matches(','));\n             t.read('}');\n         }\n+        return node;\n     }\n-\n-    //--------------------------------------------------------< inner classes >\n-    static class AddNodeOperation {\n-        String path;\n-        String name;\n-        Map<String, String> props = new HashMap<String, String>();\n-    }\n-\n }\ndiff --git a/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/AbstractCommit.java b/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/AbstractCommit.java\nindex 97f2dea4b9..4f766ee36e 100644\n--- a/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/AbstractCommit.java\n+++ b/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/AbstractCommit.java\n@@ -32,6 +32,9 @@\n     // commit message\n     protected String msg;\n \n+    // changes\n+    protected String changes;\n+\n     // id of parent commit\n     protected Id parentId;\n \n@@ -42,6 +45,7 @@ protected AbstractCommit(Commit other) {\n         this.parentId = other.getParentId();\n         this.rootNodeId = other.getRootNodeId();\n         this.msg = other.getMsg();\n+        this.changes = other.getChanges();\n         this.commitTS = other.getCommitTS();\n     }\n \n@@ -61,10 +65,15 @@ public String getMsg() {\n         return msg;\n     }\n \n+    public String getChanges() {\n+        return changes;\n+    }\n+\n     public void serialize(Binding binding) throws Exception {\n         binding.write(\"rootNodeId\", rootNodeId.getBytes());\n         binding.write(\"commitTS\", commitTS);\n         binding.write(\"msg\", msg == null ? \"\" : msg);\n+        binding.write(\"changes\", changes == null ? \"\" : changes);\n         binding.write(\"parentId\", parentId == null ? \"\" : parentId.toString());\n     }\n }\ndiff --git a/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/Commit.java b/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/Commit.java\nindex 82501a0450..697693cb03 100644\n--- a/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/Commit.java\n+++ b/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/Commit.java\n@@ -31,5 +31,7 @@\n \n     public String getMsg();\n \n+    public String getChanges();\n+\n     void serialize(Binding binding) throws Exception;\n }\ndiff --git a/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/CommitBuilder.java b/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/CommitBuilder.java\nindex 645851b8ad..b7cfc9c37e 100644\n--- a/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/CommitBuilder.java\n+++ b/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/CommitBuilder.java\n@@ -50,130 +50,39 @@ public CommitBuilder(Id baseRevId, String msg, RevisionStore store) throws Excep\n         this.store = store;\n     }\n \n-    public void addNode(String parentNodePath, String nodeName) throws Exception {\n-        addNode(parentNodePath, nodeName, Collections.<String, String>emptyMap());\n-    }\n-\n-    public void addNode(String parentNodePath, String nodeName, Map<String, String> properties) throws Exception {\n-        MutableNode modParent = getOrCreateStagedNode(parentNodePath);\n-        if (modParent.getChildNodeEntry(nodeName) != null) {\n-            throw new Exception(\"there's already a child node with name '\" + nodeName + \"'\");\n-        }\n-        String newPath = PathUtils.concat(parentNodePath, nodeName);\n-        MutableNode newChild = new MutableNode(store, newPath);\n-        newChild.getProperties().putAll(properties);\n-\n-        // id will be computed on commit\n-        modParent.add(new ChildNode(nodeName, null));\n-        staged.put(newPath, newChild);\n+    public void addNode(String parentNodePath, String nodeName, NodeTree node) throws Exception {\n+        Change change = new AddNode(parentNodePath, nodeName, node);\n+        change.apply();\n         // update change log\n-        changeLog.add(new AddNode(parentNodePath, nodeName, properties));\n+        changeLog.add(change);\n     }\n \n     public void removeNode(String nodePath) throws NotFoundException, Exception {\n-        String parentPath = PathUtils.getParentPath(nodePath);\n-        String nodeName = PathUtils.getName(nodePath);\n-\n-        MutableNode parent = getOrCreateStagedNode(parentPath);\n-        if (parent.remove(nodeName) == null) {\n-            throw new NotFoundException(nodePath);\n-        }\n-\n-        // update staging area\n-        removeStagedNodes(nodePath);\n-\n+        Change change = new RemoveNode(nodePath);\n+        change.apply();\n         // update change log\n-        changeLog.add(new RemoveNode(nodePath));\n+        changeLog.add(change);\n     }\n \n     public void moveNode(String srcPath, String destPath) throws NotFoundException, Exception {\n-        if (PathUtils.isAncestor(srcPath, destPath)) {\n-            throw new Exception(\"target path cannot be descendant of source path: \" + destPath);\n-        }\n-\n-        String srcParentPath = PathUtils.getParentPath(srcPath);\n-        String srcNodeName = PathUtils.getName(srcPath);\n-\n-        String destParentPath = PathUtils.getParentPath(destPath);\n-        String destNodeName = PathUtils.getName(destPath);\n-\n-        MutableNode srcParent = getOrCreateStagedNode(srcParentPath);\n-        if (srcParentPath.equals(destParentPath)) {\n-            if (srcParent.getChildNodeEntry(destNodeName) != null) {\n-                throw new Exception(\"node already exists at move destination path: \" + destPath);\n-            }\n-            if (srcParent.rename(srcNodeName, destNodeName) == null) {\n-                throw new NotFoundException(srcPath);\n-            }\n-        } else {\n-            ChildNode srcCNE = srcParent.remove(srcNodeName);\n-            if (srcCNE == null) {\n-                throw new NotFoundException(srcPath);\n-            }\n-\n-            MutableNode destParent = getOrCreateStagedNode(destParentPath);\n-            if (destParent.getChildNodeEntry(destNodeName) != null) {\n-                throw new Exception(\"node already exists at move destination path: \" + destPath);\n-            }\n-            destParent.add(new ChildNode(destNodeName, srcCNE.getId()));\n-        }\n-\n-        // update staging area\n-        moveStagedNodes(srcPath, destPath);\n-\n+        Change change = new MoveNode(srcPath, destPath);\n+        change.apply();\n         // update change log\n-        changeLog.add(new MoveNode(srcPath, destPath));\n+        changeLog.add(change);\n     }\n \n     public void copyNode(String srcPath, String destPath) throws NotFoundException, Exception {\n-        String srcParentPath = PathUtils.getParentPath(srcPath);\n-        String srcNodeName = PathUtils.getName(srcPath);\n-\n-        String destParentPath = PathUtils.getParentPath(destPath);\n-        String destNodeName = PathUtils.getName(destPath);\n-\n-        MutableNode srcParent = getOrCreateStagedNode(srcParentPath);\n-        ChildNode srcCNE = srcParent.getChildNodeEntry(srcNodeName);\n-        if (srcCNE == null) {\n-            throw new NotFoundException(srcPath);\n-        }\n-\n-        MutableNode destParent = getOrCreateStagedNode(destParentPath);\n-        destParent.add(new ChildNode(destNodeName, srcCNE.getId()));\n-\n-        if (srcCNE.getId() == null) {\n-            // a 'new' node is being copied\n-\n-            // update staging area\n-            copyStagedNodes(srcPath, destPath);\n-        }\n-\n+        Change change = new CopyNode(srcPath, destPath);\n+        change.apply();\n         // update change log\n-        changeLog.add(new CopyNode(srcPath, destPath));\n+        changeLog.add(change);\n     }\n \n     public void setProperty(String nodePath, String propName, String propValue) throws Exception {\n-        MutableNode node = getOrCreateStagedNode(nodePath);\n-\n-        Map<String, String> properties = node.getProperties();\n-        if (propValue == null) {\n-            properties.remove(propName);\n-        } else {\n-            properties.put(propName, propValue);\n-        }\n-\n-        // update change log\n-        changeLog.add(new SetProperty(nodePath, propName, propValue));\n-    }\n-\n-    public void setProperties(String nodePath, Map<String, String> properties) throws Exception {\n-        MutableNode node = getOrCreateStagedNode(nodePath);\n-\n-        node.getProperties().clear();\n-        node.getProperties().putAll(properties);\n-\n+        Change change = new SetProperty(nodePath, propName, propValue);\n+        change.apply();\n         // update change log\n-        changeLog.add(new SetProperties(nodePath, properties));\n+        changeLog.add(change);\n     }\n \n     public Id /* new revId */ doCommit() throws Exception {\n@@ -190,9 +99,7 @@ public void setProperties(String nodePath, Map<String, String> properties) throw\n             // clear staging area\n             staged.clear();\n             // replay change log on new base revision\n-            // copy log in order to avoid concurrent modifications\n-            List<Change> log = new ArrayList<Change>(changeLog);\n-            for (Change change : log) {\n+            for (Change change : changeLog) {\n                 change.apply();\n             }\n         }\n@@ -222,19 +129,29 @@ public void setProperties(String nodePath, Map<String, String> properties) throw\n             newCommit.setParentId(baseRevId);\n             newCommit.setCommitTS(System.currentTimeMillis());\n             newCommit.setMsg(msg);\n+            StringBuilder diff = new StringBuilder();\n+            for (Change change : changeLog) {\n+                if (diff.length() > 0) {\n+                    diff.append('\\n');\n+                }\n+                diff.append(change.asDiff());\n+            }\n+            newCommit.setChanges(diff.toString());\n             newCommit.setRootNodeId(rootNodeId);\n             newRevId = store.putHeadCommit(newCommit);\n         } finally {\n             store.unlockHead();\n         }\n \n-        // reset instance in order to be reusable\n+        // reset instance\n         staged.clear();\n         changeLog.clear();\n \n         return newRevId;\n     }\n \n+    //--------------------------------------------------------< inner classes >\n+\n     MutableNode getOrCreateStagedNode(String nodePath) throws Exception {\n         MutableNode node = staged.get(nodePath);\n         if (node == null) {\n@@ -418,23 +335,79 @@ void mergeNode(StoredNode baseNode, StoredNode ourNode, StoredNode theirNode, St\n     }\n \n     //--------------------------------------------------------< inner classes >\n+\n+    public static class NodeTree {\n+        public Map<String, String> props = new HashMap<String, String>();\n+        public Map<String, NodeTree> nodes = new HashMap<String, NodeTree>();\n+\n+        void toJson(StringBuffer buf) {\n+            toJson(buf, this);\n+        }\n+\n+        private static void toJson(StringBuffer buf, NodeTree node) {\n+            buf.append('{');\n+            for (String name : node.props.keySet()) {\n+                if (buf.charAt(buf.length() - 1) != '{')  {\n+                    buf.append(',');\n+                }\n+                buf.append('\"').append(name).append(\"\\\":\").append(node.props.get(name));\n+            }\n+            for (String name : node.nodes.keySet()) {\n+                if (buf.charAt(buf.length() - 1) != '{')  {\n+                    buf.append(',');\n+                }\n+                buf.append('\"').append(name).append(\"\\\":\");\n+                toJson(buf, node.nodes.get(name));\n+            }\n+            buf.append('}');\n+        }\n+    }\n+\n     abstract class Change {\n         abstract void apply() throws Exception;\n+        abstract String asDiff();\n     }\n \n     class AddNode extends Change {\n         String parentNodePath;\n         String nodeName;\n-        Map<String, String> properties;\n+        NodeTree node;\n \n-        AddNode(String parentNodePath, String nodeName, Map<String, String> properties) {\n+        AddNode(String parentNodePath, String nodeName, NodeTree node) {\n             this.parentNodePath = parentNodePath;\n             this.nodeName = nodeName;\n-            this.properties = properties;\n+            this.node = node;\n         }\n \n+        @Override\n         void apply() throws Exception {\n-            addNode(parentNodePath, nodeName, properties);\n+            recursiveAddNode(parentNodePath, nodeName, node);\n+        }\n+\n+        @Override\n+        String asDiff() {\n+            StringBuffer diff = new StringBuffer(\"+\");\n+            diff.append('\"').append(PathUtils.concat(parentNodePath, nodeName)).append(\"\\\":\");\n+            node.toJson(diff);\n+            return diff.toString();\n+        }\n+\n+        private void recursiveAddNode(String parentPath, String name, NodeTree node) throws Exception {\n+            MutableNode modParent = getOrCreateStagedNode(parentPath);\n+            if (modParent.getChildNodeEntry(name) != null) {\n+                throw new Exception(\"there's already a child node with name '\" + name + \"'\");\n+            }\n+            String newPath = PathUtils.concat(parentPath, name);\n+            MutableNode newChild = new MutableNode(store, newPath);\n+            newChild.getProperties().putAll(node.props);\n+\n+            // id will be computed on commit\n+            modParent.add(new ChildNode(name, null));\n+            staged.put(newPath, newChild);\n+\n+            for (String childName : node.nodes.keySet()) {\n+                recursiveAddNode(PathUtils.concat(parentPath, name), childName, node.nodes.get(childName));\n+            }\n         }\n     }\n \n@@ -445,8 +418,25 @@ void apply() throws Exception {\n             this.nodePath = nodePath;\n         }\n \n+        @Override\n         void apply() throws Exception {\n-            removeNode(nodePath);\n+            String parentPath = PathUtils.getParentPath(nodePath);\n+            String nodeName = PathUtils.getName(nodePath);\n+\n+            MutableNode parent = getOrCreateStagedNode(parentPath);\n+            if (parent.remove(nodeName) == null) {\n+                throw new NotFoundException(nodePath);\n+            }\n+\n+            // update staging area\n+            removeStagedNodes(nodePath);\n+        }\n+\n+        @Override\n+        String asDiff() {\n+            StringBuffer diff = new StringBuffer(\"-\");\n+            diff.append('\"').append(nodePath).append('\"');\n+            return diff.toString();\n         }\n     }\n \n@@ -459,8 +449,48 @@ void apply() throws Exception {\n             this.destPath = destPath;\n         }\n \n+        @Override\n         void apply() throws Exception {\n-            moveNode(srcPath, destPath);\n+            if (PathUtils.isAncestor(srcPath, destPath)) {\n+                throw new Exception(\"target path cannot be descendant of source path: \" + destPath);\n+            }\n+\n+            String srcParentPath = PathUtils.getParentPath(srcPath);\n+            String srcNodeName = PathUtils.getName(srcPath);\n+\n+            String destParentPath = PathUtils.getParentPath(destPath);\n+            String destNodeName = PathUtils.getName(destPath);\n+\n+            MutableNode srcParent = getOrCreateStagedNode(srcParentPath);\n+            if (srcParentPath.equals(destParentPath)) {\n+                if (srcParent.getChildNodeEntry(destNodeName) != null) {\n+                    throw new Exception(\"node already exists at move destination path: \" + destPath);\n+                }\n+                if (srcParent.rename(srcNodeName, destNodeName) == null) {\n+                    throw new NotFoundException(srcPath);\n+                }\n+            } else {\n+                ChildNode srcCNE = srcParent.remove(srcNodeName);\n+                if (srcCNE == null) {\n+                    throw new NotFoundException(srcPath);\n+                }\n+\n+                MutableNode destParent = getOrCreateStagedNode(destParentPath);\n+                if (destParent.getChildNodeEntry(destNodeName) != null) {\n+                    throw new Exception(\"node already exists at move destination path: \" + destPath);\n+                }\n+                destParent.add(new ChildNode(destNodeName, srcCNE.getId()));\n+            }\n+\n+            // update staging area\n+            moveStagedNodes(srcPath, destPath);\n+        }\n+\n+        @Override\n+        String asDiff() {\n+            StringBuffer diff = new StringBuffer(\">\");\n+            diff.append('\"').append(srcPath).append(\"\\\":\\\"\").append(destPath).append('\"');\n+            return diff.toString();\n         }\n     }\n \n@@ -473,8 +503,36 @@ void apply() throws Exception {\n             this.destPath = destPath;\n         }\n \n+        @Override\n         void apply() throws Exception {\n-            copyNode(srcPath, destPath);\n+            String srcParentPath = PathUtils.getParentPath(srcPath);\n+            String srcNodeName = PathUtils.getName(srcPath);\n+\n+            String destParentPath = PathUtils.getParentPath(destPath);\n+            String destNodeName = PathUtils.getName(destPath);\n+\n+            MutableNode srcParent = getOrCreateStagedNode(srcParentPath);\n+            ChildNode srcCNE = srcParent.getChildNodeEntry(srcNodeName);\n+            if (srcCNE == null) {\n+                throw new NotFoundException(srcPath);\n+            }\n+\n+            MutableNode destParent = getOrCreateStagedNode(destParentPath);\n+            destParent.add(new ChildNode(destNodeName, srcCNE.getId()));\n+\n+            if (srcCNE.getId() == null) {\n+                // a 'new' node is being copied\n+\n+                // update staging area\n+                copyStagedNodes(srcPath, destPath);\n+            }\n+        }\n+\n+        @Override\n+        String asDiff() {\n+            StringBuffer diff = new StringBuffer(\"*\");\n+            diff.append('\"').append(srcPath).append(\"\\\":\\\"\").append(destPath).append('\"');\n+            return diff.toString();\n         }\n     }\n \n@@ -489,22 +547,23 @@ void apply() throws Exception {\n             this.propValue = propValue;\n         }\n \n+        @Override\n         void apply() throws Exception {\n-            setProperty(nodePath, propName, propValue);\n-        }\n-    }\n-\n-    class SetProperties extends Change {\n-        String nodePath;\n-        Map<String, String> properties;\n+            MutableNode node = getOrCreateStagedNode(nodePath);\n \n-        SetProperties(String nodePath, Map<String, String> properties) {\n-            this.nodePath = nodePath;\n-            this.properties = properties;\n+            Map<String, String> properties = node.getProperties();\n+            if (propValue == null) {\n+                properties.remove(propName);\n+            } else {\n+                properties.put(propName, propValue);\n+            }\n         }\n \n-        void apply() throws Exception {\n-            setProperties(nodePath, properties);\n+        @Override\n+        String asDiff() {\n+            StringBuffer diff = new StringBuffer(\"^\");\n+            diff.append('\"').append(PathUtils.concat(nodePath, propName)).append(\"\\\":\").append(propValue);\n+            return diff.toString();\n         }\n     }\n }\ndiff --git a/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/MutableCommit.java b/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/MutableCommit.java\nindex 0992938a26..4a3312ca31 100644\n--- a/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/MutableCommit.java\n+++ b/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/MutableCommit.java\n@@ -39,6 +39,7 @@ public MutableCommit(StoredCommit other) {\n         setRootNodeId(other.getRootNodeId());\n         setCommitTS(other.getCommitTS());\n         setMsg(other.getMsg());\n+        setChanges(other.getChanges());\n         this.id = other.getId();\n     }\n \n@@ -58,6 +59,10 @@ public void setMsg(String msg) {\n         this.msg = msg;\n     }\n \n+    public void setChanges(String changes) {\n+        this.changes = changes;\n+    }\n+\n     /**\n      * Return the commit id.\n      * \ndiff --git a/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/StoredCommit.java b/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/StoredCommit.java\nindex 0cb15b75f6..95206c4571 100644\n--- a/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/StoredCommit.java\n+++ b/oak-mk/src/main/java/org/apache/jackrabbit/mk/model/StoredCommit.java\n@@ -29,17 +29,19 @@ public static StoredCommit deserialize(Id id, Binding binding) throws Exception\n         Id rootNodeId = new Id(binding.readBytesValue(\"rootNodeId\"));\n         long commitTS = binding.readLongValue(\"commitTS\");\n         String msg = binding.readStringValue(\"msg\");\n+        String changes = binding.readStringValue(\"changes\");\n         String parentId = binding.readStringValue(\"parentId\");\n         return new StoredCommit(id, \"\".equals(parentId) ? null : Id.fromString(parentId),\n-                commitTS, rootNodeId, \"\".equals(msg) ? null : msg);\n+                commitTS, rootNodeId, \"\".equals(msg) ? null : msg, changes);\n     }\n \n-    public StoredCommit(Id id, Id parentId, long commitTS, Id rootNodeId, String msg) {\n+    public StoredCommit(Id id, Id parentId, long commitTS, Id rootNodeId, String msg, String changes) {\n         this.id = id;\n         this.parentId = parentId;\n         this.commitTS = commitTS;\n         this.rootNodeId = rootNodeId;\n         this.msg = msg;\n+        this.changes = changes;\n     }\n \n     public StoredCommit(Id id, Commit commit) {\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 218, 
  "jira_id": "43", 
  "nb_skipped": 1, 
  "commit": "668f08f2", 
  "nb_failure": 0, 
  "linesRem": 169
}