{
  "files": 1, 
  "nb_test": 14, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.upgrade.RepositoryUpgradeTest"
  ], 
  "patch": "diff --git a/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/JackrabbitNodeState.java b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/JackrabbitNodeState.java\nindex ffe9e8eb07..bc60aa8a84 100644\n--- a/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/JackrabbitNodeState.java\n+++ b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/JackrabbitNodeState.java\n@@ -18,16 +18,25 @@\n \n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.collect.Iterables.addAll;\n import static com.google.common.collect.Lists.newArrayList;\n import static com.google.common.collect.Lists.newArrayListWithCapacity;\n import static com.google.common.collect.Maps.newHashMap;\n import static com.google.common.collect.Maps.newLinkedHashMap;\n+import static com.google.common.collect.Sets.newHashSet;\n import static com.google.common.collect.Sets.newLinkedHashSet;\n+import static org.apache.jackrabbit.JcrConstants.JCR_FROZENMIXINTYPES;\n+import static org.apache.jackrabbit.JcrConstants.JCR_FROZENPRIMARYTYPE;\n+import static org.apache.jackrabbit.JcrConstants.JCR_FROZENUUID;\n import static org.apache.jackrabbit.JcrConstants.JCR_MIXINTYPES;\n import static org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE;\n import static org.apache.jackrabbit.JcrConstants.JCR_UUID;\n import static org.apache.jackrabbit.JcrConstants.MIX_REFERENCEABLE;\n+import static org.apache.jackrabbit.JcrConstants.NT_FROZENNODE;\n import static org.apache.jackrabbit.JcrConstants.NT_UNSTRUCTURED;\n+import static org.apache.jackrabbit.oak.api.Type.NAME;\n+import static org.apache.jackrabbit.oak.api.Type.NAMES;\n+import static org.apache.jackrabbit.oak.api.Type.STRING;\n import static org.apache.jackrabbit.oak.plugins.tree.TreeConstants.OAK_CHILD_ORDER;\n \n import java.io.ByteArrayInputStream;\n@@ -97,6 +106,8 @@ private static void logNewNode(JackrabbitNodeState state) {\n \n     private final TypePredicate isOrderable;\n \n+    private final TypePredicate isFrozenNode;\n+\n     /**\n      * Source namespace mappings (URI -&lt; prefix).\n      */\n@@ -116,6 +127,7 @@ private JackrabbitNodeState(\n         this.loader = parent.loader;\n         this.isReferenceable = parent.isReferenceable;\n         this.isOrderable = parent.isOrderable;\n+        this.isFrozenNode = parent.isFrozenNode;\n         this.uriToPrefix = parent.uriToPrefix;\n         this.nodes = createNodes(bundle);\n         this.properties = createProperties(bundle);\n@@ -133,6 +145,7 @@ private JackrabbitNodeState(\n         this.loader = new BundleLoader(source);\n         this.isReferenceable = new TypePredicate(root, MIX_REFERENCEABLE);\n         this.isOrderable = TypePredicate.isOrderable(root);\n+        this.isFrozenNode = new TypePredicate(root, NT_FROZENNODE);\n         this.uriToPrefix = uriToPrefix;\n         try {\n             NodePropBundle bundle = loader.loadBundle(id);\n@@ -239,7 +252,7 @@ public NodeBuilder builder() {\n         return children;\n     }\n \n-    public Map<String, PropertyState> createProperties(NodePropBundle bundle) {\n+    private Map<String, PropertyState> createProperties(NodePropBundle bundle) {\n         Map<String, PropertyState> properties = newHashMap();\n \n         String primary;\n@@ -290,6 +303,32 @@ public NodeBuilder builder() {\n             }\n         }\n \n+        // OAK-1789: Convert the jcr:frozenUuid of a non-referenceable\n+        // frozen node from UUID to a path identifier\n+        PropertyState frozenUuid = properties.get(JCR_FROZENUUID);\n+        if (frozenUuid != null\n+                && frozenUuid.getType() == STRING\n+                && isFrozenNode.apply(primary, mixins)) {\n+            String frozenPrimary = NT_UNSTRUCTURED;\n+            Set<String> frozenMixins = newHashSet();\n+\n+            PropertyState property = properties.get(JCR_FROZENPRIMARYTYPE);\n+            if (property != null && property.getType() == NAME) {\n+                primary = property.getValue(NAME);\n+            }\n+            property = properties.get(JCR_FROZENMIXINTYPES);\n+            if (property != null && property.getType() == NAMES) {\n+                addAll(frozenMixins, property.getValue(NAMES));\n+            }\n+\n+            if (!isReferenceable.apply(frozenPrimary, frozenMixins)) {\n+                frozenUuid = PropertyStates.createProperty(\n+                        JCR_FROZENUUID,\n+                        parent.getString(JCR_FROZENUUID) + \"/\" + name);\n+                properties.put(JCR_FROZENUUID, frozenUuid);\n+            }\n+        }\n+\n         return properties;\n     }\n \n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 40, 
  "jira_id": "1789", 
  "nb_skipped": 0, 
  "commit": "08ba79d4", 
  "nb_failure": 1, 
  "linesRem": 1
}