{
  "files": 2, 
  "nb_test": 2196, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.security.authorization.accesscontrol.AccessControlValidatorTest", 
    "org.apache.jackrabbit.oak.security.user.UserValidatorTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/AccessControlValidator.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/AccessControlValidator.java\nindex 3aa11f985b..0721f2bc11 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/AccessControlValidator.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/accesscontrol/AccessControlValidator.java\n@@ -42,6 +42,7 @@\n import org.apache.jackrabbit.oak.plugins.tree.impl.TreeConstants;\n import org.apache.jackrabbit.oak.spi.commit.DefaultValidator;\n import org.apache.jackrabbit.oak.spi.commit.Validator;\n+import org.apache.jackrabbit.oak.spi.commit.VisibleValidator;\n import org.apache.jackrabbit.oak.spi.security.authorization.accesscontrol.AccessControlConstants;\n import org.apache.jackrabbit.oak.spi.security.authorization.restriction.Restriction;\n import org.apache.jackrabbit.oak.spi.security.authorization.restriction.RestrictionProvider;\n@@ -122,7 +123,7 @@ public Validator childNodeAdded(String name, NodeState after) throws CommitFaile\n         Tree treeAfter = checkNotNull(parentAfter.getChild(name));\n \n         checkValidTree(parentAfter, treeAfter, after);\n-        return new AccessControlValidator(this, treeAfter);\n+        return newValidator(this, treeAfter);\n     }\n \n     @Override\n@@ -130,7 +131,7 @@ public Validator childNodeChanged(String name, NodeState before, NodeState after\n         Tree treeAfter = checkNotNull(parentAfter.getChild(name));\n \n         checkValidTree(parentAfter, treeAfter, after);\n-        return new AccessControlValidator(this, treeAfter);\n+        return newValidator(this, treeAfter);\n     }\n \n     @Override\n@@ -141,6 +142,14 @@ public Validator childNodeDeleted(String name, NodeState before) throws CommitFa\n \n     //------------------------------------------------------------< private >---\n \n+    private static Validator newValidator(AccessControlValidator parent,\n+                                          Tree parentAfter) {\n+        return new VisibleValidator(\n+                new AccessControlValidator(parent, parentAfter),\n+                true,\n+                true);\n+    }\n+\n     private void checkValidTree(Tree parentAfter, Tree treeAfter, NodeState nodeAfter) throws CommitFailedException {\n         if (isPolicy(treeAfter)) {\n             checkValidPolicy(parentAfter, treeAfter, nodeAfter);\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/UserValidator.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/UserValidator.java\nindex 975f5ebc9b..7d6a2e989d 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/UserValidator.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/user/UserValidator.java\n@@ -139,12 +139,13 @@ public Validator childNodeAdded(String name, NodeState after) throws CommitFaile\n         Tree tree = checkNotNull(parentAfter.getChild(name));\n \n         validateAuthorizable(tree, UserUtil.getType(tree));\n-        return new VisibleValidator(new UserValidator(null, tree, provider), true, true);\n+        return newValidator(null, tree, provider);\n     }\n \n     @Override\n     public Validator childNodeChanged(String name, NodeState before, NodeState after) throws CommitFailedException {\n-        return new UserValidator(parentBefore.getChild(name), parentAfter.getChild(name), provider);\n+        return newValidator(parentBefore.getChild(name),\n+                parentAfter.getChild(name), provider);\n     }\n \n     @Override\n@@ -158,12 +159,21 @@ public Validator childNodeDeleted(String name, NodeState before) throws CommitFa\n             }\n             return null;\n         } else {\n-            return new VisibleValidator(new UserValidator(tree, null, provider), true, true);\n+            return newValidator(tree, null, provider);\n         }\n     }\n \n     //------------------------------------------------------------< private >---\n \n+    private static Validator newValidator(Tree parentBefore,\n+                                          Tree parentAfter,\n+                                          UserValidatorProvider provider) {\n+        return new VisibleValidator(\n+                new UserValidator(parentBefore, parentAfter, provider),\n+                true,\n+                true);\n+    }\n+\n     private boolean isAdminUser(@Nonnull Tree userTree) {\n         if (userTree.exists() && isUser(userTree)) {\n             String id = UserUtil.getAuthorizableId(userTree);\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 24, 
  "jira_id": "3021", 
  "nb_skipped": 9, 
  "commit": "494da6de", 
  "nb_failure": 4, 
  "linesRem": 5
}