{
  "files": 2, 
  "nb_test": 1870, 
  "nb_error": 2, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.plugins.document.ValueMapTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/ValueMap.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/ValueMap.java\nindex 7b1bec62ac..259474ded0 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/ValueMap.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/ValueMap.java\n@@ -18,9 +18,12 @@\n \n import java.util.AbstractMap;\n import java.util.AbstractSet;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.SortedMap;\n@@ -32,6 +35,7 @@\n \n import com.google.common.base.Objects;\n import com.google.common.collect.Iterators;\n+import com.google.common.collect.Lists;\n \n /**\n  * A value map contains the versioned values of a property. The key into this\n@@ -61,9 +65,32 @@\n                 if (map.isEmpty()) {\n                     docs = doc.getPreviousDocs(property, null).iterator();\n                 } else {\n-                    docs = Iterators.concat(\n-                            Iterators.singletonIterator(doc),\n-                            doc.getPreviousDocs(property, null).iterator());\n+                    // merge sort local map into maps of previous documents\n+                    List<Iterator<NodeDocument>> iterators = \n+                            new ArrayList<Iterator<NodeDocument>>(2);\n+                    iterators.add(Iterators.singletonIterator(doc));\n+                    iterators.add(doc.getPreviousDocs(property, null).iterator());                            \n+                    docs = Iterators.mergeSorted(iterators, new Comparator<NodeDocument>() {\n+                                @Override\n+                                public int compare(NodeDocument o1,\n+                                                   NodeDocument o2) {\n+                                    Revision r1 = getFirstRevision(o1);\n+                                    Revision r2 = getFirstRevision(o2);\n+                                    return c.compare(r1, r2);\n+                                }\n+                            \n+                                private Revision getFirstRevision(NodeDocument d) {\n+                                    Map<Revision, String> values;\n+                                    if (Objects.equal(d.getId(), doc.getId())) {\n+                                        // return local map for main document\n+                                        values = d.getLocalMap(property);\n+                                    } else {\n+                                        values = d.getValueMap(property);\n+                                    }\n+                                    return values.keySet().iterator().next();\n+                                }\n+                        \n+                            });\n                 }\n \n                 return new MergeSortedIterators<Map.Entry<Revision, String>>(\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/util/MergeSortedIterators.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/util/MergeSortedIterators.java\nindex 48bed082ee..3cb3dc5093 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/util/MergeSortedIterators.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/util/MergeSortedIterators.java\n@@ -100,7 +100,9 @@ private void fetchNextIterator() {\n             PeekingIterator<T> pIt = Iterators.peekingIterator(it);\n             if (!iterators.isEmpty()\n                     &&  comparator.compare(pIt.peek(), lastPeek) < 0) {\n-                throw new IllegalStateException(description() + \" First element of next iterator must be greater than previous iterator\");\n+                throw new IllegalStateException(description() + \n+                        \" First element of next iterator (\" + pIt.peek() + \")\" +\n+                        \" must be after previous iterator (\" + lastPeek + \")\");\n             }\n             lastPeek = pIt.peek();\n             iterators.add(pIt);\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 33, 
  "jira_id": "2433", 
  "nb_skipped": 9, 
  "commit": "7fca85bf", 
  "nb_failure": 0, 
  "linesRem": 4
}