{
  "files": 1, 
  "nb_test": 2425, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.plugins.document.DocumentSplitTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/SplitOperations.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/SplitOperations.java\nindex 33aafe5a08..a4265212db 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/SplitOperations.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/SplitOperations.java\n@@ -233,6 +233,7 @@ private void collectRevisionsAndCommitRoot() {\n         committedChanges.put(REVISIONS, revisions);\n         NavigableMap<Revision, String> commitRoot =\n                 new TreeMap<Revision, String>(context.getRevisionComparator());\n+        boolean mostRecent = true;\n         for (Map.Entry<Revision, String> entry : doc.getLocalCommitRoot().entrySet()) {\n             Revision r = entry.getKey();\n             if (splitRevs.contains(r)) {\n@@ -240,11 +241,15 @@ private void collectRevisionsAndCommitRoot() {\n                 numValues++;\n             } else if (r.getClusterId() == context.getClusterId() \n                     && !changes.contains(r)) {\n-                // OAK-2528: _commitRoot entry without associated\n-                // change -> consider as garbage\n+                // OAK-2528: _commitRoot entry without associated change\n+                // consider all but most recent as garbage (OAK-3333)\n+                if (mostRecent) {\n+                    mostRecent = false;\n+                } else {\n                     addGarbage(r, COMMIT_ROOT);\n                 }\n             }\n+        }\n         committedChanges.put(COMMIT_ROOT, commitRoot);\n     }\n \n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 7, 
  "jira_id": "3333", 
  "nb_skipped": 1, 
  "commit": "194999ed", 
  "nb_failure": 1, 
  "linesRem": 2
}