{
  "files": 1, 
  "nb_test": 404, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.plugins.index.p2.strategy.ContentMirrorStoreStrategyTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/p2/strategy/ContentMirrorStoreStrategy.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/p2/strategy/ContentMirrorStoreStrategy.java\nindex 36c1dee6ef..9792b659ef 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/p2/strategy/ContentMirrorStoreStrategy.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/index/p2/strategy/ContentMirrorStoreStrategy.java\n@@ -16,11 +16,12 @@\n  */\n package org.apache.jackrabbit.oak.plugins.index.p2.strategy;\n \n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.Iterator;\n-import java.util.LinkedList;\n-import java.util.Queue;\n+import java.util.Map;\n import java.util.Set;\n+import java.util.TreeMap;\n \n import org.apache.jackrabbit.oak.api.CommitFailedException;\n import org.apache.jackrabbit.oak.api.PropertyState;\n@@ -38,46 +39,66 @@ public void remove(NodeBuilder index, String key, Iterable<String> values) {\n             return;\n         }\n         NodeBuilder child = index.child(key);\n-        Queue<NodeBuilder> parentQueue = new LinkedList<NodeBuilder>();\n+        Map<String, NodeBuilder> parents = new TreeMap<String, NodeBuilder>(Collections.reverseOrder());\n+\n         for (String rm : values) {\n             if (PathUtils.denotesRoot(rm)) {\n                 child.removeProperty(\"match\");\n             } else {\n-                NodeBuilder indexEntry = child;\n-                Iterator<String> segments = PathUtils.elements(rm).iterator();\n+                String parentPath = PathUtils.getParentPath(rm);\n+                String name = PathUtils.getName(rm);\n+                NodeBuilder indexEntry = parents.get(parentPath);\n+                if (indexEntry == null) {\n+                    indexEntry = child;\n+                    String segmentPath = \"\";\n+                    Iterator<String> segments = PathUtils.elements(parentPath)\n+                            .iterator();\n                     while (segments.hasNext()) {\n                         String segment = segments.next();\n-                    if (segments.hasNext()) {\n-                        parentQueue.add(indexEntry);\n+                        segmentPath = PathUtils.concat(segmentPath, segment);\n                         indexEntry = indexEntry.child(segment);\n-                    } else {\n-                        // last segment\n-                        if (indexEntry.hasChildNode(segment)) {\n-                            indexEntry.removeNode(segment);\n+                        parents.put(segmentPath, indexEntry);\n+                    }\n                 }\n+                if (indexEntry.hasChildNode(name)) {\n+                    NodeBuilder childEntry = indexEntry.child(name);\n+                    childEntry.removeProperty(\"match\");\n+                    if (childEntry.getChildNodeCount() == 0) {\n+                        indexEntry.removeNode(name);\n                     }\n                 }\n             }\n         }\n         // prune the index: remove all children that have no children\n         // and no \"match\" property progressing bottom up\n-        // see OAK-520\n-        // while (!parentQueue.isEmpty()) {\n-        // NodeBuilder node = parentQueue.poll();\n-        // for (String name : node.getChildNodeNames()) {\n-        // NodeBuilder segment = node.child(name);\n-        // if (segment.getChildNodeCount() == 0\n-        // && segment.getProperty(\"match\") == null) {\n-        // segment.removeNode(name);\n-        // }\n-        // }\n-        // }\n-        // finally remove the index node if empty\n-        if (child.getChildNodeCount() == 0) {\n+        Iterator<String> it = parents.keySet().iterator();\n+        while (it.hasNext()) {\n+            String path = it.next();\n+            NodeBuilder parent = parents.get(path);\n+            pruneNode(parent);\n+        }\n+\n+        // finally prune the index node\n+        pruneNode(child);\n+        if (child.getChildNodeCount() == 0\n+                && child.getProperty(\"match\") == null) {\n             index.removeNode(key);\n         }\n     }\n \n+    private void pruneNode(NodeBuilder parent) {\n+        if (parent.isRemoved()) {\n+            return;\n+        }\n+        for (String name : parent.getChildNodeNames()) {\n+            NodeBuilder segment = parent.child(name);\n+            if (segment.getChildNodeCount() == 0\n+                    && segment.getProperty(\"match\") == null) {\n+                parent.removeNode(name);\n+            }\n+        }\n+    }\n+\n     @Override\n     public void insert(NodeBuilder index, String key, boolean unique,\n             Iterable<String> values) throws CommitFailedException {\n@@ -85,9 +106,7 @@ public void insert(NodeBuilder index, String key, boolean unique,\n \n         for (String add : values) {\n             NodeBuilder indexEntry = child;\n-            Iterator<String> segments = PathUtils.elements(add).iterator();\n-            while (segments.hasNext()) {\n-                String segment = segments.next();\n+            for(String segment: PathUtils.elements(add)){\n                 indexEntry = indexEntry.child(segment);\n             }\n             indexEntry.setProperty(\"match\", true);\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 46, 
  "jira_id": "520", 
  "nb_skipped": 0, 
  "commit": "ec961a38", 
  "nb_failure": 1, 
  "linesRem": 27
}