{
  "files": 6, 
  "nb_test": 1815, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.plugins.segment.file.FileStoreTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/CompactionMap.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/CompactionMap.java\nindex a33cba562d..bbf5d30f36 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/CompactionMap.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/CompactionMap.java\n@@ -93,6 +93,19 @@ boolean wasCompactedTo(RecordId before, RecordId after) {\n         return after.equals(get(before));\n     }\n \n+    /**\n+     * Checks whether content in the segment with the given identifier was\n+     * compacted to new segments.\n+     *\n+     * @param id segment identifier\n+     * @return whether the identified segment was compacted\n+     */\n+    boolean wasCompacted(SegmentId id) {\n+        long msb = id.getMostSignificantBits();\n+        long lsb = id.getLeastSignificantBits();\n+        return findEntry(msb, lsb) != -1;\n+    }\n+\n     public RecordId get(RecordId before) {\n         RecordId after = recent.get(before);\n         if (after != null) {\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/Compactor.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/Compactor.java\nindex 45bbbcc9d7..14278ca97e 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/Compactor.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/Compactor.java\n@@ -75,7 +75,8 @@\n \n     public Compactor(SegmentWriter writer) {\n         this.writer = writer;\n-        this.builder = writer.writeNode(EMPTY_NODE).builder();\n+        this.builder =\n+                new SegmentNodeBuilder(writer.writeNode(EMPTY_NODE), writer);\n     }\n \n     public SegmentNodeState compact(NodeState before, NodeState after) {\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/Record.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/Record.java\nindex f65a168170..ec8fbfdfbb 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/Record.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/Record.java\n@@ -64,6 +64,15 @@ protected boolean wasCompactedTo(Record after) {\n         return map.wasCompactedTo(getRecordId(), after.getRecordId());\n     }\n \n+    /**\n+     * Returns the tracker of the segment that contains this record.\n+     *\n+     * @return segment tracker\n+     */\n+    protected SegmentTracker getTracker() {\n+        return segmentId.getTracker();\n+    }\n+\n     /**\n      * Returns the segment that contains this record.\n      *\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeBuilder.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeBuilder.java\nindex 7fc474ff0e..d532bdf803 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeBuilder.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentNodeBuilder.java\n@@ -33,8 +33,12 @@\n     private long updateCount = 0;\n \n     SegmentNodeBuilder(SegmentNodeState base) {\n+        this(base, base.getTracker().getWriter());\n+    }\n+\n+    SegmentNodeBuilder(SegmentNodeState base, SegmentWriter writer) {\n         super(base);\n-        this.writer = base.getRecordId().getSegmentId().getTracker().getWriter();\n+        this.writer = writer;\n     }\n \n     //-------------------------------------------------< MemoryNodeBuilder >--\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentWriter.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentWriter.java\nindex 41fc1ef110..a11b93194a 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentWriter.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/SegmentWriter.java\n@@ -940,10 +940,22 @@ public synchronized RecordId writeTemplate(Template template) {\n         return id;\n     }\n \n+    private SegmentNodeState uncompact(SegmentNodeState state) {\n+        RecordId id = tracker.getCompactionMap().get(state.getRecordId());\n+        if (id != null) {\n+            return new SegmentNodeState(id);\n+        } else {\n+            return state;\n+        }\n+    }\n+\n     public SegmentNodeState writeNode(NodeState state) {\n-        if (state instanceof SegmentNodeState\n-                && store.containsSegment(((SegmentNodeState) state).getRecordId().getSegmentId())) {\n-            return (SegmentNodeState) state;\n+        if (state instanceof SegmentNodeState) {\n+            SegmentNodeState sns = uncompact((SegmentNodeState) state);\n+            if (sns != state || store.containsSegment(\n+                    sns.getRecordId().getSegmentId())) {\n+                return sns;\n+            }\n         }\n \n         SegmentNodeState before = null;\n@@ -952,12 +964,15 @@ public SegmentNodeState writeNode(NodeState state) {\n         if (state instanceof ModifiedNodeState) {\n             after = (ModifiedNodeState) state;\n             NodeState base = after.getBaseState();\n-            if (base instanceof SegmentNodeState\n-                    && store.containsSegment(((SegmentNodeState) base).getRecordId().getSegmentId())) {\n-                before = (SegmentNodeState) base;\n+            if (base instanceof SegmentNodeState) {\n+                SegmentNodeState sns = uncompact((SegmentNodeState) base);\n+                if (sns != base || store.containsSegment(\n+                        sns.getRecordId().getSegmentId())) {\n+                    before = sns;\n                     beforeTemplate = before.getTemplate();\n                 }\n             }\n+        }\n \n         Template template = new Template(state);\n         RecordId templateId;\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/FileStore.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/FileStore.java\nindex 324357266a..f378247dc6 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/FileStore.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/FileStore.java\n@@ -415,6 +415,7 @@ public void compact() {\n \n         SegmentNodeState before = getHead();\n         SegmentNodeState after = compactor.compact(EMPTY_NODE, before);\n+        writer.flush();\n         while (!setHead(before, after)) {\n             // Some other concurrent changes have been made.\n             // Rebase (and compact) those changes on top of the\n@@ -422,9 +423,16 @@ public void compact() {\n             SegmentNodeState head = getHead();\n             after = compactor.compact(before, head);\n             before = head;\n+            writer.flush();\n         }\n         tracker.setCompactionMap(compactor.getCompactionMap());\n \n+        // Drop the SegmentWriter caches and flush any existing state\n+        // in an attempt to prevent new references to old pre-compacted\n+        // content. TODO: There should be a cleaner way to do this.\n+        tracker.getWriter().dropCache();\n+        tracker.getWriter().flush();\n+\n         log.info(\"TarMK compaction completed in {}ms\", MILLISECONDS\n                 .convert(System.nanoTime() - start, NANOSECONDS));\n         cleanupNeeded.set(true);\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 58, 
  "jira_id": "1932", 
  "nb_skipped": 9, 
  "commit": "913c2f53", 
  "nb_failure": 1, 
  "linesRem": 8
}