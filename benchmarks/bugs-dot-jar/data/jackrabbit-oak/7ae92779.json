{
  "files": 2, 
  "nb_test": 1260, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.plugins.segment.MapRecordTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/MapEntry.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/MapEntry.java\nindex ad93d4ba11..93f798db04 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/MapEntry.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/MapEntry.java\n@@ -18,6 +18,7 @@\n \n import static com.google.common.base.Preconditions.checkNotNull;\n import static com.google.common.base.Preconditions.checkState;\n+import static org.apache.jackrabbit.oak.plugins.segment.MapRecord.HASH_MASK;\n \n import java.util.Map;\n \n@@ -87,7 +88,7 @@ public RecordId setValue(RecordId value) {\n     @Override\n     public int compareTo(MapEntry that) {\n         return ComparisonChain.start()\n-                .compare(getHash(), that.getHash())\n+                .compare(getHash() & HASH_MASK, that.getHash() & HASH_MASK)\n                 .compare(name, that.name)\n                 .compare(value, that.value)\n                 .result();\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/MapRecord.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/MapRecord.java\nindex 9e0c76e6e0..e39b928f50 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/MapRecord.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/MapRecord.java\n@@ -37,6 +37,7 @@\n \n     private static final long M = 0x5DEECE66DL;\n     private static final long A = 0xBL;\n+    static final long HASH_MASK = 0xFFFFFFFFL;\n \n     static int getHash(String name) {\n         return (int) (((name.hashCode() ^ M) * M + A) >> 16);\n@@ -153,7 +154,7 @@ MapEntry getEntry(String key) {\n             int bitmap = segment.readInt(getOffset(4));\n             int mask = BUCKETS_PER_LEVEL - 1;\n             int shift = 32 - (level + 1) * LEVEL_BITS;\n-            int index = (hash >> shift) & mask;\n+            int index = (int) (hash >> shift) & mask;\n             int bit = 1 << index;\n             if ((bitmap & bit) != 0) {\n                 int ids = bitCount(bitmap & (bit - 1));\n@@ -167,8 +168,8 @@ MapEntry getEntry(String key) {\n         // this is a leaf record; scan the list to find a matching entry\n         int d = -1;\n         for (int i = 0; i < size && d < 0; i++) {\n-            d = Integer.valueOf(segment.readInt(getOffset(4 + i * 4)))\n-                    .compareTo(Integer.valueOf(hash));\n+            d = Long.valueOf(segment.readInt(getOffset(4 + i * 4)) & HASH_MASK)\n+                    .compareTo(Long.valueOf(hash & HASH_MASK));\n             if (d == 0) {\n                 RecordId keyId = segment.readRecordId(\n                         getOffset(4 + size * 4, i));\n@@ -379,7 +380,7 @@ private static int compare(MapEntry before, MapEntry after) {\n             return -1;  // see above\n         } else {\n             return ComparisonChain.start()\n-                    .compare(before.getHash(), after.getHash())\n+                    .compare(before.getHash() & HASH_MASK, after.getHash() & HASH_MASK)\n                     .compare(before.getName(), after.getName())\n                     .result();\n         }\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 7, 
  "jira_id": "1104", 
  "nb_skipped": 5, 
  "commit": "7ae92779", 
  "nb_failure": 1, 
  "linesRem": 5
}