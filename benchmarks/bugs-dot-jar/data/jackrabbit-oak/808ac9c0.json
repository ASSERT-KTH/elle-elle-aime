{
  "files": 2, 
  "nb_test": 1562, 
  "nb_error": 1, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.plugins.index.property.PropertyIndexQueryTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Expression.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Expression.java\nindex 5c3716232f..5f79f71703 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Expression.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Expression.java\n@@ -42,7 +42,7 @@ public static Expression and(Expression old, Expression add) {\n         } else if (add == null) {\n             return old;\n         }\n-        return new Expression.Condition(old, \"and\", add, Expression.PRECEDENCE_AND);\n+        return new Expression.AndCondition(old, add);\n     }\n     \n     /**\n@@ -54,6 +54,15 @@ boolean isCondition() {\n         return false;\n     }\n     \n+    /**\n+     * Pull an OR condition up to the right hand side of an AND condition.\n+     * \n+     * @return the (possibly rotated) expression\n+     */\n+    Expression pullOrRight() {\n+        return this;\n+    }\n+    \n     /**\n      * Get the operator / operation precedence. The JCR specification uses:\n      * 1=OR, 2=AND, 3=condition, 4=operand  \n@@ -255,6 +264,27 @@ public String getCommonLeftPart() {\n             super(left, \"and\", right, Expression.PRECEDENCE_AND);\n         }\n         \n+        @Override\n+        AndCondition pullOrRight() {\n+            if (right instanceof OrCondition) {\n+                return this;\n+            } else if (left instanceof OrCondition) {\n+                return new AndCondition(right, left);\n+            }\n+            if (right instanceof AndCondition) {\n+                // pull up x:\n+                // a and (b and (x)) -> (a and b) and (x)\n+                AndCondition r2 = (AndCondition) right;\n+                r2 = r2.pullOrRight();\n+                AndCondition l2 = new AndCondition(left, r2.left);\n+                l2 = l2.pullOrRight();\n+                return new AndCondition(l2, r2.right);\n+            } else if (left instanceof AndCondition) {\n+                return new AndCondition(right, left).pullOrRight();\n+            }\n+            return this;\n+        }\n+        \n     }\n     \n     /**\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Statement.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Statement.java\nindex 03a243855e..05044299a3 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Statement.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/query/xpath/Statement.java\n@@ -58,8 +58,34 @@ public Statement optimize() {\n         if (where == null) {\n             return this;\n         }\n-        if (where instanceof OrCondition) {\n-            OrCondition or = (OrCondition) where;\n+        ArrayList<Expression> unionList = new ArrayList<Expression>();\n+        addToUnionList(where, unionList);\n+        if (unionList.size() == 1) {\n+            return this;\n+        }\n+        Statement union = null;\n+        for (int i = 0; i < unionList.size(); i++) {\n+            Expression e = unionList.get(i);\n+            Statement s = new Statement();\n+            s.columnSelector = columnSelector;\n+            s.selectors = selectors;\n+            s.columnList = columnList;\n+            s.where = e;\n+            if (i == unionList.size() - 1) {\n+                s.xpathQuery = xpathQuery;\n+            }\n+            if (union == null) {\n+                union = s;\n+            } else {\n+                union = new UnionStatement(union.optimize(), s.optimize());\n+            }\n+        }\n+        return union;\n+    }\n+    \n+    private static void addToUnionList(Expression condition,  ArrayList<Expression> unionList) {\n+        if (condition instanceof OrCondition) {\n+            OrCondition or = (OrCondition) condition;\n             if (or.getCommonLeftPart() != null) {\n                 // @x = 1 or @x = 2 \n                 // is automatically converted to \n@@ -72,29 +98,17 @@ public Statement optimize() {\n                 // @x = 1 or @y = 2\n                 // or similar are converted to\n                 // (@x = 1) union (@y = 2)\n-                Statement s1 = new Statement();\n-                s1.columnSelector = columnSelector;\n-                s1.selectors = selectors;\n-                s1.columnList = columnList;\n-                s1.where = or.left;\n-                Statement s2 = new Statement();\n-                s2.columnSelector = columnSelector;\n-                s2.selectors = selectors;\n-                s2.columnList = columnList;\n-                s2.where = or.right;\n-                s2.xpathQuery = xpathQuery;\n-                return new UnionStatement(s1.optimize(), s2.optimize());\n-            }\n-        } else if (where instanceof AndCondition) {\n+                addToUnionList(or.left, unionList);\n+                addToUnionList(or.right, unionList);\n+                return;\n+            }\n+        } else if (condition instanceof AndCondition) {\n             // conditions of type\n             // @a = 1 and (@x = 1 or @y = 2)\n             // are automatically converted to\n             // (@a = 1 and @x = 1) union (@a = 1 and @y = 2)\n-            AndCondition and = (AndCondition) where;\n-            if (and.left instanceof OrCondition && !(and.right instanceof OrCondition)) {\n-                // swap left and right\n-                and = new AndCondition(and.right, and.left);\n-            }\n+            AndCondition and = (AndCondition) condition;\n+            and = and.pullOrRight();\n             if (and.right instanceof OrCondition) {\n                 OrCondition or = (OrCondition) and.right;\n                 if (or.getCommonLeftPart() != null) {\n@@ -106,23 +120,13 @@ public Statement optimize() {\n                     // do not optimize \"contains\"\n                 } else {\n                     // same as above, but with the added \"and\"\n-                    // TODO avoid code duplication if possible\n-                    Statement s1 = new Statement();\n-                    s1.columnSelector = columnSelector;\n-                    s1.selectors = selectors;\n-                    s1.columnList = columnList;\n-                    s1.where = new AndCondition(and.left, or.left);\n-                    Statement s2 = new Statement();\n-                    s2.columnSelector = columnSelector;\n-                    s2.selectors = selectors;\n-                    s2.columnList = columnList;\n-                    s2.where = new AndCondition(and.left, or.right);\n-                    s2.xpathQuery = xpathQuery;\n-                    return new UnionStatement(s1.optimize(), s2.optimize());\n+                    addToUnionList(new AndCondition(and.left, or.left), unionList);\n+                    addToUnionList(new AndCondition(and.left, or.right), unionList);\n+                    return;\n                 }\n             }\n         }\n-        return this;\n+        unionList.add(condition);\n     }\n     \n     @Override\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 70, 
  "jira_id": "1432", 
  "nb_skipped": 7, 
  "commit": "808ac9c0", 
  "nb_failure": 0, 
  "linesRem": 36
}