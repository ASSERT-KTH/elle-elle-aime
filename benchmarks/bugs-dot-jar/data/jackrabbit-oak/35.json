{
    "bug_id": 35,
    "classification": {
        "singleLine": false
    },
    "commit": "8159fc21",
    "failing_tests": [
        "org.apache.jackrabbit.oak.plugins.index.lucene.LucenePropertyIndexTest"
    ],
    "files": 2,
    "jira_id": "2434",
    "linesAdd": 0,
    "linesRem": 16,
    "nb_error": 0,
    "nb_failure": 2,
    "nb_skipped": 2,
    "nb_test": 380,
    "patch": "diff --git a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndex.java b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndex.java\nindex d35915cdc2..7b0934e66c 100644\n--- a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndex.java\n+++ b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LuceneIndex.java\n@@ -724,16 +724,8 @@ public boolean visit(FullTextAnd and) {\n                 BooleanQuery q = new BooleanQuery();\n                 for (FullTextExpression e : and.list) {\n                     Query x = getFullTextQuery(e, analyzer, reader);\n-                    // Lucene can't deal with \"must(must_not(x))\"\n-                    if (x instanceof BooleanQuery) {\n-                        BooleanQuery bq = (BooleanQuery) x;\n-                        for (BooleanClause c : bq.clauses()) {\n-                            q.add(c);\n-                        }\n-                    } else {\n                     q.add(x, MUST);\n                 }\n-                }\n                 result.set(q);\n                 return true;\n             }\ndiff --git a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LucenePropertyIndex.java b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LucenePropertyIndex.java\nindex 136f973f6b..e0bbf7905c 100644\n--- a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LucenePropertyIndex.java\n+++ b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/LucenePropertyIndex.java\n@@ -836,16 +836,8 @@ public boolean visit(FullTextAnd and) {\n                 BooleanQuery q = new BooleanQuery();\n                 for (FullTextExpression e : and.list) {\n                     Query x = getFullTextQuery(plan, e, analyzer);\n-                    // Lucene can't deal with \"must(must_not(x))\"\n-                    if (x instanceof BooleanQuery) {\n-                        BooleanQuery bq = (BooleanQuery) x;\n-                        for (BooleanClause c : bq.clauses()) {\n-                            q.add(c);\n-                        }\n-                    } else {\n                     q.add(x, MUST);\n                 }\n-                }\n                 result.set(q);\n                 return true;\n             }\n",
    "project": "jackrabbit-oak",
    "buggy_compile_success": true,
    "buggy_test_success": false,
    "fixed_compile_success": true,
    "fixed_test_success": false
}