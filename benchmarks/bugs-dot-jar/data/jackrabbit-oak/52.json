{
    "bug_id": 52,
    "classification": {
        "singleLine": false
    },
    "commit": "06c367af",
    "failing_tests": [
        "org.apache.jackrabbit.oak.plugins.index.lucene.IndexDefinitionTest"
    ],
    "files": 1,
    "jira_id": "4300",
    "linesAdd": 7,
    "linesRem": 1,
    "nb_error": 0,
    "nb_failure": 1,
    "nb_skipped": 6,
    "nb_test": 359,
    "patch": "diff --git a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/IndexDefinition.java b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/IndexDefinition.java\nindex 99018c5490..ed96808591 100644\n--- a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/IndexDefinition.java\n+++ b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/IndexDefinition.java\n@@ -270,7 +270,7 @@ public IndexDefinition(NodeState root, NodeState defn, @Nullable NodeBuilder def\n         }\n \n         this.maxFieldLength = getOptionalValue(defn, LuceneIndexConstants.MAX_FIELD_LENGTH, DEFAULT_MAX_FIELD_LENGTH);\n-        this.costPerEntry = getOptionalValue(defn, LuceneIndexConstants.COST_PER_ENTRY, 1.0);\n+        this.costPerEntry = getOptionalValue(defn, LuceneIndexConstants.COST_PER_ENTRY, getDefaultCostPerEntry(version));\n         this.costPerExecution = getOptionalValue(defn, LuceneIndexConstants.COST_PER_EXECUTION, 1.0);\n         this.indexesAllTypes = areAllTypesIndexed();\n         this.analyzers = collectAnalyzers(defn);\n@@ -1512,4 +1512,10 @@ public boolean getActiveDeleteEnabled() {\n         return activeDelete >= 0;\n     }\n \n+    private static double getDefaultCostPerEntry(IndexFormatVersion version) {\n+        //For older format cost per entry would be higher as it does a runtime\n+        //aggregation\n+        return version == IndexFormatVersion.V1 ?  1.5 : 1.0;\n+    }\n+\n }\n",
    "project": "jackrabbit-oak"
}