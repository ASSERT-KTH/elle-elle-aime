{
  "files": 3, 
  "nb_test": 1562, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.security.authentication.TokenDefaultLoginModuleTest", 
    "org.apache.jackrabbit.oak.security.authentication.Jackrabbit2ConfigurationTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/token/TokenLoginModule.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/token/TokenLoginModule.java\nindex 79a05df510..74f5281d24 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/token/TokenLoginModule.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/token/TokenLoginModule.java\n@@ -170,7 +170,8 @@ public boolean commit() throws LoginException {\n                     for (String name : attributes.keySet()) {\n                         tc.setAttribute(name, attributes.get(name));\n                     }\n-                    updateSubject(tc, getAuthInfo(ti), null);\n+                    sharedState.put(SHARED_KEY_ATTRIBUTES, attributes);\n+                    updateSubject(tc, null, null);\n                 } else {\n                     // failed to create token -> fail commit()\n                     log.debug(\"TokenProvider failed to create a login token for user \" + userId);\n@@ -236,19 +237,21 @@ private TokenProvider getTokenProvider() {\n      * @param tokenInfo The tokenInfo to retrieve attributes from.\n      * @return The {@code AuthInfo} resulting from the successful login.\n      */\n-    @Nonnull\n-    private AuthInfo getAuthInfo(TokenInfo tokenInfo) {\n+    @CheckForNull\n+    private AuthInfo getAuthInfo(@Nullable TokenInfo tokenInfo) {\n+        if (tokenInfo != null) {\n             Map<String, Object> attributes = new HashMap<String, Object>();\n-        if (tokenProvider != null && tokenInfo != null) {\n             Map<String, String> publicAttributes = tokenInfo.getPublicAttributes();\n             for (String attrName : publicAttributes.keySet()) {\n                 attributes.put(attrName, publicAttributes.get(attrName));\n             }\n+            return new AuthInfoImpl(tokenInfo.getUserId(), attributes, principals);\n+        } else {\n+            return null;\n         }\n-        return new AuthInfoImpl(userId, attributes, principals);\n     }\n \n-    private void updateSubject(@Nonnull TokenCredentials tc, @Nonnull AuthInfo authInfo,\n+    private void updateSubject(@Nonnull TokenCredentials tc, @Nullable AuthInfo authInfo,\n                                @Nullable Set<? extends Principal> principals) {\n         if (!subject.isReadOnly()) {\n             subject.getPublicCredentials().add(tc);\n@@ -257,12 +260,9 @@ private void updateSubject(@Nonnull TokenCredentials tc, @Nonnull AuthInfo authI\n                 subject.getPrincipals().addAll(principals);\n             }\n \n-            // replace all existing auth-info\n-            Set<AuthInfo> ais = subject.getPublicCredentials(AuthInfo.class);\n-            if (!ais.isEmpty()) {\n-                subject.getPublicCredentials().removeAll(ais);\n+            if (authInfo != null) {\n+                setAuthInfo(authInfo, subject);\n             }\n-            subject.getPublicCredentials().add(authInfo);\n         }\n     }\n }\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/user/LoginModuleImpl.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/user/LoginModuleImpl.java\nindex 6434c4b9c3..489b5d254c 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/user/LoginModuleImpl.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/user/LoginModuleImpl.java\n@@ -33,9 +33,9 @@\n \n import org.apache.jackrabbit.oak.api.AuthInfo;\n import org.apache.jackrabbit.oak.spi.security.ConfigurationParameters;\n-import org.apache.jackrabbit.oak.spi.security.authentication.AuthInfoImpl;\n import org.apache.jackrabbit.oak.spi.security.SecurityProvider;\n import org.apache.jackrabbit.oak.spi.security.authentication.AbstractLoginModule;\n+import org.apache.jackrabbit.oak.spi.security.authentication.AuthInfoImpl;\n import org.apache.jackrabbit.oak.spi.security.authentication.Authentication;\n import org.apache.jackrabbit.oak.spi.security.authentication.ImpersonationCredentials;\n import org.apache.jackrabbit.oak.spi.security.user.UserConfiguration;\n@@ -143,10 +143,7 @@ public boolean commit() {\n             if (!subject.isReadOnly()) {\n                 subject.getPrincipals().addAll(principals);\n                 subject.getPublicCredentials().add(credentials);\n-                Set<AuthInfo> ais = subject.getPublicCredentials(AuthInfo.class);\n-                if (ais.isEmpty()) {\n-                    subject.getPublicCredentials().add(createAuthInfo());\n-                }\n+                setAuthInfo(createAuthInfo(), subject);\n             } else {\n                 log.debug(\"Could not add information to read only subject {}\", subject);\n             }\n@@ -213,14 +210,19 @@ private String getAnonymousId() {\n     }\n \n     private AuthInfo createAuthInfo() {\n-        Map<String, Object> attributes = new HashMap<String, Object>();\n         Credentials creds;\n         if (credentials instanceof ImpersonationCredentials) {\n             creds = ((ImpersonationCredentials) credentials).getBaseCredentials();\n         } else {\n             creds = credentials;\n         }\n-        if (creds instanceof SimpleCredentials) {\n+        Map<String, Object> attributes = new HashMap<String, Object>();\n+        Object shared = sharedState.get(SHARED_KEY_ATTRIBUTES);\n+        if (shared instanceof Map) {\n+            for (Object key : ((Map) shared).keySet()) {\n+                attributes.put(key.toString(), ((Map) shared).get(key));\n+            }\n+        } else if (creds instanceof SimpleCredentials) {\n             SimpleCredentials sc = (SimpleCredentials) creds;\n             for (String attrName : sc.getAttributeNames()) {\n                 attributes.put(attrName, sc.getAttribute(attrName));\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/AbstractLoginModule.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/AbstractLoginModule.java\nindex 5a73a5cefc..e9a2d8d064 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/AbstractLoginModule.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/AbstractLoginModule.java\n@@ -35,6 +35,7 @@\n import javax.security.auth.spi.LoginModule;\n \n import org.apache.jackrabbit.api.security.user.UserManager;\n+import org.apache.jackrabbit.oak.api.AuthInfo;\n import org.apache.jackrabbit.oak.api.ContentRepository;\n import org.apache.jackrabbit.oak.api.ContentSession;\n import org.apache.jackrabbit.oak.api.Root;\n@@ -154,6 +155,12 @@\n      */\n     public static final String SHARED_KEY_LOGIN_NAME = \"javax.security.auth.login.name\";\n \n+    /**\n+     * Key of the sharedState entry referring to public attributes that are shared\n+     * between multiple login modules.\n+     */\n+    public static final String SHARED_KEY_ATTRIBUTES = \"javax.security.auth.login.attributes\";\n+\n     protected Subject subject;\n     protected CallbackHandler callbackHandler;\n     protected Map sharedState;\n@@ -441,4 +448,12 @@ protected PrincipalProvider getPrincipalProvider() {\n             return principalProvider.getPrincipals(userId);\n         }\n     }\n+\n+    static protected void setAuthInfo(@Nonnull AuthInfo authInfo, @Nonnull Subject subject) {\n+        Set<AuthInfo> ais = subject.getPublicCredentials(AuthInfo.class);\n+        if (!ais.isEmpty()) {\n+            subject.getPublicCredentials().removeAll(ais);\n+        }\n+        subject.getPublicCredentials().add(authInfo);\n+    }\n }\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 35, 
  "jira_id": "1363", 
  "nb_skipped": 6, 
  "commit": "69b68890", 
  "nb_failure": 2, 
  "linesRem": 18
}