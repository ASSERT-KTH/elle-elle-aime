{
  "files": 2, 
  "nb_test": 404, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.namepath.NamePathMapperImplTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/JcrPathParser.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/JcrPathParser.java\nindex 2dc5bee987..2854048aab 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/JcrPathParser.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/JcrPathParser.java\n@@ -261,6 +261,7 @@ public static boolean parse(String jcrPath, Listener listener) {\n \n     public static boolean validate(String jcrPath) {\n         Listener listener = new Listener() {\n+            int depth;\n             boolean hasRoot;\n             @Override\n             public boolean root() {\n@@ -280,7 +281,8 @@ public boolean current() {\n \n             @Override\n             public boolean parent() {\n-                return true;\n+                depth--;\n+                return !hasRoot || depth >= 0;\n             }\n \n             @Override\n@@ -289,6 +291,7 @@ public void error(String message) {\n \n             @Override\n             public boolean name(String name, int index) {\n+                depth++;\n                 return true;\n             }\n \ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/NamePathMapperImpl.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/NamePathMapperImpl.java\nindex 65639f1dcb..c19578ffe4 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/NamePathMapperImpl.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/namepath/NamePathMapperImpl.java\n@@ -21,6 +21,7 @@\n \n import javax.annotation.Nonnull;\n \n+import org.apache.jackrabbit.oak.commons.PathUtils;\n import org.apache.jackrabbit.oak.plugins.identifier.IdentifierManager;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -77,7 +78,7 @@ public String getOakPathKeepIndex(String jcrPath) {\n \n     @Override\n     @Nonnull\n-    public String getJcrPath(String oakPath) {\n+    public String getJcrPath(final String oakPath) {\n         final List<String> elements = new ArrayList<String>();\n \n         if (\"/\".equals(oakPath)) {\n@@ -103,11 +104,18 @@ public boolean current() {\n \n             @Override\n             public boolean parent() {\n-                if (elements.isEmpty() || \"..\".equals(elements.get(elements.size() - 1))) {\n+                int prevIdx = elements.size() - 1;\n+                String prevElem = prevIdx >= 0 ? elements.get(prevIdx) : null;\n+\n+                if (prevElem == null || PathUtils.denotesParent(prevElem)) {\n                     elements.add(\"..\");\n                     return true;\n                 }\n-                elements.remove(elements.size() - 1);\n+                if (prevElem.isEmpty()) {\n+                    throw new IllegalArgumentException(\"Absolute path escapes root: \" + oakPath);\n+                }\n+\n+                elements.remove(prevElem);\n                 return true;\n             }\n \n@@ -150,7 +158,7 @@ public boolean name(String name, int index) {\n         return jcrPath.toString();\n     }\n \n-    private String getOakPath(String jcrPath, final boolean keepIndex) {\n+    private String getOakPath(final String jcrPath, final boolean keepIndex) {\n         if (\"/\".equals(jcrPath)) {\n             // avoid the need to special case the root path later on\n             return \"/\";\n@@ -237,11 +245,19 @@ public boolean current() {\n \n             @Override\n             public boolean parent() {\n-                if (elements.isEmpty() || \"..\".equals(elements.get(elements.size() - 1))) {\n+                int prevIdx = elements.size() - 1;\n+                String prevElem = prevIdx >= 0 ? elements.get(prevIdx) : null;\n+\n+                if (prevElem == null || PathUtils.denotesParent(prevElem)) {\n                     elements.add(\"..\");\n                     return true;\n                 }\n-                elements.remove(elements.size() - 1);\n+                if (prevElem.isEmpty()) {\n+                    parseErrors.append(\"Absolute path escapes root: \").append(jcrPath);\n+                    return false;\n+                }\n+\n+                elements.remove(prevElem);\n                 return true;\n             }\n \n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 26, 
  "jira_id": "498", 
  "nb_skipped": 0, 
  "commit": "f2a2edec", 
  "nb_failure": 3, 
  "linesRem": 7
}