{
  "files": 1, 
  "nb_test": 308, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.plugins.index.lucene.NodeStateAnalyzerFactoryTest"
  ], 
  "patch": "diff --git a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/NodeStateAnalyzerFactory.java b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/NodeStateAnalyzerFactory.java\nindex 589fc63163..a02983fa19 100644\n--- a/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/NodeStateAnalyzerFactory.java\n+++ b/oak-lucene/src/main/java/org/apache/jackrabbit/oak/plugins/index/lucene/NodeStateAnalyzerFactory.java\n@@ -41,6 +41,7 @@\n import org.apache.jackrabbit.oak.plugins.index.lucene.util.TokenizerChain;\n import org.apache.jackrabbit.oak.plugins.tree.TreeFactory;\n import org.apache.jackrabbit.oak.spi.state.NodeState;\n+import org.apache.jackrabbit.oak.spi.state.NodeStateUtils;\n import org.apache.lucene.analysis.Analyzer;\n import org.apache.lucene.analysis.util.AbstractAnalysisFactory;\n import org.apache.lucene.analysis.util.CharArraySet;\n@@ -201,6 +202,7 @@ private void init(AbstractAnalysisFactory o, NodeState state) {\n             String name = ps.getName();\n             if (ps.getType() != Type.BINARY\n                     && !ps.isArray()\n+                    && !(name != null && NodeStateUtils.isHidden(name))\n                     && !IGNORE_PROP_NAMES.contains(name)) {\n                 result.put(name, ps.getValue(Type.STRING));\n             }\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 2, 
  "jira_id": "3817", 
  "nb_skipped": 3, 
  "commit": "2a02a138", 
  "nb_failure": 1, 
  "linesRem": 0
}