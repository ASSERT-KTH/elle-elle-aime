{
  "files": 1, 
  "nb_test": 17, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.spi.security.authentication.external.ExternalIdentityRefTest"
  ], 
  "patch": "diff --git a/oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/ExternalIdentityRef.java b/oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/ExternalIdentityRef.java\nindex ae67498f95..f3ffd6f74a 100644\n--- a/oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/ExternalIdentityRef.java\n+++ b/oak-auth-external/src/main/java/org/apache/jackrabbit/oak/spi/security/authentication/external/ExternalIdentityRef.java\n@@ -39,13 +39,13 @@\n      */\n     public ExternalIdentityRef(@Nonnull String id, @CheckForNull String providerName) {\n         this.id = id;\n-        this.providerName = providerName;\n+        this.providerName = (providerName == null || providerName.isEmpty()) ? null : providerName;\n \n         StringBuilder b = new StringBuilder();\n         escape(b, id);\n-        if (providerName != null && providerName.length() > 0) {\n+        if (this.providerName != null) {\n             b.append(';');\n-            escape(b, providerName);\n+            escape(b, this.providerName);\n         }\n         string =  b.toString();\n     }\n@@ -82,6 +82,7 @@ public String getString() {\n      * @param str the string\n      * @return the reference\n      */\n+    @Nonnull\n     public static ExternalIdentityRef fromString(@Nonnull String str) {\n         int idx = str.indexOf(';');\n         if (idx < 0) {\n@@ -99,7 +100,7 @@ public static ExternalIdentityRef fromString(@Nonnull String str) {\n      * @param builder the builder\n      * @param str the string\n      */\n-    private void escape(StringBuilder builder, CharSequence str) {\n+    private static void escape(@Nonnull StringBuilder builder, @Nonnull CharSequence str) {\n         final int len = str.length();\n         for (int i=0; i<len; i++) {\n             char c = str.charAt(i);\n@@ -119,16 +120,20 @@ public String toString() {\n     }\n \n     /**\n-     * Tests if the given object is an external identity reference and if it's getString() is equal to this.\n+     * Tests if the given object is an external identity reference and if it's\n+     * getString() is equal to this. Note, that there is no need to\n+     * include {@code id} and {@code provider} fields in the comparison as\n+     * the string representation already incorporates both.\n      */\n     @Override\n     public boolean equals(Object o) {\n-        try {\n-            // assuming that we never compare other types of classes\n-            return this == o || string.equals(((ExternalIdentityRef) o).string);\n-        } catch (Exception e) {\n-            return false;\n+        if (this == o) {\n+            return true;\n         }\n+        if (o instanceof ExternalIdentityRef) {\n+            return string.equals(((ExternalIdentityRef) o).string);\n+        }\n+        return false;\n     }\n \n     /**\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 15, 
  "jira_id": "3510", 
  "nb_skipped": 0, 
  "commit": "01f5a26f", 
  "nb_failure": 1, 
  "linesRem": 10
}