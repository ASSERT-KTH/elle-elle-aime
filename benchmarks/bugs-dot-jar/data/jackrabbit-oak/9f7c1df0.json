{
  "files": 1, 
  "nb_test": 14, 
  "nb_error": 14, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.upgrade.RepositoryGroupMemberSplitUpgradeTest", 
    "org.apache.jackrabbit.oak.upgrade.RepositoryGroupMemberUpgradeTest", 
    "org.apache.jackrabbit.oak.upgrade.RepositoryUpgradeTest"
  ], 
  "patch": "diff --git a/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/JackrabbitNodeState.java b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/JackrabbitNodeState.java\nindex c063a26214..3752b91f31 100644\n--- a/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/JackrabbitNodeState.java\n+++ b/oak-upgrade/src/main/java/org/apache/jackrabbit/oak/upgrade/JackrabbitNodeState.java\n@@ -32,6 +32,7 @@\n import static org.apache.jackrabbit.JcrConstants.JCR_PRIMARYTYPE;\n import static org.apache.jackrabbit.JcrConstants.JCR_UUID;\n import static org.apache.jackrabbit.JcrConstants.MIX_REFERENCEABLE;\n+import static org.apache.jackrabbit.JcrConstants.NT_BASE;\n import static org.apache.jackrabbit.JcrConstants.NT_FROZENNODE;\n import static org.apache.jackrabbit.JcrConstants.NT_UNSTRUCTURED;\n import static org.apache.jackrabbit.oak.api.Type.NAME;\n@@ -131,6 +132,8 @@ private JackrabbitNodeState(\n         this.uriToPrefix = parent.uriToPrefix;\n         this.properties = createProperties(bundle);\n         this.nodes = createNodes(bundle);\n+        setChildOrder();\n+        fixFrozenUuid();\n         this.useBinaryReferences = parent.useBinaryReferences;\n         logNewNode(this);\n     }\n@@ -151,6 +154,7 @@ private JackrabbitNodeState(\n             NodePropBundle bundle = loader.loadBundle(id);\n             this.properties = createProperties(bundle);\n             this.nodes = createNodes(bundle);\n+            setChildOrder();\n         } catch (ItemStateException e) {\n             throw new IllegalStateException(\"Unable to access node \" + id, e);\n         }\n@@ -239,6 +243,13 @@ public NodeBuilder builder() {\n \n     //-----------------------------------------------------------< private >--\n \n+    private void setChildOrder() {\n+        if (isOrderable.apply(this)) {\n+            properties.put(OAK_CHILD_ORDER, PropertyStates.createProperty(\n+                    OAK_CHILD_ORDER, nodes.keySet(), Type.NAMES));\n+        }\n+    }\n+\n     private Map<String, NodeId> createNodes(NodePropBundle bundle) {\n         Map<String, NodeId> children = newLinkedHashMap();\n         for (ChildNodeEntry entry : bundle.getChildNodeEntries()) {\n@@ -282,11 +293,6 @@ public NodeBuilder builder() {\n                     JCR_UUID, bundle.getId().toString()));\n         }\n \n-        if (isOrderable.apply(primary, mixins)) {\n-            properties.put(OAK_CHILD_ORDER, PropertyStates.createProperty(\n-                    OAK_CHILD_ORDER, nodes.keySet(), Type.NAMES));\n-        }\n-\n         for (PropertyEntry property : bundle.getPropertyEntries()) {\n             String name = createName(property.getName());\n             try {\n@@ -303,18 +309,22 @@ public NodeBuilder builder() {\n             }\n         }\n \n+        return properties;\n+    }\n+\n+    private void fixFrozenUuid() {\n         // OAK-1789: Convert the jcr:frozenUuid of a non-referenceable\n         // frozen node from UUID to a path identifier\n         PropertyState frozenUuid = properties.get(JCR_FROZENUUID);\n         if (frozenUuid != null\n                 && frozenUuid.getType() == STRING\n-                && isFrozenNode.apply(primary, mixins)) {\n-            String frozenPrimary = NT_UNSTRUCTURED;\n+                && isFrozenNode.apply(this)) {\n+            String frozenPrimary = NT_BASE;\n             Set<String> frozenMixins = newHashSet();\n \n             PropertyState property = properties.get(JCR_FROZENPRIMARYTYPE);\n             if (property != null && property.getType() == NAME) {\n-                primary = property.getValue(NAME);\n+                frozenPrimary = property.getValue(NAME);\n             }\n             property = properties.get(JCR_FROZENMIXINTYPES);\n             if (property != null && property.getType() == NAMES) {\n@@ -328,8 +338,6 @@ public NodeBuilder builder() {\n                 properties.put(JCR_FROZENUUID, frozenUuid);\n             }\n         }\n-\n-        return properties;\n     }\n \n     private org.apache.jackrabbit.oak.api.PropertyState createProperty(\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 18, 
  "jira_id": "1789", 
  "nb_skipped": 0, 
  "commit": "9f7c1df0", 
  "nb_failure": 0, 
  "linesRem": 10
}