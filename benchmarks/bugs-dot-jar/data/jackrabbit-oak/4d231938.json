{
  "files": 1, 
  "nb_test": 2895, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.security.authorization.permission.TreeTypeProviderTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/TreeTypeProvider.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/TreeTypeProvider.java\nindex 1b1c336373..2aadfd8866 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/TreeTypeProvider.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/TreeTypeProvider.java\n@@ -18,6 +18,7 @@\n \n import javax.annotation.Nonnull;\n \n+import org.apache.jackrabbit.JcrConstants;\n import org.apache.jackrabbit.oak.api.Tree;\n import org.apache.jackrabbit.oak.plugins.version.VersionConstants;\n import org.apache.jackrabbit.oak.spi.security.Context;\n@@ -26,9 +27,8 @@\n \n /**\n  * <h3>TreeTypeProvider</h3>\n-  * For optimization purpose an Immutable tree will be associated with a\n-  * {@code TreeTypeProvider} that allows for fast detection of the following types\n-  * of Trees:\n+ * Allows to distinguish different types of trees based on their name, ancestry\n+ * or primary type. Currently the following types are supported:\n  *\n  * <ul>\n  *     <li>{@link #TYPE_HIDDEN}: a hidden tree whose name starts with \":\".\n@@ -38,6 +38,7 @@\n  *     <li>{@link #TYPE_VERSION}: if a given tree is located within\n  *     any of the version related stores defined by JSR 283. Depending on the\n  *     permission evaluation implementation those items require special treatment.</li>\n+ *     <li>{@link #TYPE_INTERNAL}: repository internal content that is not hidden (e.g. permission store)</li>\n  *     <li>{@link #TYPE_DEFAULT}: the default type for trees that don't\n  *     match any of the upper types.</li>\n  * </ul>\n@@ -55,21 +56,30 @@\n     // hidden trees\n     public static final int TYPE_HIDDEN = 16;\n \n-    private final Context contextInfo;\n+    private final Context authorizationContext;\n \n-    public TreeTypeProvider(@Nonnull Context contextInfo) {\n-        this.contextInfo = contextInfo;\n+    public TreeTypeProvider(@Nonnull Context authorizationContext) {\n+        this.authorizationContext = authorizationContext;\n     }\n \n-    public int getType(Tree tree) {\n+    public int getType(@Nonnull Tree tree) {\n         if (tree.isRoot()) {\n             return TYPE_DEFAULT;\n         } else {\n-            return getType(tree, getType(tree.getParent()));\n+            Tree t = tree;\n+            while (!t.isRoot()) {\n+                int type = getType(t.getName(), t);\n+                // stop walking up the hierarchy as soon as a special type is found\n+                if (TYPE_DEFAULT != type) {\n+                    return type;\n+                }\n+                t = t.getParent();\n+            }\n+            return TYPE_DEFAULT;\n         }\n     }\n \n-    public int getType(Tree tree, int parentType) {\n+    public int getType(@Nonnull Tree tree, int parentType) {\n         if (tree.isRoot()) {\n             return TYPE_DEFAULT;\n         }\n@@ -89,19 +99,24 @@ public int getType(Tree tree, int parentType) {\n                 type = TYPE_AC;\n                 break;\n             default:\n-                    String name = tree.getName();\n+                type = getType(tree.getName(), tree);\n+        }\n+        return type;\n+    }\n+\n+    private int getType(@Nonnull String name, @Nonnull Tree tree) {\n+        int type;\n         if (NodeStateUtils.isHidden(name)) {\n             type = TYPE_HIDDEN;\n         } else if (VersionConstants.VERSION_STORE_ROOT_NAMES.contains(name)) {\n-                        type = TYPE_VERSION;\n+            type = (JcrConstants.JCR_SYSTEM.equals(tree.getParent().getName())) ?  TYPE_VERSION : TYPE_DEFAULT;\n         } else if (PermissionConstants.REP_PERMISSION_STORE.equals(name)) {\n             type = TYPE_INTERNAL;\n-                    } else if (contextInfo.definesContextRoot(tree)) {\n+        } else if (authorizationContext.definesContextRoot(tree)) {\n             type = TYPE_AC;\n         } else {\n             type = TYPE_DEFAULT;\n         }\n-            }\n         return type;\n     }\n }\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 28, 
  "jira_id": "3530", 
  "nb_skipped": 1, 
  "commit": "4d231938", 
  "nb_failure": 3, 
  "linesRem": 13
}