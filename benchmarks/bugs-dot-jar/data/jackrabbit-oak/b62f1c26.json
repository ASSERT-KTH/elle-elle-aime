{
  "files": 2, 
  "nb_test": 379, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.mk.index.IndexTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/mk/index/Indexer.java b/oak-core/src/main/java/org/apache/jackrabbit/mk/index/Indexer.java\nindex 6b2a935dc0..be48a2818f 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/mk/index/Indexer.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/mk/index/Indexer.java\n@@ -299,6 +299,7 @@ public String updateEnd(String toRevision) {\n     /**\n      * Update the index with the given changes.\n      *\n+     * @param rootPath the root path\n      * @param t the changes\n      * @param lastRevision\n      */\n@@ -309,6 +310,7 @@ public void updateIndex(String rootPath, JsopReader t, String lastRevision) {\n                 break;\n             }\n             String path = PathUtils.concat(rootPath, t.readString());\n+            String target;\n             switch (r) {\n             case '+': {\n                 t.read(':');\n@@ -327,8 +329,16 @@ public void updateIndex(String rootPath, JsopReader t, String lastRevision) {\n                 }\n                 break;\n             }\n+            case '*':\n+                // TODO support and test copy operation (\"*\"),\n+                // specially in combination with other operations\n+                // possibly split up the commit in this case\n+                t.read(':');\n+                target = t.readString();\n+                moveOrCopyNode(path, false, target, lastRevision);\n+                break;\n             case '-':\n-                moveNode(path, null, lastRevision);\n+                moveOrCopyNode(path, true, null, lastRevision);\n                 break;\n             case '^': {\n                 removeProperty(path, lastRevision);\n@@ -342,9 +352,12 @@ public void updateIndex(String rootPath, JsopReader t, String lastRevision) {\n                 break;\n             }\n             case '>':\n+                // TODO does move work correctly\n+                // in combination with other operations?\n+                // possibly split up the commit in this case\n                 t.read(':');\n                 String name = PathUtils.getName(path);\n-                String target, position;\n+                String position;\n                 if (t.matches('{')) {\n                     position = t.readString();\n                     t.read(':');\n@@ -364,7 +377,7 @@ public void updateIndex(String rootPath, JsopReader t, String lastRevision) {\n                 } else {\n                     throw ExceptionFactory.get(\"position: \" + position);\n                 }\n-                moveNode(path, target, lastRevision);\n+                moveOrCopyNode(path, true, target, lastRevision);\n                 break;\n             default:\n                 throw new AssertionError(\"token: \" + (char) t.getTokenType());\n@@ -430,7 +443,7 @@ private void addProperty(String path, String value) {\n         }\n     }\n \n-    private void moveNode(String sourcePath, String targetPath, String lastRevision) {\n+    private void moveOrCopyNode(String sourcePath, boolean remove, String targetPath, String lastRevision) {\n         if (isInIndex(sourcePath)) {\n             // don't index the index\n             return;\n@@ -444,7 +457,9 @@ private void moveNode(String sourcePath, String targetPath, String lastRevision)\n         NodeMap map = new NodeMap();\n         t.read('{');\n         NodeImpl n = NodeImpl.parse(map, t, 0, sourcePath);\n+        if (remove) {\n             addOrRemoveRecursive(n, true, false);\n+        }\n         if (targetPath != null) {\n             t = new JsopTokenizer(node);\n             map = new NodeMap();\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/mk/simple/SimpleKernelImpl.java b/oak-core/src/main/java/org/apache/jackrabbit/mk/simple/SimpleKernelImpl.java\nindex 87c2a96ea0..185731e6a3 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/mk/simple/SimpleKernelImpl.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/mk/simple/SimpleKernelImpl.java\n@@ -278,18 +278,20 @@ private String doCommit(String rootPath, JsopReader t, String revisionId, String\n                 break;\n             }\n             case '*': {\n-                // TODO is it really required?\n                 // TODO possibly support target position notation\n-                // TODO support copy in wrappers, index,...\n                 t.read(':');\n                 String target = t.readString();\n-                diff.tag('*').key(path).value(target);\n                 if (!PathUtils.isAbsolute(target)) {\n                     target = PathUtils.concat(rootPath, target);\n                 }\n-                NodeImpl node = data.getNode(from);\n+                diff.tag('*').key(path).value(target);\n                 String to = PathUtils.relativize(\"/\", target);\n-                data = data.cloneAndAddChildNode(to, false, null, node, rev);\n+                NodeImpl node = data.getNode(from);\n+                JsopStream json = new JsopStream();\n+                node.append(json, Integer.MAX_VALUE, 0, Integer.MAX_VALUE, false);\n+                json.read('{');\n+                NodeImpl n2 = NodeImpl.parse(nodeMap, json, rev);\n+                data = data.cloneAndAddChildNode(to, false, null, n2, rev);\n                 break;\n             }\n             default:\n@@ -555,6 +557,7 @@ public synchronized void dispose() {\n         }\n     }\n \n+    @Override\n     public String toString() {\n         return \"simple:\" + name;\n     }\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 27, 
  "jira_id": "47", 
  "nb_skipped": 0, 
  "commit": "b62f1c26", 
  "nb_failure": 2, 
  "linesRem": 9
}