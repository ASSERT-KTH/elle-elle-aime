{
  "files": 1, 
  "nb_test": 1838, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.security.authentication.token.TokenProviderImplTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/token/TokenProviderImpl.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/token/TokenProviderImpl.java\nindex 2d4600fb7d..a10b41daec 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/token/TokenProviderImpl.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authentication/token/TokenProviderImpl.java\n@@ -29,6 +29,7 @@\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n+import java.util.UUID;\n import javax.annotation.CheckForNull;\n import javax.annotation.Nonnull;\n import javax.jcr.AccessDeniedException;\n@@ -210,11 +211,7 @@ public TokenInfo createToken(String userId, Map<String, ?> attributes) {\n         if (tokenParent != null) {\n             try {\n                 long creationTime = new Date().getTime();\n-                Calendar creation = GregorianCalendar.getInstance();\n-                creation.setTimeInMillis(creationTime);\n-                String tokenName = Text.replace(ISO8601.format(creation), \":\", \".\");\n-\n-                NodeUtil tokenNode = tokenParent.addChild(tokenName, TOKEN_NT_NAME);\n+                NodeUtil tokenNode = createTokenNode(tokenParent, creationTime);\n                 tokenNode.setString(JcrConstants.JCR_UUID, IdentifierManager.generateUUID());\n \n                 String key = generateKey(options.getConfigValue(PARAM_TOKEN_LENGTH, DEFAULT_KEY_SIZE));\n@@ -397,6 +394,31 @@ private NodeUtil getTokenParent(String userId) {\n         return tokenParent;\n     }\n \n+    /**\n+     * Create a new token node below the specified {@code parent}.\n+     *\n+     * @param parent The parent node.\n+     * @param creationTime The creation time that is used as name hint.\n+     * @return The new token node\n+     * @throws AccessDeniedException\n+     */\n+    private NodeUtil createTokenNode(@Nonnull NodeUtil parent, @Nonnull long creationTime) throws AccessDeniedException {\n+        Calendar creation = GregorianCalendar.getInstance();\n+        creation.setTimeInMillis(creationTime);\n+        String tokenName = Text.replace(ISO8601.format(creation), \":\", \".\");\n+        NodeUtil tokenNode;\n+        try {\n+            tokenNode = parent.addChild(tokenName, TOKEN_NT_NAME);\n+            root.commit();\n+        } catch (CommitFailedException e) {\n+            // conflict while creating token node -> retry\n+            log.debug(\"Failed to create token node \" + tokenName + \". Using random name as fallback.\");\n+            root.refresh();\n+            tokenNode = parent.addChild(UUID.randomUUID().toString(), TOKEN_NT_NAME);\n+        }\n+        return tokenNode;\n+    }\n+\n     //--------------------------------------------------------------------------\n \n     /**\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 27, 
  "jira_id": "1697", 
  "nb_skipped": 8, 
  "commit": "1552be04", 
  "nb_failure": 1, 
  "linesRem": 5
}