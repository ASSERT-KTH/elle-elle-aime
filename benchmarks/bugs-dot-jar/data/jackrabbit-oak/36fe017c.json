{
  "files": 1, 
  "nb_test": 2004, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.plugins.document.DocumentNodeStoreTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java\nindex 043f3449bf..2de0d39970 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/document/DocumentNodeStore.java\n@@ -459,8 +459,11 @@ private void checkLastRevRecovery() {\n     }\n \n     public void dispose() {\n-        runBackgroundOperations();\n-        if (!isDisposed.getAndSet(true)) {\n+        if (isDisposed.getAndSet(true)) {\n+            // only dispose once\n+            return;\n+        }\n+        // notify background threads waiting on isDisposed\n         synchronized (isDisposed) {\n             isDisposed.notifyAll();\n         }\n@@ -469,6 +472,11 @@ public void dispose() {\n         } catch (InterruptedException e) {\n             // ignore\n         }\n+\n+        // do a final round of background operations after\n+        // the background thread stopped\n+        internalRunBackgroundOperations();\n+\n         if (leaseUpdateThread != null) {\n             try {\n                 leaseUpdateThread.join();\n@@ -476,11 +484,13 @@ public void dispose() {\n                 // ignore\n             }\n         }\n+\n+        // now mark this cluster node as inactive by\n+        // disposing the clusterNodeInfo\n         if (clusterNodeInfo != null) {\n             clusterNodeInfo.dispose();\n         }\n         store.dispose();\n-            LOG.info(\"Disposed DocumentNodeStore with clusterNodeId: {}\", clusterId);\n \n         if (blobStore instanceof Closeable) {\n             try {\n@@ -489,10 +499,10 @@ public void dispose() {\n                 LOG.debug(\"Error closing blob store \" + blobStore, ex);\n             }\n         }\n-        }\n         if (persistentCache != null) {\n             persistentCache.close();\n         }\n+        LOG.info(\"Disposed DocumentNodeStore with clusterNodeId: {}\", clusterId);\n     }\n \n     Revision setHeadRevision(@Nonnull Revision newHead) {\n@@ -544,6 +554,7 @@ Commit newCommit(@Nullable Revision base,\n             base = headRevision;\n         }\n         backgroundOperationLock.readLock().lock();\n+        checkOpen();\n         boolean success = false;\n         Commit c;\n         try {\n@@ -573,6 +584,7 @@ MergeCommit newMergeCommit(@Nullable Revision base, int numBranchCommits) {\n             base = headRevision;\n         }\n         backgroundOperationLock.readLock().lock();\n+        checkOpen();\n         boolean success = false;\n         MergeCommit c;\n         try {\n@@ -1502,15 +1514,22 @@ public Revision getHeadRevision() {\n \n     //----------------------< background operations >---------------------------\n \n-    public synchronized void runBackgroundOperations() {\n+    public void runBackgroundOperations() {\n         if (isDisposed.get()) {\n             return;\n         }\n-        if (simpleRevisionCounter != null) {\n-            // only when using timestamp\n+        try {\n+            internalRunBackgroundOperations();\n+        } catch (RuntimeException e) {\n+            if (isDisposed.get()) {\n+                LOG.warn(\"Background operation failed: \" + e.toString(), e);\n                 return;\n             }\n-        try {\n+            throw e;\n+        }\n+    }\n+\n+    private synchronized void internalRunBackgroundOperations() {\n         long start = clock.getTime();\n         long time = start;\n         // clean orphaned branches and collisions\n@@ -1536,12 +1555,6 @@ public synchronized void runBackgroundOperations() {\n         } else {\n             LOG.debug(msg, cleanTime, splitTime, writeTime, readTime, readStats);\n         }\n-        } catch (RuntimeException e) {\n-            if (isDisposed.get()) {\n-                return;\n-            }\n-            throw e;\n-        }\n     }\n \n     /**\n@@ -1771,6 +1784,19 @@ void backgroundWrite() {\n \n     //-----------------------------< internal >---------------------------------\n \n+    /**\n+     * Checks if this store is still open and throws an\n+     * {@link IllegalStateException} if it is already disposed (or a dispose\n+     * is in progress).\n+     *\n+     * @throws IllegalStateException if this store is disposed.\n+     */\n+    private void checkOpen() throws IllegalStateException {\n+        if (isDisposed.get()) {\n+            throw new IllegalStateException(\"This DocumentNodeStore is disposed\");\n+        }\n+    }\n+\n     private boolean dispatch(@Nonnull String jsonDiff,\n                              @Nonnull DocumentNodeState node,\n                              @Nonnull DocumentNodeState base,\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 40, 
  "jira_id": "2642", 
  "nb_skipped": 9, 
  "commit": "36fe017c", 
  "nb_failure": 1, 
  "linesRem": 14
}