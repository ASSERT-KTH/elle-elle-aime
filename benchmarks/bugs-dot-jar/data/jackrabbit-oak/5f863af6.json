{
  "files": 3, 
  "nb_test": 2413, 
  "nb_error": 0, 
  "classification": {
    "singleLine": false
  }, 
  "failing_tests": [
    "org.apache.jackrabbit.oak.security.authorization.restriction.PermissionTest", 
    "org.apache.jackrabbit.oak.security.authorization.restriction.CustomRestrictionProviderTest"
  ], 
  "patch": "diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/CompiledPermissionImpl.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/CompiledPermissionImpl.java\nindex 84f16ae242..153884f2c1 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/CompiledPermissionImpl.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/CompiledPermissionImpl.java\n@@ -145,7 +145,8 @@ public RepositoryPermission getRepositoryPermission() {\n         return new RepositoryPermission() {\n             @Override\n             public boolean isGranted(long repositoryPermissions) {\n-                return hasPermissions(getEntryIterator(new EntryPredicate()), repositoryPermissions, null);\n+                EntryPredicate predicate = new EntryPredicate();\n+                return hasPermissions(getEntryIterator(predicate), predicate, repositoryPermissions, null);\n             }\n         };\n     }\n@@ -242,8 +243,8 @@ public boolean isGranted(@Nonnull Tree tree, @Nullable PropertyState property, l\n \n     @Override\n     public boolean isGranted(@Nonnull String path, long permissions) {\n-        Iterator<PermissionEntry> it = getEntryIterator(new EntryPredicate(path, Permissions.respectParentPermissions(permissions)));\n-        return hasPermissions(it, permissions, path);\n+        EntryPredicate predicate = new EntryPredicate(path, Permissions.respectParentPermissions(permissions));\n+        return hasPermissions(getEntryIterator(predicate), predicate, permissions, path);\n     }\n \n     @Nonnull\n@@ -260,11 +261,12 @@ public boolean hasPrivileges(@Nullable Tree tree, @Nonnull String... privilegeNa\n     //------------------------------------------------------------< private >---\n \n     private boolean internalIsGranted(@Nonnull Tree tree, @Nullable PropertyState property, long permissions) {\n-        Iterator<PermissionEntry> it = getEntryIterator(tree, property, permissions);\n-        return hasPermissions(it, permissions, tree.getPath());\n+        EntryPredicate predicate = new EntryPredicate(tree, property, Permissions.respectParentPermissions(permissions));\n+        return hasPermissions(getEntryIterator(predicate), predicate, permissions, tree.getPath());\n     }\n \n     private boolean hasPermissions(@Nonnull Iterator<PermissionEntry> entries,\n+                                   @Nonnull EntryPredicate predicate,\n                                    long permissions, @Nullable String path) {\n         // calculate readable paths if the given permissions includes any read permission.\n         boolean isReadable = Permissions.diff(Permissions.READ, permissions) != Permissions.READ && readPolicy.isReadablePath(path, false);\n@@ -310,14 +312,18 @@ private boolean hasPermissions(@Nonnull Iterator<PermissionEntry> entries,\n             }\n \n             if (entry.isAllow) {\n+                if (!respectParent || predicate.apply(entry, false)) {\n                     allowBits.addDifference(entry.privilegeBits, denyBits);\n+                }\n                 long ap = PrivilegeBits.calculatePermissions(allowBits, parentAllowBits, true);\n                 allows |= Permissions.diff(ap, denies);\n                 if ((allows | ~permissions) == -1) {\n                     return true;\n                 }\n             } else {\n+                if (!respectParent || predicate.apply(entry, false)) {\n                     denyBits.addDifference(entry.privilegeBits, allowBits);\n+                }\n                 long dp = PrivilegeBits.calculatePermissions(denyBits, parentDenyBits, false);\n                 denies |= Permissions.diff(dp, allows);\n                 if (Permissions.includes(denies, permissions)) {\n@@ -376,11 +382,6 @@ private PrivilegeBits getPrivilegeBits(@Nullable Tree tree) {\n         return allowBits;\n     }\n \n-    @Nonnull\n-    private Iterator<PermissionEntry> getEntryIterator(@Nonnull Tree tree, @Nullable PropertyState property, long permissions) {\n-        return getEntryIterator(new EntryPredicate(tree, property, Permissions.respectParentPermissions(permissions)));\n-    }\n-\n     @Nonnull\n     private Iterator<PermissionEntry> getEntryIterator(@Nonnull EntryPredicate predicate) {\n         Iterator<PermissionEntry> userEntries = userStore.getEntryIterator(predicate);\n@@ -526,12 +527,16 @@ public boolean canReadProperties() {\n \n         @Override\n         public boolean isGranted(long permissions) {\n-            return hasPermissions(getIterator(null, permissions), permissions, tree.getPath());\n+            EntryPredicate predicate = new EntryPredicate(tree, null, Permissions.respectParentPermissions(permissions));\n+            Iterator<PermissionEntry> it = concat(new LazyIterator(this, true, predicate), new LazyIterator(this, false, predicate));\n+            return hasPermissions(it, predicate, permissions, tree.getPath());\n         }\n \n         @Override\n         public boolean isGranted(long permissions, @Nonnull PropertyState property) {\n-            return hasPermissions(getIterator(property, permissions), permissions, tree.getPath());\n+            EntryPredicate predicate = new EntryPredicate(tree, property, Permissions.respectParentPermissions(permissions));\n+            Iterator<PermissionEntry> it = concat(new LazyIterator(this, true, predicate), new LazyIterator(this, false, predicate));\n+            return hasPermissions(it, predicate, permissions, tree.getPath());\n         }\n \n         //--------------------------------------------------------< private >---\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/EntryPredicate.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/EntryPredicate.java\nindex 20fe76508f..023e18e534 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/EntryPredicate.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/EntryPredicate.java\n@@ -37,6 +37,7 @@\n \n     private final String parentPath;\n     private final Tree parent;\n+    private final boolean respectParent;\n \n     public EntryPredicate(@Nonnull Tree tree, @Nullable PropertyState property,\n                           boolean respectParent) {\n@@ -64,6 +65,7 @@ private EntryPredicate(@Nullable Tree tree, @Nullable PropertyState property,\n             parentPath = null;\n             parent = null;\n         }\n+        this.respectParent = parent != null || parentPath != null;\n     }\n \n     @CheckForNull\n@@ -73,25 +75,22 @@ public String getPath() {\n \n     @Override\n     public boolean apply(@Nullable PermissionEntry entry) {\n+        return apply(entry, true);\n+    }\n+\n+    public boolean apply(@Nullable PermissionEntry entry, boolean respectParent) {\n         if (entry == null) {\n             return false;\n         }\n+        respectParent &= this.respectParent;\n+\n         if (tree != null) {\n-            return entry.matches(tree, property) || applyToParent(entry);\n+            return entry.matches(tree, property) || (respectParent && parent != null && entry.matches(parent, null));\n         } else if (path != null) {\n-            return entry.matches(path) || applyToParent(entry);\n+            return entry.matches(path) || (respectParent && parentPath != null && entry.matches(parentPath));\n         } else {\n             return entry.matches();\n         }\n     }\n \n-    private boolean applyToParent(@Nonnull PermissionEntry entry) {\n-        if (parent != null) {\n-            return entry.matches(parent, null);\n-        } else if (parentPath != null) {\n-            return entry.matches(parentPath);\n-        } else {\n-            return false;\n-        }\n-    }\n }\n\\ No newline at end of file\ndiff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/PermissionEntry.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/PermissionEntry.java\nindex 36dbe01e95..136ccb9afc 100644\n--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/PermissionEntry.java\n+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/security/authorization/permission/PermissionEntry.java\n@@ -122,4 +122,16 @@ public boolean equals(Object o) {\n     public int hashCode() {\n         return Objects.hashCode(privilegeBits, index, path, isAllow, restriction);\n     }\n+\n+    @Override\n+    public String toString() {\n+        final StringBuilder sb = new StringBuilder(\"PermissionEntry{\");\n+        sb.append(\"isAllow=\").append(isAllow);\n+        sb.append(\", privilegeBits=\").append(privilegeBits);\n+        sb.append(\", index=\").append(index);\n+        sb.append(\", path='\").append(path).append('\\'');\n+        sb.append(\", restriction=\").append(restriction);\n+        sb.append('}');\n+        return sb.toString();\n+    }\n }\n\\ No newline at end of file\n", 
  "project": "jackrabbit-oak", 
  "linesAdd": 39, 
  "jira_id": "3324", 
  "nb_skipped": 1, 
  "commit": "5f863af6", 
  "nb_failure": 4, 
  "linesRem": 23
}